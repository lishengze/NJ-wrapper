
 #include "SpiCFunc.h"
 #include "FtdcSysUserApiStruct.h"
 #include <iostream>
 using std::cin;
 using std::cout;
 using std::endl;
 using namespace v8;
 Nan::Persistent<v8::Object> SpiObj;
 uv_async_t async;
 uv_async_t asyncOnFrontDisconnected;
 uv_async_t asyncOnHeartBeatWarning;
 
int g_RtnNetPartyLinkStatusInfoTopic_Sys_index = 0;
int g_RtnNetPartyLinkStatusInfoTopic_Fun_index = 0;
std::queue<void**> g_RtnNetPartyLinkStatusInfoTopic_queue;
uv_mutex_t g_RtnNetPartyLinkStatusInfoTopic_data_mutex;   // 
uv_mutex_t g_RtnNetPartyLinkStatusInfoTopic_mutex;
uv_sem_t   g_RtnNetPartyLinkStatusInfoTopic_sem;
 
int g_RtnTradeUserLoginInfoTopic_Sys_index = 0;
int g_RtnTradeUserLoginInfoTopic_Fun_index = 0; 
std::queue<void**> g_RtnTradeUserLoginInfoTopic_queue;
uv_mutex_t g_RtnTradeUserLoginInfoTopic_data_mutex;   // 
uv_mutex_t g_RtnTradeUserLoginInfoTopic_mutex;
uv_sem_t   g_RtnTradeUserLoginInfoTopic_sem;

int g_OnRspQryNetMonitorAttrScopeTopic_Sys_index = 0;
int g_OnRspQryNetMonitorAttrScopeTopic_Fun_index = 0; 
std::queue<void**> g_OnRspQryNetMonitorAttrScopeTopic_queue;
uv_mutex_t g_OnRspQryNetMonitorAttrScopeTopic_data_mutex;   // 
uv_mutex_t g_OnRspQryNetMonitorAttrScopeTopic_mutex;
uv_sem_t   g_OnRspQryNetMonitorAttrScopeTopicc_sem;


 //以下自动生成
 uv_async_t asyncOnRspQryTopCpuInfoTopic;
 uv_async_t asyncOnRtnTopCpuInfoTopic;
 uv_async_t asyncOnRspQryTopMemInfoTopic;
 uv_async_t asyncOnRtnTopMemInfoTopic;
 uv_async_t asyncOnRspQryTopProcessInfoTopic;
 uv_async_t asyncOnRtnTopProcessInfoTopic;
 uv_async_t asyncOnRspQryFileSystemInfoTopic;
 uv_async_t asyncOnRtnFileSystemInfoTopic;
 uv_async_t asyncOnRspQryNetworkInfoTopic;
 uv_async_t asyncOnRtnNetworkInfoTopic;
 uv_async_t asyncOnRspQryClientLoginTopic;
 uv_async_t asyncOnRspQryMonitorObjectTopic;
 uv_async_t asyncOnRtnMonitorObjectTopic;
 uv_async_t asyncOnRspQryObjectRationalTopic;
 uv_async_t asyncOnRtnObjectRationalTopic;
 uv_async_t asyncOnRspQrySyslogInfoTopic;
 uv_async_t asyncOnRtnSyslogInfoTopic;
 uv_async_t asyncOnRspQrySubscriberTopic;
 uv_async_t asyncOnRspQryOidRelationTopic;
 uv_async_t asyncOnRtnOidRelationTopic;
 uv_async_t asyncOnRspQryUserInfoTopic;
 uv_async_t asyncOnRtnUserInfoTopic;
 uv_async_t asyncOnRspQryOnlineUserInfoTopic;
 uv_async_t asyncOnRtnOnlineUserInfoTopic;
 uv_async_t asyncOnRspQryWarningEventTopic;
 uv_async_t asyncOnRtnWarningEventTopic;
 uv_async_t asyncOnRspQryCPUUsageTopic;
 uv_async_t asyncOnRtnCPUUsageTopic;
 uv_async_t asyncOnRspQryMemoryUsageTopic;
 uv_async_t asyncOnRtnMemoryUsageTopic;
 uv_async_t asyncOnRspQryDiskUsageTopic;
 uv_async_t asyncOnRtnDiskUsageTopic;
 uv_async_t asyncOnRspQryObjectAttrTopic;
 uv_async_t asyncOnRtnObjectAttrTopic;
 uv_async_t asyncOnRspQryInvalidateOrderTopic;
 uv_async_t asyncOnRtnInvalidateOrderTopic;
 uv_async_t asyncOnRspQryOrderStatusTopic;
 uv_async_t asyncOnRtnOrderStatusTopic;
 uv_async_t asyncOnRspQryBargainOrderTopic;
 uv_async_t asyncOnRtnBargainOrderTopic;
 uv_async_t asyncOnRspQryInstPropertyTopic;
 uv_async_t asyncOnRtnInstPropertyTopic;
 uv_async_t asyncOnRspQryMarginRateTopic;
 uv_async_t asyncOnRtnMarginRateTopic;
 uv_async_t asyncOnRspQryPriceLimitTopic;
 uv_async_t asyncOnRtnPriceLimitTopic;
 uv_async_t asyncOnRspQryPartPosiLimitTopic;
 uv_async_t asyncOnRtnPartPosiLimitTopic;
 uv_async_t asyncOnRspQryClientPosiLimitTopic;
 uv_async_t asyncOnRtnClientPosiLimitTopic;
 uv_async_t asyncOnRspQrySpecialPosiLimitTopic;
 uv_async_t asyncOnRtnSpecialPosiLimitTopic;
 uv_async_t asyncOnRspQryTransactionChgTopic;
 uv_async_t asyncOnRtnTransactionChgTopic;
 uv_async_t asyncOnRspQryClientChgTopic;
 uv_async_t asyncOnRtnClientChgTopic;
 uv_async_t asyncOnRspQryPartClientChgTopic;
 uv_async_t asyncOnRtnPartClientChgTopic;
 uv_async_t asyncOnRspQryPosiLimitChgTopic;
 uv_async_t asyncOnRtnPosiLimitChgTopic;
 uv_async_t asyncOnRspQryHedgeDetailChgTopic;
 uv_async_t asyncOnRtnHedgeDetailChgTopic;
 uv_async_t asyncOnRspQryParticipantChgTopic;
 uv_async_t asyncOnRtnParticipantChgTopic;
 uv_async_t asyncOnRspQryMarginRateChgTopic;
 uv_async_t asyncOnRtnMarginRateChgTopic;
 uv_async_t asyncOnRspQryUserIpChgTopic;
 uv_async_t asyncOnRtnUserIpChgTopic;
 uv_async_t asyncOnRspQryClientPosiLimitChgTopic;
 uv_async_t asyncOnRtnClientPosiLimitChgTopic;
 uv_async_t asyncOnRspQrySpecPosiLimitChgTopic;
 uv_async_t asyncOnRtnSpecPosiLimitChgTopic;
 uv_async_t asyncOnRspQryHistoryObjectAttrTopic;
 uv_async_t asyncOnRtnHistoryObjectAttrTopic;
 uv_async_t asyncOnRspQryFrontInfoTopic;
 uv_async_t asyncOnRtnFrontInfoTopic;
 uv_async_t asyncOnRspQrySysUserLoginTopic;
 uv_async_t asyncOnRspQrySysUserLogoutTopic;
 uv_async_t asyncOnRspQrySysUserPasswordUpdateTopic;
 uv_async_t asyncOnRspQrySysUserRegisterTopic;
 uv_async_t asyncOnRspQrySysUserDeleteTopic;
 uv_async_t asyncOnRspQryParticipantInitTopic;
 uv_async_t asyncOnRtnParticipantInitTopic;
 uv_async_t asyncOnRspQryUserInitTopic;
 uv_async_t asyncOnRtnUserInitTopic;
 uv_async_t asyncOnRspQryClientInitTopic;
 uv_async_t asyncOnRtnClientInitTopic;
 uv_async_t asyncOnRspQryTradeLogTopic;
 uv_async_t asyncOnRtnTradeLogTopic;
 uv_async_t asyncOnRspQryTradeUserLoginInfoTopic;
 uv_async_t asyncOnRtnTradeUserLoginInfoTopic;
 uv_async_t asyncOnRspQryPartTradeTopic;
 uv_async_t asyncOnRspQryTradepeakTopic;
 uv_async_t asyncOnRtnUpdateSysConfigTopic;
 uv_async_t asyncOnRtnSysUser;
 uv_async_t asyncOnRtnPriceLimitChgTopic;
 uv_async_t asyncOnRspQryHistoryCpuInfoTopic;
 uv_async_t asyncOnRspQryHistoryMemInfoTopic;
 uv_async_t asyncOnRspQryHistoryNetworkInfoTopic;
 uv_async_t asyncOnRspQryMonitorOnlineUser;
 uv_async_t asyncOnRspQryFrontStat;
 uv_async_t asyncOnRtnSysTimeSyncTopic;
 uv_async_t asyncOnRtnDataCenterChgTopic;
 uv_async_t asyncOnRspQryHistoryTradePeakTopic;
 uv_async_t asyncOnRtnHistoryTradePeakTopic;
 uv_async_t asyncOnRspQrySyslogEventTopic;
 uv_async_t asyncOnRtnSyslogEventTopic;
 uv_async_t asyncOnRspQryTradeDayChangeTopic;
 uv_async_t asyncOnRspQryWebAppInfoTopic;
 uv_async_t asyncOnRtnWebAppInfoTopic;
 uv_async_t asyncOnRspQryServletInfoTopic;
 uv_async_t asyncOnRtnServletInfoTopic;
 uv_async_t asyncOnRspQryFileInfoTopic;
 uv_async_t asyncOnRtnFileInfoTopic;
 uv_async_t asyncOnRspQrySessionInfoTopic;
 uv_async_t asyncOnRtnSessionInfoTopic;
 uv_async_t asyncOnRspQryJDBCInfoTopic;
 uv_async_t asyncOnRtnJDBCInfoTopic;
 uv_async_t asyncOnRspQryThreadInfoTopic;
 uv_async_t asyncOnRtnThreadInfoTopic;
 uv_async_t asyncOnRspQryVMInfoTopic;
 uv_async_t asyncOnRtnVMInfoTopic;
 uv_async_t asyncOnRspQryPropertyInfoTopic;
 uv_async_t asyncOnRtnPropertyInfoTopic;
 uv_async_t asyncOnRspQryMemPoolInfoTopic;
 uv_async_t asyncOnRtnMemPoolInfoTopic;
 uv_async_t asyncOnRspQryFileContentInfoTopic;
 uv_async_t asyncOnRtnFileContentInfoTopic;
 uv_async_t asyncOnRspQryConnectionInfoTopic;
 uv_async_t asyncOnRtnConnectionInfoTopic;
 uv_async_t asyncOnRspQryConnectorInfoTopic;
 uv_async_t asyncOnRtnConnectorInfoTopic;
 uv_async_t asyncOnRspQryDBQueryTopic;
 uv_async_t asyncOnRtnDBQueryTopic;
 uv_async_t asyncOnRspQryGeneralFieldTopic;
 uv_async_t asyncOnRtnGeneralFieldTopic;
 uv_async_t asyncOnRspQryGetFileTopic;
 uv_async_t asyncOnRspQryWarningQueryTopic;
 uv_async_t asyncOnRtnWarningQueryTopic;
 uv_async_t asyncOnRtnHostConfig;
 uv_async_t asyncOnRspQryGeneralOperateTopic;
 uv_async_t asyncOnRtnGeneralOperateTopic;
 uv_async_t asyncOnRspQryNetDeviceLinkedTopic;
 uv_async_t asyncOnRtnNetDeviceLinkedTopic;
 uv_async_t asyncOnRspQryTradeUserLoginStatTopic;
 uv_async_t asyncOnRspQryTradeFrontOrderRttStatTopic;
 uv_async_t asyncOnRtnTradeFrontOrderRttStatTopic;
 uv_async_t asyncOnRspQryParticTradeOrderStatesTopic;
 uv_async_t asyncOnRtnParticTradeOrderStatesTopic;
 uv_async_t asyncOnRspQryRouterInfoTopic;
 uv_async_t asyncOnRtnRouterInfoTopic;
 uv_async_t asyncOnRspQryDiskIOTopic;
 uv_async_t asyncOnRtnDiskIOTopic;
 uv_async_t asyncOnRspQryStatInfoTopic;
 uv_async_t asyncOnRtnStatInfoTopic;
 uv_async_t asyncOnRspQryTradeOrderRttCutLineTopic;
 uv_async_t asyncOnRtnTradeOrderRttCutLineTopic;
 uv_async_t asyncOnRspQryClientInfoTopic;
 uv_async_t asyncOnRtnClientInfoTopic;
 uv_async_t asyncOnRspQryEventDescriptionTopic;
 uv_async_t asyncOnRtnEventDescriptionTopic;
 uv_async_t asyncOnRspQryFrontUniqueIDTopic;
 uv_async_t asyncOnRtnFrontUniqueIDTopic;
 uv_async_t asyncOnRspQryNetPartyLinkAddrChangeTopic;
 uv_async_t asyncOnRtnNetPartyLinkAddrChangeTopic;
 uv_async_t asyncOnRspQryNetDelPartyLinkInfoTopic;
 uv_async_t asyncOnRtnNetDelPartyLinkInfoTopic;
 uv_async_t asyncOnRspQryPerformanceTopTopic;
 uv_async_t asyncOnRtnPerformanceTopTopic;
 uv_async_t asyncOnRspQryInstrumentStatusTopic;
 uv_async_t asyncOnRtnInstrumentStatusTopic;
 uv_async_t asyncOnRspQryCurrTradingSegmentAttrTopic;
 uv_async_t asyncOnRtnCurrTradingSegmentAttrTopic;
 uv_async_t asyncOnRspQryNetAreaTopic;
 uv_async_t asyncOnRtnNetAreaTopic;
 uv_async_t asyncOnRspQryNetSubAreaTopic;
 uv_async_t asyncOnRtnNetSubAreaTopic;
 uv_async_t asyncOnRspQryNetSubAreaIPTopic;
 uv_async_t asyncOnRtnNetSubAreaIPTopic;
 uv_async_t asyncOnRspQryNetDeviceTopic;
 uv_async_t asyncOnRtnNetDeviceTopic;
 uv_async_t asyncOnRspQryNetDeviceDetectTopic;
 uv_async_t asyncOnRspQryNetBuildingTopic;
 uv_async_t asyncOnRtnNetBuildingTopic;
 uv_async_t asyncOnRspQryNetRoomTopic;
 uv_async_t asyncOnRtnNetRoomTopic;
 uv_async_t asyncOnRspQryNetCabinetsTopic;
 uv_async_t asyncOnRtnNetCabinetsTopic;
 uv_async_t asyncOnRspQryNetOIDTopic;
 uv_async_t asyncOnRtnNetOIDTopic;
 uv_async_t asyncOnRspQryNetTimePolicyTopic;
 uv_async_t asyncOnRtnNetTimePolicyTopic;
 uv_async_t asyncOnRspQryNetGatherTaskTopic;
 uv_async_t asyncOnRtnNetGatherTaskTopic;
 uv_async_t asyncOnRspQryNetDeviceChgTopic;
 uv_async_t asyncOnRtnNetDeviceChgTopic;
 uv_async_t asyncOnRspQryNetDeviceTypeTopic;
 uv_async_t asyncOnRtnNetDeviceTypeTopic;
 uv_async_t asyncOnRspQryNetDeviceCategoryTopic;
 uv_async_t asyncOnRtnNetDeviceCategoryTopic;
 uv_async_t asyncOnRspQryNetManufactoryTopic;
 uv_async_t asyncOnRtnNetManufactoryTopic;
 uv_async_t asyncOnRspQryNetCommunityTopic;
 uv_async_t asyncOnRtnNetCommunityTopic;
 uv_async_t asyncOnRspQryNetPortTypeTopic;
 uv_async_t asyncOnRtnNetPortTypeTopic;
 uv_async_t asyncOnRspQryNetPartAccessSpotTopic;
 uv_async_t asyncOnRtnNetPartAccessSpotTopic;
 uv_async_t asyncOnRspQryNetInterfaceTopic;
 uv_async_t asyncOnRtnNetInterfaceTopic;
 uv_async_t asyncOnRspQryNetGeneralOIDTopic;
 uv_async_t asyncOnRtnNetGeneralOIDTopic;
 uv_async_t asyncOnRspQryNetMonitorTypeTopic;
 uv_async_t asyncOnRtnNetMonitorTypeTopic;
 uv_async_t asyncOnRspQryNetMonitorAttrScopeTopic;
 uv_async_t asyncOnRtnNetMonitorAttrScopeTopic;
 uv_async_t asyncOnRspQryNetMonitorAttrTypeTopic;
 uv_async_t asyncOnRtnNetMonitorAttrTypeTopic;
 uv_async_t asyncOnRspQryNetMonitorObjectAttrTopic;
 uv_async_t asyncOnRtnNetMonitorObjectAttrTopic;
 uv_async_t asyncOnRspQryNetFuncAreaTopic;
 uv_async_t asyncOnRtnNetFuncAreaTopic;
 uv_async_t asyncOnRspQryNetMonitorCommandTypeTopic;
 uv_async_t asyncOnRtnNetMonitorCommandTypeTopic;
 uv_async_t asyncOnRspQryNetMonitorActionGroupTopic;
 uv_async_t asyncOnRtnNetMonitorActionGroupTopic;
 uv_async_t asyncOnRspQryNetMonitorDeviceGroupTopic;
 uv_async_t asyncOnRtnNetMonitorDeviceGroupTopic;
 uv_async_t asyncOnRspQryNetMonitorTaskInfoTopic;
 uv_async_t asyncOnRtnNetMonitorTaskInfoTopic;
 uv_async_t asyncOnRspQryNetMonitorTaskResultTopic;
 uv_async_t asyncOnRtnNetMonitorTaskResultTopic;
 uv_async_t asyncOnRspQryNetMonitorTaskObjectSetTopic;
 uv_async_t asyncOnRtnNetMonitorTaskObjectSetTopic;
 uv_async_t asyncOnRspQryNetPartyLinkInfoTopic;
 uv_async_t asyncOnRtnNetPartyLinkInfoTopic;
 uv_async_t asyncOnRspQryNetMonitorActionAttrTopic;
 uv_async_t asyncOnRtnNetMonitorActionAttrTopic;
 uv_async_t asyncOnRspQryNetModuleTopic;
 uv_async_t asyncOnRtnNetModuleTopic;
 uv_async_t asyncOnRspQryNetEventExprTopic;
 uv_async_t asyncOnRtnNetEventExprTopic;
 uv_async_t asyncOnRspQryNetEventTypeTopic;
 uv_async_t asyncOnRtnNetEventTypeTopic;
 uv_async_t asyncOnRspQryNetSubEventTypeTopic;
 uv_async_t asyncOnRtnNetSubEventTypeTopic;
 uv_async_t asyncOnRspQryNetEventLevelTopic;
 uv_async_t asyncOnRtnNetEventLevelTopic;
 uv_async_t asyncOnRspQryNetMonitorTaskStatusResultTopic;
 uv_async_t asyncOnRtnNetMonitorTaskStatusResultTopic;
 uv_async_t asyncOnRspQryNetCfgFileTopic;
 uv_async_t asyncOnRtnNetCfgFileTopic;
 uv_async_t asyncOnRspQryNetMonitorDeviceTaskTopic;
 uv_async_t asyncOnRtnNetMonitorDeviceTaskTopic;
 uv_async_t asyncOnRspQryNetMonitorTaskInstAttrsTopic;
 uv_async_t asyncOnRtnNetMonitorTaskInstAttrsTopic;
 uv_async_t asyncOnRspQryFileGeneralOperTopic;
 uv_async_t asyncOnRtnFileGeneralOperTopic;
 uv_async_t asyncOnRspQryNetBaseLineTopic;
 uv_async_t asyncOnRtnNetBaseLineTopic;
 uv_async_t asyncOnRspQryNetBaseLineTaskTopic;
 uv_async_t asyncOnRtnNetBaseLineTaskTopic;
 uv_async_t asyncOnRspQryNetBaseLineResultTopic;
 uv_async_t asyncOnRtnNetBaseLineResultTopic;
 uv_async_t asyncOnRspQryNetPartyLinkStatusInfoTopic;
 uv_async_t asyncOnRtnNetPartyLinkStatusInfoTopic;
 uv_async_t asyncOnRspQryNetMemberSDHLineInfoTopic;
 uv_async_t asyncOnRtnNetMemberSDHLineInfoTopic;
 uv_async_t asyncOnRspQryNetDDNLinkInfoTopic;
 uv_async_t asyncOnRtnNetDDNLinkInfoTopic;
 uv_async_t asyncOnRspQryNetPseudMemberLinkInfoTopic;
 uv_async_t asyncOnRtnNetPseudMemberLinkInfoTopic;
 uv_async_t asyncOnRspQryOuterDeviceInfTopic;
 uv_async_t asyncOnRtnNetOuterDeviceInfTopic;
 uv_async_t asyncOnRspQryNetLocalPingResultInfoTopic;
 uv_async_t asyncOnRtnNetLocalPingResultInfoTopic;
 uv_async_t asyncOnRspQryNetRomotePingResultInfoTopic;
 uv_async_t asyncOnRtnNetRomotePingResultInfoTopic;
 uv_async_t asyncOnRtnMonitorTopProcessInfo;
 uv_async_t asyncOnRspQrySysInternalTopologyTopic;
 uv_async_t asyncOnRtnSysInternalTopologyTopic;
 uv_async_t asyncOnRspQryMemberLinkCostTopic;
 uv_async_t asyncOnRtnMemberLinkCostTopic;
 uv_async_t asyncOnRspQryNetPartylinkMonthlyRentTopic;
 uv_async_t asyncOnRtnNetPartylinkMonthlyRentTopic;
 uv_async_t asyncOnRspQryNetNonPartyLinkInfoTopic;
 uv_async_t asyncOnRtnNetNonPartyLinkInfoTopic;

void print_progress(uv_async_t *handle)
{
    Nan::HandleScope scope;

    if(SpiObj.IsEmpty())
    {
        return;
    }

    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnFrontConnected").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
        v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
        Nan::Callback callback(function);
        callback.Call(0, 0);
    }
}
void OnFrontDisconnected(uv_async_t *handle)
 {
 v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
 v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());
 if(!OnFrontConnected->IsFunction()){
        int nReason=(int)handle->data;
        std::cout<<" DisConnect reason:"<<nReason<<std::endl;

//        Nan::Callback callback(function);
//        int nReason=(int)handle->data;
//        v8::Local<v8::Integer> nReasonJS=Nan::New<v8::Integer>(nReason);
//        v8::Local<v8::Value> param[1];
//        param[0]=Local<v8::Value>(nReasonJS);
//        callback.Call(1, param);
    }
 }
 void OnHeartBeatWarning(uv_async_t *handle)
 {
   v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
   v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());
   if(OnFrontConnected->IsFunction()){
        v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
        Nan::Callback callback(function);
        int nTimeLapse=(int)handle->data;
        v8::Local<v8::Integer> nTimeLapseJS=Nan::New<v8::Integer>(nTimeLapse);
        v8::Local<v8::Value> param[1];
        param[0]=Local<v8::Value>(nTimeLapseJS);
        callback.Call(1, param);
    }

}

 void OnRspQryTopCpuInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopCpuInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTopCpuInfoField *pRspQryTopCpuInfo =(CShfeFtdcRspQryTopCpuInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryTopCpuInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTopCpuInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTopCpuInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRspQryTopCpuInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> LOAD=Nan::New<v8::String>("LOAD").ToLocalChecked();
     v8::Local<v8::Number> LOADValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->LOAD);
     v8::Local<v8::String> USER=Nan::New<v8::String>("USER").ToLocalChecked();
     v8::Local<v8::Number> USERValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->USER);
     v8::Local<v8::String> NICE=Nan::New<v8::String>("NICE").ToLocalChecked();
     v8::Local<v8::Number> NICEValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->NICE);
     v8::Local<v8::String> SYS=Nan::New<v8::String>("SYS").ToLocalChecked();
     v8::Local<v8::Number> SYSValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->SYS);
     v8::Local<v8::String> IDLE=Nan::New<v8::String>("IDLE").ToLocalChecked();
     v8::Local<v8::Number> IDLEValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->IDLE);
     v8::Local<v8::String> BLOCK=Nan::New<v8::String>("BLOCK").ToLocalChecked();
     v8::Local<v8::Number> BLOCKValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->BLOCK);
     v8::Local<v8::String> SWAIT=Nan::New<v8::String>("SWAIT").ToLocalChecked();
     v8::Local<v8::Number> SWAITValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->SWAIT);
     v8::Local<v8::String> INTR=Nan::New<v8::String>("INTR").ToLocalChecked();
     v8::Local<v8::Number> INTRValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->INTR);
     v8::Local<v8::String> SSYS=Nan::New<v8::String>("SSYS").ToLocalChecked();
     v8::Local<v8::Number> SSYSValue=Nan::New<v8::Number>(pRspQryTopCpuInfo->SSYS);
     v8::Local<v8::Object> pRspQryTopCpuInfoJS=Nan::New<v8::Object>();
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(LOAD),Local<v8::Value>(LOADValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(USER),Local<v8::Value>(USERValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(NICE),Local<v8::Value>(NICEValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(SYS),Local<v8::Value>(SYSValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(IDLE),Local<v8::Value>(IDLEValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(BLOCK),Local<v8::Value>(BLOCKValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(SWAIT),Local<v8::Value>(SWAITValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(INTR),Local<v8::Value>(INTRValue));
     pRspQryTopCpuInfoJS->Set(Local<v8::Value>(SSYS),Local<v8::Value>(SSYSValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTopCpuInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTopCpuInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTopCpuInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTopCpuInfoField *pRtnTopCpuInfo =(CShfeFtdcRtnTopCpuInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnTopCpuInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnTopCpuInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnTopCpuInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRtnTopCpuInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> LOAD=Nan::New<v8::String>("LOAD").ToLocalChecked();
     v8::Local<v8::Number> LOADValue=Nan::New<v8::Number>(pRtnTopCpuInfo->LOAD);
     v8::Local<v8::String> USER=Nan::New<v8::String>("USER").ToLocalChecked();
     v8::Local<v8::Number> USERValue=Nan::New<v8::Number>(pRtnTopCpuInfo->USER);
     v8::Local<v8::String> NICE=Nan::New<v8::String>("NICE").ToLocalChecked();
     v8::Local<v8::Number> NICEValue=Nan::New<v8::Number>(pRtnTopCpuInfo->NICE);
     v8::Local<v8::String> SYS=Nan::New<v8::String>("SYS").ToLocalChecked();
     v8::Local<v8::Number> SYSValue=Nan::New<v8::Number>(pRtnTopCpuInfo->SYS);
     v8::Local<v8::String> IDLE=Nan::New<v8::String>("IDLE").ToLocalChecked();
     v8::Local<v8::Number> IDLEValue=Nan::New<v8::Number>(pRtnTopCpuInfo->IDLE);
     v8::Local<v8::String> BLOCK=Nan::New<v8::String>("BLOCK").ToLocalChecked();
     v8::Local<v8::Number> BLOCKValue=Nan::New<v8::Number>(pRtnTopCpuInfo->BLOCK);
     v8::Local<v8::String> SWAIT=Nan::New<v8::String>("SWAIT").ToLocalChecked();
     v8::Local<v8::Number> SWAITValue=Nan::New<v8::Number>(pRtnTopCpuInfo->SWAIT);
     v8::Local<v8::String> INTR=Nan::New<v8::String>("INTR").ToLocalChecked();
     v8::Local<v8::Number> INTRValue=Nan::New<v8::Number>(pRtnTopCpuInfo->INTR);
     v8::Local<v8::String> SSYS=Nan::New<v8::String>("SSYS").ToLocalChecked();
     v8::Local<v8::Number> SSYSValue=Nan::New<v8::Number>(pRtnTopCpuInfo->SSYS);

     v8::Local<v8::Object> pRtnTopCpuInfoJS=Nan::New<v8::Object>();
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(LOAD),Local<v8::Value>(LOADValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(USER),Local<v8::Value>(USERValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(NICE),Local<v8::Value>(NICEValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(SYS),Local<v8::Value>(SYSValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(IDLE),Local<v8::Value>(IDLEValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(BLOCK),Local<v8::Value>(BLOCKValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(SWAIT),Local<v8::Value>(SWAITValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(INTR),Local<v8::Value>(INTRValue));
     pRtnTopCpuInfoJS->Set(Local<v8::Value>(SSYS),Local<v8::Value>(SSYSValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTopCpuInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTopMemInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopMemInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTopMemInfoField *pRspQryTopMemInfo =(CShfeFtdcRspQryTopMemInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryTopMemInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTopMemInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTopMemInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> TOTALREAL=Nan::New<v8::String>("TOTALREAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALREALValue=Nan::New<v8::Integer>(pRspQryTopMemInfo->TOTALREAL);
     v8::Local<v8::String> ACTIVEREAL=Nan::New<v8::String>("ACTIVEREAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEREALValue=Nan::New<v8::Integer>(pRspQryTopMemInfo->ACTIVEREAL);
     v8::Local<v8::String> TOTALVIRTUAL=Nan::New<v8::String>("TOTALVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALVIRTUALValue=Nan::New<v8::Integer>(pRspQryTopMemInfo->TOTALVIRTUAL);
     v8::Local<v8::String> ACTIVEVIRTUAL=Nan::New<v8::String>("ACTIVEVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEVIRTUALValue=Nan::New<v8::Integer>(pRspQryTopMemInfo->ACTIVEVIRTUAL);
     v8::Local<v8::String> FREE=Nan::New<v8::String>("FREE").ToLocalChecked();
     v8::Local<v8::Integer> FREEValue=Nan::New<v8::Integer>(pRspQryTopMemInfo->FREE);
     v8::Local<v8::Object> pRspQryTopMemInfoJS=Nan::New<v8::Object>();
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(TOTALREAL),Local<v8::Value>(TOTALREALValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(ACTIVEREAL),Local<v8::Value>(ACTIVEREALValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(TOTALVIRTUAL),Local<v8::Value>(TOTALVIRTUALValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(ACTIVEVIRTUAL),Local<v8::Value>(ACTIVEVIRTUALValue));
     pRspQryTopMemInfoJS->Set(Local<v8::Value>(FREE),Local<v8::Value>(FREEValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTopMemInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTopMemInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTopMemInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTopMemInfoField *pRtnTopMemInfo =(CShfeFtdcRtnTopMemInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnTopMemInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnTopMemInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnTopMemInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> TOTALREAL=Nan::New<v8::String>("TOTALREAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALREALValue=Nan::New<v8::Integer>(pRtnTopMemInfo->TOTALREAL);
     v8::Local<v8::String> ACTIVEREAL=Nan::New<v8::String>("ACTIVEREAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEREALValue=Nan::New<v8::Integer>(pRtnTopMemInfo->ACTIVEREAL);
     v8::Local<v8::String> TOTALVIRTUAL=Nan::New<v8::String>("TOTALVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALVIRTUALValue=Nan::New<v8::Integer>(pRtnTopMemInfo->TOTALVIRTUAL);
     v8::Local<v8::String> ACTIVEVIRTUAL=Nan::New<v8::String>("ACTIVEVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEVIRTUALValue=Nan::New<v8::Integer>(pRtnTopMemInfo->ACTIVEVIRTUAL);
     v8::Local<v8::String> FREE=Nan::New<v8::String>("FREE").ToLocalChecked();
     v8::Local<v8::Integer> FREEValue=Nan::New<v8::Integer>(pRtnTopMemInfo->FREE);

     v8::Local<v8::Object> pRtnTopMemInfoJS=Nan::New<v8::Object>();
     pRtnTopMemInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(TOTALREAL),Local<v8::Value>(TOTALREALValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(ACTIVEREAL),Local<v8::Value>(ACTIVEREALValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(TOTALVIRTUAL),Local<v8::Value>(TOTALVIRTUALValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(ACTIVEVIRTUAL),Local<v8::Value>(ACTIVEVIRTUALValue));
     pRtnTopMemInfoJS->Set(Local<v8::Value>(FREE),Local<v8::Value>(FREEValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTopMemInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTopProcessInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTopProcessInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTopProcessInfoField *pRspQryTopProcessInfo =(CShfeFtdcRspQryTopProcessInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryTopProcessInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTopProcessInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTopProcessInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRspQryTopProcessInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> TTY=Nan::New<v8::String>("TTY").ToLocalChecked();
     v8::Local<v8::String> TTYValue=Nan::New(pRspQryTopProcessInfo->TTY).ToLocalChecked();
     v8::Local<v8::String> PID=Nan::New<v8::String>("PID").ToLocalChecked();
     v8::Local<v8::Integer> PIDValue=Nan::New<v8::Integer>(pRspQryTopProcessInfo->PID);
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRspQryTopProcessInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> PRI=Nan::New<v8::String>("PRI").ToLocalChecked();
     v8::Local<v8::Integer> PRIValue=Nan::New<v8::Integer>(pRspQryTopProcessInfo->PRI);
     v8::Local<v8::String> NI=Nan::New<v8::String>("NI").ToLocalChecked();
     v8::Local<v8::Integer> NIValue=Nan::New<v8::Integer>(pRspQryTopProcessInfo->NI);
     v8::Local<v8::String> SIZE=Nan::New<v8::String>("SIZE").ToLocalChecked();
     v8::Local<v8::Integer> SIZEValue=Nan::New<v8::Integer>(pRspQryTopProcessInfo->SIZE);
     v8::Local<v8::String> RES=Nan::New<v8::String>("RES").ToLocalChecked();
     v8::Local<v8::Integer> RESValue=Nan::New<v8::Integer>(pRspQryTopProcessInfo->RES);
     v8::Local<v8::String> STATE=Nan::New<v8::String>("STATE").ToLocalChecked();
     v8::Local<v8::String> STATEValue=Nan::New(pRspQryTopProcessInfo->STATE).ToLocalChecked();
     v8::Local<v8::String> TIME=Nan::New<v8::String>("TIME").ToLocalChecked();
     v8::Local<v8::String> TIMEValue=Nan::New(pRspQryTopProcessInfo->TIME).ToLocalChecked();
     v8::Local<v8::String> pWCPU=Nan::New<v8::String>("pWCPU").ToLocalChecked();
     v8::Local<v8::Number> pWCPUValue=Nan::New<v8::Number>(pRspQryTopProcessInfo->pWCPU);
     v8::Local<v8::String> pCPU=Nan::New<v8::String>("pCPU").ToLocalChecked();
     v8::Local<v8::Number> pCPUValue=Nan::New<v8::Number>(pRspQryTopProcessInfo->pCPU);
     v8::Local<v8::String> COMMAND=Nan::New<v8::String>("COMMAND").ToLocalChecked();
     v8::Local<v8::String> COMMANDValue=Nan::New(pRspQryTopProcessInfo->COMMAND).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTopProcessInfoJS=Nan::New<v8::Object>();
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(TTY),Local<v8::Value>(TTYValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(PID),Local<v8::Value>(PIDValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(PRI),Local<v8::Value>(PRIValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(NI),Local<v8::Value>(NIValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(SIZE),Local<v8::Value>(SIZEValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(RES),Local<v8::Value>(RESValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(STATE),Local<v8::Value>(STATEValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(TIME),Local<v8::Value>(TIMEValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(pWCPU),Local<v8::Value>(pWCPUValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(pCPU),Local<v8::Value>(pCPUValue));
     pRspQryTopProcessInfoJS->Set(Local<v8::Value>(COMMAND),Local<v8::Value>(COMMANDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTopProcessInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTopProcessInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTopProcessInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTopProcessInfoField *pRtnTopProcessInfo =(CShfeFtdcRtnTopProcessInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnTopProcessInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnTopProcessInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnTopProcessInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRtnTopProcessInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> TTY=Nan::New<v8::String>("TTY").ToLocalChecked();
     v8::Local<v8::String> TTYValue=Nan::New(pRtnTopProcessInfo->TTY).ToLocalChecked();
     v8::Local<v8::String> PID=Nan::New<v8::String>("PID").ToLocalChecked();
     v8::Local<v8::Integer> PIDValue=Nan::New<v8::Integer>(pRtnTopProcessInfo->PID);
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRtnTopProcessInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> PRI=Nan::New<v8::String>("PRI").ToLocalChecked();
     v8::Local<v8::Integer> PRIValue=Nan::New<v8::Integer>(pRtnTopProcessInfo->PRI);
     v8::Local<v8::String> NI=Nan::New<v8::String>("NI").ToLocalChecked();
     v8::Local<v8::Integer> NIValue=Nan::New<v8::Integer>(pRtnTopProcessInfo->NI);
     v8::Local<v8::String> SIZE=Nan::New<v8::String>("SIZE").ToLocalChecked();
     v8::Local<v8::Integer> SIZEValue=Nan::New<v8::Integer>(pRtnTopProcessInfo->SIZE);
     v8::Local<v8::String> RES=Nan::New<v8::String>("RES").ToLocalChecked();
     v8::Local<v8::Integer> RESValue=Nan::New<v8::Integer>(pRtnTopProcessInfo->RES);
     v8::Local<v8::String> STATE=Nan::New<v8::String>("STATE").ToLocalChecked();
     v8::Local<v8::String> STATEValue=Nan::New(pRtnTopProcessInfo->STATE).ToLocalChecked();
     v8::Local<v8::String> TIME=Nan::New<v8::String>("TIME").ToLocalChecked();
     v8::Local<v8::String> TIMEValue=Nan::New(pRtnTopProcessInfo->TIME).ToLocalChecked();
     v8::Local<v8::String> pWCPU=Nan::New<v8::String>("pWCPU").ToLocalChecked();
     v8::Local<v8::Number> pWCPUValue=Nan::New<v8::Number>(pRtnTopProcessInfo->pWCPU);
     v8::Local<v8::String> pCPU=Nan::New<v8::String>("pCPU").ToLocalChecked();
     v8::Local<v8::Number> pCPUValue=Nan::New<v8::Number>(pRtnTopProcessInfo->pCPU);
     v8::Local<v8::String> COMMAND=Nan::New<v8::String>("COMMAND").ToLocalChecked();
     v8::Local<v8::String> COMMANDValue=Nan::New(pRtnTopProcessInfo->COMMAND).ToLocalChecked();

     v8::Local<v8::Object> pRtnTopProcessInfoJS=Nan::New<v8::Object>();
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(TTY),Local<v8::Value>(TTYValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(PID),Local<v8::Value>(PIDValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(PRI),Local<v8::Value>(PRIValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(NI),Local<v8::Value>(NIValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(SIZE),Local<v8::Value>(SIZEValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(RES),Local<v8::Value>(RESValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(STATE),Local<v8::Value>(STATEValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(TIME),Local<v8::Value>(TIMEValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(pWCPU),Local<v8::Value>(pWCPUValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(pCPU),Local<v8::Value>(pCPUValue));
     pRtnTopProcessInfoJS->Set(Local<v8::Value>(COMMAND),Local<v8::Value>(COMMANDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTopProcessInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFileSystemInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileSystemInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFileSystemInfoField *pRspQryFileSystemInfo =(CShfeFtdcRspQryFileSystemInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryFileSystemInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryFileSystemInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryFileSystemInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FILESYSTEM=Nan::New<v8::String>("FILESYSTEM").ToLocalChecked();
     v8::Local<v8::String> FILESYSTEMValue=Nan::New(pRspQryFileSystemInfo->FILESYSTEM).ToLocalChecked();
     v8::Local<v8::String> SIZE=Nan::New<v8::String>("SIZE").ToLocalChecked();
     v8::Local<v8::Integer> SIZEValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->SIZE);
     v8::Local<v8::String> USED=Nan::New<v8::String>("USED").ToLocalChecked();
     v8::Local<v8::Integer> USEDValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->USED);
     v8::Local<v8::String> AVAIL=Nan::New<v8::String>("AVAIL").ToLocalChecked();
     v8::Local<v8::Integer> AVAILValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->AVAIL);
     v8::Local<v8::String> pUSERD=Nan::New<v8::String>("pUSERD").ToLocalChecked();
     v8::Local<v8::Number> pUSERDValue=Nan::New<v8::Number>(pRspQryFileSystemInfo->pUSERD);
     v8::Local<v8::String> ISIZE=Nan::New<v8::String>("ISIZE").ToLocalChecked();
     v8::Local<v8::Integer> ISIZEValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->ISIZE);
     v8::Local<v8::String> IUSED=Nan::New<v8::String>("IUSED").ToLocalChecked();
     v8::Local<v8::Integer> IUSEDValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->IUSED);
     v8::Local<v8::String> IFREE=Nan::New<v8::String>("IFREE").ToLocalChecked();
     v8::Local<v8::Integer> IFREEValue=Nan::New<v8::Integer>(pRspQryFileSystemInfo->IFREE);
     v8::Local<v8::String> pIUSED=Nan::New<v8::String>("pIUSED").ToLocalChecked();
     v8::Local<v8::Number> pIUSEDValue=Nan::New<v8::Number>(pRspQryFileSystemInfo->pIUSED);
     v8::Local<v8::String> MountedOn=Nan::New<v8::String>("MountedOn").ToLocalChecked();
     v8::Local<v8::String> MountedOnValue=Nan::New(pRspQryFileSystemInfo->MountedOn).ToLocalChecked();
     v8::Local<v8::Object> pRspQryFileSystemInfoJS=Nan::New<v8::Object>();
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(FILESYSTEM),Local<v8::Value>(FILESYSTEMValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(SIZE),Local<v8::Value>(SIZEValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(USED),Local<v8::Value>(USEDValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(AVAIL),Local<v8::Value>(AVAILValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(pUSERD),Local<v8::Value>(pUSERDValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(ISIZE),Local<v8::Value>(ISIZEValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(IUSED),Local<v8::Value>(IUSEDValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(IFREE),Local<v8::Value>(IFREEValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(pIUSED),Local<v8::Value>(pIUSEDValue));
     pRspQryFileSystemInfoJS->Set(Local<v8::Value>(MountedOn),Local<v8::Value>(MountedOnValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFileSystemInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFileSystemInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFileSystemInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFileSystemInfoField *pRtnFileSystemInfo =(CShfeFtdcRtnFileSystemInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnFileSystemInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnFileSystemInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnFileSystemInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FILESYSTEM=Nan::New<v8::String>("FILESYSTEM").ToLocalChecked();
     v8::Local<v8::String> FILESYSTEMValue=Nan::New(pRtnFileSystemInfo->FILESYSTEM).ToLocalChecked();
     v8::Local<v8::String> SIZE=Nan::New<v8::String>("SIZE").ToLocalChecked();
     v8::Local<v8::Integer> SIZEValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->SIZE);
     v8::Local<v8::String> USED=Nan::New<v8::String>("USED").ToLocalChecked();
     v8::Local<v8::Integer> USEDValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->USED);
     v8::Local<v8::String> AVAIL=Nan::New<v8::String>("AVAIL").ToLocalChecked();
     v8::Local<v8::Integer> AVAILValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->AVAIL);
     v8::Local<v8::String> pUSERD=Nan::New<v8::String>("pUSERD").ToLocalChecked();
     v8::Local<v8::Number> pUSERDValue=Nan::New<v8::Number>(pRtnFileSystemInfo->pUSERD);
     v8::Local<v8::String> ISIZE=Nan::New<v8::String>("ISIZE").ToLocalChecked();
     v8::Local<v8::Integer> ISIZEValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->ISIZE);
     v8::Local<v8::String> IUSED=Nan::New<v8::String>("IUSED").ToLocalChecked();
     v8::Local<v8::Integer> IUSEDValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->IUSED);
     v8::Local<v8::String> IFREE=Nan::New<v8::String>("IFREE").ToLocalChecked();
     v8::Local<v8::Integer> IFREEValue=Nan::New<v8::Integer>(pRtnFileSystemInfo->IFREE);
     v8::Local<v8::String> pIUSED=Nan::New<v8::String>("pIUSED").ToLocalChecked();
     v8::Local<v8::Number> pIUSEDValue=Nan::New<v8::Number>(pRtnFileSystemInfo->pIUSED);
     v8::Local<v8::String> MountedOn=Nan::New<v8::String>("MountedOn").ToLocalChecked();
     v8::Local<v8::String> MountedOnValue=Nan::New(pRtnFileSystemInfo->MountedOn).ToLocalChecked();

     v8::Local<v8::Object> pRtnFileSystemInfoJS=Nan::New<v8::Object>();
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(FILESYSTEM),Local<v8::Value>(FILESYSTEMValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(SIZE),Local<v8::Value>(SIZEValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(USED),Local<v8::Value>(USEDValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(AVAIL),Local<v8::Value>(AVAILValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(pUSERD),Local<v8::Value>(pUSERDValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(ISIZE),Local<v8::Value>(ISIZEValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(IUSED),Local<v8::Value>(IUSEDValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(IFREE),Local<v8::Value>(IFREEValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(pIUSED),Local<v8::Value>(pIUSEDValue));
     pRtnFileSystemInfoJS->Set(Local<v8::Value>(MountedOn),Local<v8::Value>(MountedOnValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFileSystemInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetworkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetworkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetworkInfoField *pRspQryNetworkInfo =(CShfeFtdcRspQryNetworkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryNetworkInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetworkInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetworkInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> LANNAME=Nan::New<v8::String>("LANNAME").ToLocalChecked();
     v8::Local<v8::String> LANNAMEValue=Nan::New(pRspQryNetworkInfo->LANNAME).ToLocalChecked();
     v8::Local<v8::String> LANSTATUS=Nan::New<v8::String>("LANSTATUS").ToLocalChecked();
     v8::Local<v8::String> LANSTATUSValue=Nan::New(pRspQryNetworkInfo->LANSTATUS).ToLocalChecked();
     v8::Local<v8::String> IPADDRESS=Nan::New<v8::String>("IPADDRESS").ToLocalChecked();
     v8::Local<v8::String> IPADDRESSValue=Nan::New(pRspQryNetworkInfo->IPADDRESS).ToLocalChecked();
     v8::Local<v8::String> RECVBYTES=Nan::New<v8::String>("RECVBYTES").ToLocalChecked();
     v8::Local<v8::Number> RECVBYTESValue=Nan::New<v8::Number>(pRspQryNetworkInfo->RECVBYTES);
     v8::Local<v8::String> RECVPACKETS=Nan::New<v8::String>("RECVPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->RECVPACKETS);
     v8::Local<v8::String> RECVERRORPACKETS=Nan::New<v8::String>("RECVERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVERRORPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->RECVERRORPACKETS);
     v8::Local<v8::String> RECVDROPPACKETS=Nan::New<v8::String>("RECVDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVDROPPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->RECVDROPPACKETS);
     v8::Local<v8::String> SENDBYTES=Nan::New<v8::String>("SENDBYTES").ToLocalChecked();
     v8::Local<v8::Number> SENDBYTESValue=Nan::New<v8::Number>(pRspQryNetworkInfo->SENDBYTES);
     v8::Local<v8::String> SENDPACKETS=Nan::New<v8::String>("SENDPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->SENDPACKETS);
     v8::Local<v8::String> SENDERRORPACKETS=Nan::New<v8::String>("SENDERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDERRORPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->SENDERRORPACKETS);
     v8::Local<v8::String> SENDDROPPACKETS=Nan::New<v8::String>("SENDDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDDROPPACKETSValue=Nan::New<v8::Number>(pRspQryNetworkInfo->SENDDROPPACKETS);
     v8::Local<v8::Object> pRspQryNetworkInfoJS=Nan::New<v8::Object>();
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(LANNAME),Local<v8::Value>(LANNAMEValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(LANSTATUS),Local<v8::Value>(LANSTATUSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(IPADDRESS),Local<v8::Value>(IPADDRESSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(RECVBYTES),Local<v8::Value>(RECVBYTESValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(RECVPACKETS),Local<v8::Value>(RECVPACKETSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(RECVERRORPACKETS),Local<v8::Value>(RECVERRORPACKETSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(RECVDROPPACKETS),Local<v8::Value>(RECVDROPPACKETSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(SENDBYTES),Local<v8::Value>(SENDBYTESValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(SENDPACKETS),Local<v8::Value>(SENDPACKETSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(SENDERRORPACKETS),Local<v8::Value>(SENDERRORPACKETSValue));
     pRspQryNetworkInfoJS->Set(Local<v8::Value>(SENDDROPPACKETS),Local<v8::Value>(SENDDROPPACKETSValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetworkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetworkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetworkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetworkInfoField *pRtnNetworkInfo =(CShfeFtdcRtnNetworkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnNetworkInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetworkInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetworkInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> LANNAME=Nan::New<v8::String>("LANNAME").ToLocalChecked();
     v8::Local<v8::String> LANNAMEValue=Nan::New(pRtnNetworkInfo->LANNAME).ToLocalChecked();
     v8::Local<v8::String> LANSTATUS=Nan::New<v8::String>("LANSTATUS").ToLocalChecked();
     v8::Local<v8::String> LANSTATUSValue=Nan::New(pRtnNetworkInfo->LANSTATUS).ToLocalChecked();
     v8::Local<v8::String> IPADDRESS=Nan::New<v8::String>("IPADDRESS").ToLocalChecked();
     v8::Local<v8::String> IPADDRESSValue=Nan::New(pRtnNetworkInfo->IPADDRESS).ToLocalChecked();
     v8::Local<v8::String> RECVBYTES=Nan::New<v8::String>("RECVBYTES").ToLocalChecked();
     v8::Local<v8::Number> RECVBYTESValue=Nan::New<v8::Number>(pRtnNetworkInfo->RECVBYTES);
     v8::Local<v8::String> RECVPACKETS=Nan::New<v8::String>("RECVPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->RECVPACKETS);
     v8::Local<v8::String> RECVERRORPACKETS=Nan::New<v8::String>("RECVERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVERRORPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->RECVERRORPACKETS);
     v8::Local<v8::String> RECVDROPPACKETS=Nan::New<v8::String>("RECVDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVDROPPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->RECVDROPPACKETS);
     v8::Local<v8::String> SENDBYTES=Nan::New<v8::String>("SENDBYTES").ToLocalChecked();
     v8::Local<v8::Number> SENDBYTESValue=Nan::New<v8::Number>(pRtnNetworkInfo->SENDBYTES);
     v8::Local<v8::String> SENDPACKETS=Nan::New<v8::String>("SENDPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->SENDPACKETS);
     v8::Local<v8::String> SENDERRORPACKETS=Nan::New<v8::String>("SENDERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDERRORPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->SENDERRORPACKETS);
     v8::Local<v8::String> SENDDROPPACKETS=Nan::New<v8::String>("SENDDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDDROPPACKETSValue=Nan::New<v8::Number>(pRtnNetworkInfo->SENDDROPPACKETS);

     v8::Local<v8::Object> pRtnNetworkInfoJS=Nan::New<v8::Object>();
     pRtnNetworkInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(LANNAME),Local<v8::Value>(LANNAMEValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(LANSTATUS),Local<v8::Value>(LANSTATUSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(IPADDRESS),Local<v8::Value>(IPADDRESSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(RECVBYTES),Local<v8::Value>(RECVBYTESValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(RECVPACKETS),Local<v8::Value>(RECVPACKETSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(RECVERRORPACKETS),Local<v8::Value>(RECVERRORPACKETSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(RECVDROPPACKETS),Local<v8::Value>(RECVDROPPACKETSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(SENDBYTES),Local<v8::Value>(SENDBYTESValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(SENDPACKETS),Local<v8::Value>(SENDPACKETSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(SENDERRORPACKETS),Local<v8::Value>(SENDERRORPACKETSValue));
     pRtnNetworkInfoJS->Set(Local<v8::Value>(SENDDROPPACKETS),Local<v8::Value>(SENDDROPPACKETSValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetworkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientLoginTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientLoginTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientLoginField *pRspQryClientLogin =(CShfeFtdcRspQryClientLoginField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRspQryClientLogin->UserName).ToLocalChecked();
     v8::Local<v8::String> Privalage=Nan::New<v8::String>("Privalage").ToLocalChecked();
     v8::Local<v8::String> PrivalageValue=Nan::New(pRspQryClientLogin->Privalage).ToLocalChecked();
     v8::Local<v8::Object> pRspQryClientLoginJS=Nan::New<v8::Object>();
     pRspQryClientLoginJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRspQryClientLoginJS->Set(Local<v8::Value>(Privalage),Local<v8::Value>(PrivalageValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientLoginJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryMonitorObjectTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMonitorObjectTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMonitorObjectField *pRspQryMonitorObject =(CShfeFtdcRspQryMonitorObjectField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryMonitorObject->ObjectID).ToLocalChecked();
     v8::Local<v8::String> ObjectName=Nan::New<v8::String>("ObjectName").ToLocalChecked();
     v8::Local<v8::String> ObjectNameValue=Nan::New(pRspQryMonitorObject->ObjectName).ToLocalChecked();
     v8::Local<v8::String> WarningActive=Nan::New<v8::String>("WarningActive").ToLocalChecked();
     v8::Local<v8::Integer> WarningActiveValue=Nan::New<v8::Integer>(pRspQryMonitorObject->WarningActive);
     v8::Local<v8::Object> pRspQryMonitorObjectJS=Nan::New<v8::Object>();
     pRspQryMonitorObjectJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryMonitorObjectJS->Set(Local<v8::Value>(ObjectName),Local<v8::Value>(ObjectNameValue));
     pRspQryMonitorObjectJS->Set(Local<v8::Value>(WarningActive),Local<v8::Value>(WarningActiveValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMonitorObjectJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMonitorObjectTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMonitorObjectTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMonitorObjectField *pRtnMonitorObject =(CShfeFtdcRtnMonitorObjectField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnMonitorObject->ObjectID).ToLocalChecked();
     v8::Local<v8::String> ObjectName=Nan::New<v8::String>("ObjectName").ToLocalChecked();
     v8::Local<v8::String> ObjectNameValue=Nan::New(pRtnMonitorObject->ObjectName).ToLocalChecked();
     v8::Local<v8::String> WarningActive=Nan::New<v8::String>("WarningActive").ToLocalChecked();
     v8::Local<v8::Integer> WarningActiveValue=Nan::New<v8::Integer>(pRtnMonitorObject->WarningActive);

     v8::Local<v8::Object> pRtnMonitorObjectJS=Nan::New<v8::Object>();
     pRtnMonitorObjectJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnMonitorObjectJS->Set(Local<v8::Value>(ObjectName),Local<v8::Value>(ObjectNameValue));
     pRtnMonitorObjectJS->Set(Local<v8::Value>(WarningActive),Local<v8::Value>(WarningActiveValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMonitorObjectJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryObjectRationalTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryObjectRationalTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryObjectRationalField *pRspQryObjectRational =(CShfeFtdcRspQryObjectRationalField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryObjectRational->ObjectID).ToLocalChecked();
     v8::Local<v8::String> HostObjectID=Nan::New<v8::String>("HostObjectID").ToLocalChecked();
     v8::Local<v8::String> HostObjectIDValue=Nan::New(pRspQryObjectRational->HostObjectID).ToLocalChecked();
     v8::Local<v8::Object> pRspQryObjectRationalJS=Nan::New<v8::Object>();
     pRspQryObjectRationalJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryObjectRationalJS->Set(Local<v8::Value>(HostObjectID),Local<v8::Value>(HostObjectIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryObjectRationalJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnObjectRationalTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnObjectRationalTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnObjectRationalField *pRtnObjectRational =(CShfeFtdcRtnObjectRationalField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnObjectRational->ObjectID).ToLocalChecked();
     v8::Local<v8::String> HostObjectID=Nan::New<v8::String>("HostObjectID").ToLocalChecked();
     v8::Local<v8::String> HostObjectIDValue=Nan::New(pRtnObjectRational->HostObjectID).ToLocalChecked();

     v8::Local<v8::Object> pRtnObjectRationalJS=Nan::New<v8::Object>();
     pRtnObjectRationalJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnObjectRationalJS->Set(Local<v8::Value>(HostObjectID),Local<v8::Value>(HostObjectIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnObjectRationalJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySyslogInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySyslogInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySyslogInfoField *pRspQrySyslogInfo =(CShfeFtdcRspQrySyslogInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQrySyslogInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQrySyslogInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQrySyslogInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQrySyslogInfo->AttrType).ToLocalChecked();
     v8::Local<v8::String> ContLen=Nan::New<v8::String>("ContLen").ToLocalChecked();
     v8::Local<v8::Integer> ContLenValue=Nan::New<v8::Integer>(pRspQrySyslogInfo->ContLen);
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRspQrySyslogInfo->FileContent).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySyslogInfoJS=Nan::New<v8::Object>();
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(ContLen),Local<v8::Value>(ContLenValue));
     pRspQrySyslogInfoJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySyslogInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSyslogInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSyslogInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSyslogInfoField *pRtnSyslogInfo =(CShfeFtdcRtnSyslogInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnSyslogInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnSyslogInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnSyslogInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnSyslogInfo->AttrType).ToLocalChecked();
     v8::Local<v8::String> ContLen=Nan::New<v8::String>("ContLen").ToLocalChecked();
     v8::Local<v8::Integer> ContLenValue=Nan::New<v8::Integer>(pRtnSyslogInfo->ContLen);
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRtnSyslogInfo->FileContent).ToLocalChecked();

     v8::Local<v8::Object> pRtnSyslogInfoJS=Nan::New<v8::Object>();
     pRtnSyslogInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnSyslogInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnSyslogInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnSyslogInfoJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnSyslogInfoJS->Set(Local<v8::Value>(ContLen),Local<v8::Value>(ContLenValue));
     pRtnSyslogInfoJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSyslogInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySubscriberTopic(uv_async_t *handle)
{
    std::cout<<"\n********** CFunc::OnRspQrySubscriberTopic: START ********"<<std::endl;
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySubscriberTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySubscriberField *pRspQrySubscriber =(CShfeFtdcRspQrySubscriberField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
     v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspQrySubscriber->ErrorID);
     v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
     v8::Local<v8::String> ErrorMsgValue=Nan::New(pRspQrySubscriber->ErrorMsg).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQrySubscriber->ObjectID).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySubscriberJS=Nan::New<v8::Object>();
     pRspQrySubscriberJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
     pRspQrySubscriberJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsgValue));
     pRspQrySubscriberJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySubscriberJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
   std::cout<<"********** CFunc::OnRspQrySubscriberTopic: END! ********\n"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
    
        
}
void OnRspQryOidRelationTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryOidRelationTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryOidRelationField *pRspQryOidRelation =(CShfeFtdcRspQryOidRelationField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryOidRelation->ObjectID).ToLocalChecked();
     v8::Local<v8::String> HoldObjectID=Nan::New<v8::String>("HoldObjectID").ToLocalChecked();
     v8::Local<v8::String> HoldObjectIDValue=Nan::New(pRspQryOidRelation->HoldObjectID).ToLocalChecked();
     v8::Local<v8::Object> pRspQryOidRelationJS=Nan::New<v8::Object>();
     pRspQryOidRelationJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryOidRelationJS->Set(Local<v8::Value>(HoldObjectID),Local<v8::Value>(HoldObjectIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryOidRelationJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnOidRelationTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnOidRelationTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnOidRelationField *pRtnOidRelation =(CShfeFtdcRtnOidRelationField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnOidRelation->ObjectID).ToLocalChecked();
     v8::Local<v8::String> HoldObjectID=Nan::New<v8::String>("HoldObjectID").ToLocalChecked();
     v8::Local<v8::String> HoldObjectIDValue=Nan::New(pRtnOidRelation->HoldObjectID).ToLocalChecked();

     v8::Local<v8::Object> pRtnOidRelationJS=Nan::New<v8::Object>();
     pRtnOidRelationJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnOidRelationJS->Set(Local<v8::Value>(HoldObjectID),Local<v8::Value>(HoldObjectIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnOidRelationJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryUserInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryUserInfoField *pRspQryUserInfo =(CShfeFtdcRspQryUserInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRspQryUserInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> USERID=Nan::New<v8::String>("USERID").ToLocalChecked();
     v8::Local<v8::Integer> USERIDValue=Nan::New<v8::Integer>(pRspQryUserInfo->USERID);
     v8::Local<v8::String> GROUPNAME=Nan::New<v8::String>("GROUPNAME").ToLocalChecked();
     v8::Local<v8::String> GROUPNAMEValue=Nan::New(pRspQryUserInfo->GROUPNAME).ToLocalChecked();
     v8::Local<v8::String> GROUPID=Nan::New<v8::String>("GROUPID").ToLocalChecked();
     v8::Local<v8::Integer> GROUPIDValue=Nan::New<v8::Integer>(pRspQryUserInfo->GROUPID);
     v8::Local<v8::String> HOMEPATH=Nan::New<v8::String>("HOMEPATH").ToLocalChecked();
     v8::Local<v8::String> HOMEPATHValue=Nan::New(pRspQryUserInfo->HOMEPATH).ToLocalChecked();
     v8::Local<v8::String> SHELL=Nan::New<v8::String>("SHELL").ToLocalChecked();
     v8::Local<v8::String> SHELLValue=Nan::New(pRspQryUserInfo->SHELL).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryUserInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryUserInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryUserInfo->MonDate).ToLocalChecked();
     v8::Local<v8::Object> pRspQryUserInfoJS=Nan::New<v8::Object>();
     pRspQryUserInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(USERID),Local<v8::Value>(USERIDValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(GROUPNAME),Local<v8::Value>(GROUPNAMEValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(GROUPID),Local<v8::Value>(GROUPIDValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(HOMEPATH),Local<v8::Value>(HOMEPATHValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(SHELL),Local<v8::Value>(SHELLValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryUserInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryUserInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnUserInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnUserInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnUserInfoField *pRtnUserInfo =(CShfeFtdcRtnUserInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRtnUserInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> USERID=Nan::New<v8::String>("USERID").ToLocalChecked();
     v8::Local<v8::Integer> USERIDValue=Nan::New<v8::Integer>(pRtnUserInfo->USERID);
     v8::Local<v8::String> GROUPNAME=Nan::New<v8::String>("GROUPNAME").ToLocalChecked();
     v8::Local<v8::String> GROUPNAMEValue=Nan::New(pRtnUserInfo->GROUPNAME).ToLocalChecked();
     v8::Local<v8::String> GROUPID=Nan::New<v8::String>("GROUPID").ToLocalChecked();
     v8::Local<v8::Integer> GROUPIDValue=Nan::New<v8::Integer>(pRtnUserInfo->GROUPID);
     v8::Local<v8::String> HOMEPATH=Nan::New<v8::String>("HOMEPATH").ToLocalChecked();
     v8::Local<v8::String> HOMEPATHValue=Nan::New(pRtnUserInfo->HOMEPATH).ToLocalChecked();
     v8::Local<v8::String> SHELL=Nan::New<v8::String>("SHELL").ToLocalChecked();
     v8::Local<v8::String> SHELLValue=Nan::New(pRtnUserInfo->SHELL).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnUserInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnUserInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnUserInfo->MonDate).ToLocalChecked();

     v8::Local<v8::Object> pRtnUserInfoJS=Nan::New<v8::Object>();
     pRtnUserInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(USERID),Local<v8::Value>(USERIDValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(GROUPNAME),Local<v8::Value>(GROUPNAMEValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(GROUPID),Local<v8::Value>(GROUPIDValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(HOMEPATH),Local<v8::Value>(HOMEPATHValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(SHELL),Local<v8::Value>(SHELLValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnUserInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnUserInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryOnlineUserInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryOnlineUserInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryOnlineUserInfoField *pRspQryOnlineUserInfo =(CShfeFtdcRspQryOnlineUserInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRspQryOnlineUserInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> TIME=Nan::New<v8::String>("TIME").ToLocalChecked();
     v8::Local<v8::String> TIMEValue=Nan::New(pRspQryOnlineUserInfo->TIME).ToLocalChecked();
     v8::Local<v8::String> TTY=Nan::New<v8::String>("TTY").ToLocalChecked();
     v8::Local<v8::String> TTYValue=Nan::New(pRspQryOnlineUserInfo->TTY).ToLocalChecked();
     v8::Local<v8::String> IP=Nan::New<v8::String>("IP").ToLocalChecked();
     v8::Local<v8::String> IPValue=Nan::New(pRspQryOnlineUserInfo->IP).ToLocalChecked();
     v8::Local<v8::String> CONNECTIME=Nan::New<v8::String>("CONNECTIME").ToLocalChecked();
     v8::Local<v8::String> CONNECTIMEValue=Nan::New(pRspQryOnlineUserInfo->CONNECTIME).ToLocalChecked();
     v8::Local<v8::String> PID=Nan::New<v8::String>("PID").ToLocalChecked();
     v8::Local<v8::Integer> PIDValue=Nan::New<v8::Integer>(pRspQryOnlineUserInfo->PID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryOnlineUserInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryOnlineUserInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryOnlineUserInfo->MonDate).ToLocalChecked();
     v8::Local<v8::Object> pRspQryOnlineUserInfoJS=Nan::New<v8::Object>();
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(TIME),Local<v8::Value>(TIMEValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(TTY),Local<v8::Value>(TTYValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(IP),Local<v8::Value>(IPValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(CONNECTIME),Local<v8::Value>(CONNECTIMEValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(PID),Local<v8::Value>(PIDValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryOnlineUserInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryOnlineUserInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnOnlineUserInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnOnlineUserInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnOnlineUserInfoField *pRtnOnlineUserInfo =(CShfeFtdcRtnOnlineUserInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRtnOnlineUserInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> TIME=Nan::New<v8::String>("TIME").ToLocalChecked();
     v8::Local<v8::String> TIMEValue=Nan::New(pRtnOnlineUserInfo->TIME).ToLocalChecked();
     v8::Local<v8::String> TTY=Nan::New<v8::String>("TTY").ToLocalChecked();
     v8::Local<v8::String> TTYValue=Nan::New(pRtnOnlineUserInfo->TTY).ToLocalChecked();
     v8::Local<v8::String> IP=Nan::New<v8::String>("IP").ToLocalChecked();
     v8::Local<v8::String> IPValue=Nan::New(pRtnOnlineUserInfo->IP).ToLocalChecked();
     v8::Local<v8::String> CONNECTIME=Nan::New<v8::String>("CONNECTIME").ToLocalChecked();
     v8::Local<v8::String> CONNECTIMEValue=Nan::New(pRtnOnlineUserInfo->CONNECTIME).ToLocalChecked();
     v8::Local<v8::String> PID=Nan::New<v8::String>("PID").ToLocalChecked();
     v8::Local<v8::Integer> PIDValue=Nan::New<v8::Integer>(pRtnOnlineUserInfo->PID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnOnlineUserInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnOnlineUserInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnOnlineUserInfo->MonDate).ToLocalChecked();

     v8::Local<v8::Object> pRtnOnlineUserInfoJS=Nan::New<v8::Object>();
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(TIME),Local<v8::Value>(TIMEValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(TTY),Local<v8::Value>(TTYValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(IP),Local<v8::Value>(IPValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(CONNECTIME),Local<v8::Value>(CONNECTIMEValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(PID),Local<v8::Value>(PIDValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnOnlineUserInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnOnlineUserInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryWarningEventTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryWarningEventTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryWarningEventField *pRspQryWarningEvent =(CShfeFtdcRspQryWarningEventField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
    //   std::cout<<"nRequestID: "<<nRequestID<<std::endl;
    //   std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryWarningEvent->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryWarningEvent->MonTime).ToLocalChecked();
     v8::Local<v8::String> OccurDate=Nan::New<v8::String>("OccurDate").ToLocalChecked();
     v8::Local<v8::String> OccurDateValue=Nan::New(pRspQryWarningEvent->OccurDate).ToLocalChecked();
     v8::Local<v8::String> OccurTime=Nan::New<v8::String>("OccurTime").ToLocalChecked();
     v8::Local<v8::String> OccurTimeValue=Nan::New(pRspQryWarningEvent->OccurTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRspQryWarningEvent->EvendID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryWarningEvent->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryWarningEvent->IPAddress).ToLocalChecked();
     v8::Local<v8::String> EventName=Nan::New<v8::String>("EventName").ToLocalChecked();
     v8::Local<v8::String> EventNameValue=Nan::New(pRspQryWarningEvent->EventName).ToLocalChecked();
     v8::Local<v8::String> EventNum=Nan::New<v8::String>("EventNum").ToLocalChecked();
     v8::Local<v8::Integer> EventNumValue=Nan::New<v8::Integer>(pRspQryWarningEvent->EventNum);
     v8::Local<v8::String> EventType=Nan::New<v8::String>("EventType").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeValue=Nan::New<v8::Integer>(pRspQryWarningEvent->EventType);
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRspQryWarningEvent->EventDes).ToLocalChecked();
     v8::Local<v8::String> ProcessFlag=Nan::New<v8::String>("ProcessFlag").ToLocalChecked();
     v8::Local<v8::String> ProcessFlagValue=Nan::New(pRspQryWarningEvent->ProcessFlag).ToLocalChecked();
     v8::Local<v8::String> WarningLevel=Nan::New<v8::String>("WarningLevel").ToLocalChecked();
     v8::Local<v8::String> WarningLevelValue=Nan::New(pRspQryWarningEvent->WarningLevel).ToLocalChecked();
     v8::Local<v8::String> EventDealDes=Nan::New<v8::String>("EventDealDes").ToLocalChecked();
     v8::Local<v8::String> EventDealDesValue=Nan::New(pRspQryWarningEvent->EventDealDes).ToLocalChecked();
     v8::Local<v8::String> FullEventName=Nan::New<v8::String>("FullEventName").ToLocalChecked();
     v8::Local<v8::String> FullEventNameValue=Nan::New(pRspQryWarningEvent->FullEventName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryWarningEventJS=Nan::New<v8::Object>();
     pRspQryWarningEventJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(OccurDate),Local<v8::Value>(OccurDateValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(OccurTime),Local<v8::Value>(OccurTimeValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EventName),Local<v8::Value>(EventNameValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EventNum),Local<v8::Value>(EventNumValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EventType),Local<v8::Value>(EventTypeValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(ProcessFlag),Local<v8::Value>(ProcessFlagValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(WarningLevel),Local<v8::Value>(WarningLevelValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(EventDealDes),Local<v8::Value>(EventDealDesValue));
     pRspQryWarningEventJS->Set(Local<v8::Value>(FullEventName),Local<v8::Value>(FullEventNameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryWarningEventJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnWarningEventTopic(uv_async_t *handle)
{
    std::cout <<"\n**************** SpiCFunc::OnRtnWarningEventTopic: START ****************" << std::endl;
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnWarningEventTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnWarningEventField *pRtnWarningEvent =(CShfeFtdcRtnWarningEventField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnWarningEvent->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnWarningEvent->MonTime).ToLocalChecked();
     v8::Local<v8::String> OccurDate=Nan::New<v8::String>("OccurDate").ToLocalChecked();
     v8::Local<v8::String> OccurDateValue=Nan::New(pRtnWarningEvent->OccurDate).ToLocalChecked();
     v8::Local<v8::String> OccurTime=Nan::New<v8::String>("OccurTime").ToLocalChecked();
     v8::Local<v8::String> OccurTimeValue=Nan::New(pRtnWarningEvent->OccurTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRtnWarningEvent->EvendID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnWarningEvent->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRtnWarningEvent->IPAddress).ToLocalChecked();
     v8::Local<v8::String> EventName=Nan::New<v8::String>("EventName").ToLocalChecked();
     v8::Local<v8::String> EventNameValue=Nan::New(pRtnWarningEvent->EventName).ToLocalChecked();
     v8::Local<v8::String> EventNum=Nan::New<v8::String>("EventNum").ToLocalChecked();
     v8::Local<v8::Integer> EventNumValue=Nan::New<v8::Integer>(pRtnWarningEvent->EventNum);
     v8::Local<v8::String> EventType=Nan::New<v8::String>("EventType").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeValue=Nan::New<v8::Integer>(pRtnWarningEvent->EventType);
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRtnWarningEvent->EventDes).ToLocalChecked();
     v8::Local<v8::String> ProcessFlag=Nan::New<v8::String>("ProcessFlag").ToLocalChecked();
     v8::Local<v8::String> ProcessFlagValue=Nan::New(pRtnWarningEvent->ProcessFlag).ToLocalChecked();
     v8::Local<v8::String> WarningLevel=Nan::New<v8::String>("WarningLevel").ToLocalChecked();
     v8::Local<v8::String> WarningLevelValue=Nan::New(pRtnWarningEvent->WarningLevel).ToLocalChecked();
     v8::Local<v8::String> EventDealDes=Nan::New<v8::String>("EventDealDes").ToLocalChecked();
     v8::Local<v8::String> EventDealDesValue=Nan::New(pRtnWarningEvent->EventDealDes).ToLocalChecked();
     v8::Local<v8::String> FullEventName=Nan::New<v8::String>("FullEventName").ToLocalChecked();
     v8::Local<v8::String> FullEventNameValue=Nan::New(pRtnWarningEvent->FullEventName).ToLocalChecked();
     v8::Local<v8::String> EventCount=Nan::New<v8::String>("EventCount").ToLocalChecked();
     v8::Local<v8::Integer> EventCountValue=Nan::New<v8::Integer>(pRtnWarningEvent->EventCount);

     v8::Local<v8::Object> pRtnWarningEventJS=Nan::New<v8::Object>();
     pRtnWarningEventJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(OccurDate),Local<v8::Value>(OccurDateValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(OccurTime),Local<v8::Value>(OccurTimeValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventName),Local<v8::Value>(EventNameValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventNum),Local<v8::Value>(EventNumValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventType),Local<v8::Value>(EventTypeValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(ProcessFlag),Local<v8::Value>(ProcessFlagValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(WarningLevel),Local<v8::Value>(WarningLevelValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventDealDes),Local<v8::Value>(EventDealDesValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(FullEventName),Local<v8::Value>(FullEventNameValue));
     pRtnWarningEventJS->Set(Local<v8::Value>(EventCount),Local<v8::Value>(EventCountValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnWarningEventJS);

     callback.Call(1, param);
     }
     std::cout <<"**************** SpiCFunc::OnRtnWarningEventTopic: END ****************\n" << std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryCPUUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryCPUUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryCPUUsageField *pRspQryCPUUsage =(CShfeFtdcRspQryCPUUsageField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryCPUUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryCPUUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryCPUUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPUUsage=Nan::New<v8::String>("CPUUsage").ToLocalChecked();
     v8::Local<v8::Number> CPUUsageValue=Nan::New<v8::Number>(pRspQryCPUUsage->CPUUsage);
     v8::Local<v8::Object> pRspQryCPUUsageJS=Nan::New<v8::Object>();
     pRspQryCPUUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryCPUUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryCPUUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryCPUUsageJS->Set(Local<v8::Value>(CPUUsage),Local<v8::Value>(CPUUsageValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryCPUUsageJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnCPUUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnCPUUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnCPUUsageField *pRtnCPUUsage =(CShfeFtdcRtnCPUUsageField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnCPUUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnCPUUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnCPUUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPUUsage=Nan::New<v8::String>("CPUUsage").ToLocalChecked();
     v8::Local<v8::Number> CPUUsageValue=Nan::New<v8::Number>(pRtnCPUUsage->CPUUsage);

     v8::Local<v8::Object> pRtnCPUUsageJS=Nan::New<v8::Object>();
     pRtnCPUUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnCPUUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnCPUUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnCPUUsageJS->Set(Local<v8::Value>(CPUUsage),Local<v8::Value>(CPUUsageValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnCPUUsageJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryMemoryUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemoryUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMemoryUsageField *pRspQryMemoryUsage =(CShfeFtdcRspQryMemoryUsageField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryMemoryUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryMemoryUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryMemoryUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> MemoryUsage=Nan::New<v8::String>("MemoryUsage").ToLocalChecked();
     v8::Local<v8::Number> MemoryUsageValue=Nan::New<v8::Number>(pRspQryMemoryUsage->MemoryUsage);
     v8::Local<v8::Object> pRspQryMemoryUsageJS=Nan::New<v8::Object>();
     pRspQryMemoryUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryMemoryUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryMemoryUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryMemoryUsageJS->Set(Local<v8::Value>(MemoryUsage),Local<v8::Value>(MemoryUsageValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMemoryUsageJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMemoryUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMemoryUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMemoryUsageField *pRtnMemoryUsage =(CShfeFtdcRtnMemoryUsageField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnMemoryUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnMemoryUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnMemoryUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> MemoryUsage=Nan::New<v8::String>("MemoryUsage").ToLocalChecked();
     v8::Local<v8::Number> MemoryUsageValue=Nan::New<v8::Number>(pRtnMemoryUsage->MemoryUsage);

     v8::Local<v8::Object> pRtnMemoryUsageJS=Nan::New<v8::Object>();
     pRtnMemoryUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnMemoryUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnMemoryUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnMemoryUsageJS->Set(Local<v8::Value>(MemoryUsage),Local<v8::Value>(MemoryUsageValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMemoryUsageJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryDiskUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryDiskUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryDiskUsageField *pRspQryDiskUsage =(CShfeFtdcRspQryDiskUsageField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryDiskUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryDiskUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryDiskUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> DiskUsage=Nan::New<v8::String>("DiskUsage").ToLocalChecked();
     v8::Local<v8::Number> DiskUsageValue=Nan::New<v8::Number>(pRspQryDiskUsage->DiskUsage);
     v8::Local<v8::Object> pRspQryDiskUsageJS=Nan::New<v8::Object>();
     pRspQryDiskUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryDiskUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryDiskUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryDiskUsageJS->Set(Local<v8::Value>(DiskUsage),Local<v8::Value>(DiskUsageValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryDiskUsageJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnDiskUsageTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnDiskUsageTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnDiskUsageField *pRtnDiskUsage =(CShfeFtdcRtnDiskUsageField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnDiskUsage->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnDiskUsage->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnDiskUsage->MonTime).ToLocalChecked();
     v8::Local<v8::String> DiskUsage=Nan::New<v8::String>("DiskUsage").ToLocalChecked();
     v8::Local<v8::Number> DiskUsageValue=Nan::New<v8::Number>(pRtnDiskUsage->DiskUsage);

     v8::Local<v8::Object> pRtnDiskUsageJS=Nan::New<v8::Object>();
     pRtnDiskUsageJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnDiskUsageJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnDiskUsageJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnDiskUsageJS->Set(Local<v8::Value>(DiskUsage),Local<v8::Value>(DiskUsageValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnDiskUsageJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryObjectAttrField *pRspQryObjectAttr =(CShfeFtdcRspQryObjectAttrField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryObjectAttr->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryObjectAttr->MonTime).ToLocalChecked();
     v8::Local<v8::String> ValueType=Nan::New<v8::String>("ValueType").ToLocalChecked();
     v8::Local<v8::Integer> ValueTypeValue=Nan::New<v8::Integer>(pRspQryObjectAttr->ValueType);
     v8::Local<v8::String> AttrValue=Nan::New<v8::String>("AttrValue").ToLocalChecked();
     v8::Local<v8::String> AttrValueValue=Nan::New(pRspQryObjectAttr->AttrValue).ToLocalChecked();
     v8::Local<v8::Object> pRspQryObjectAttrJS=Nan::New<v8::Object>();
     pRspQryObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryObjectAttrJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryObjectAttrJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryObjectAttrJS->Set(Local<v8::Value>(ValueType),Local<v8::Value>(ValueTypeValue));
     pRspQryObjectAttrJS->Set(Local<v8::Value>(AttrValue),Local<v8::Value>(AttrValueValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryObjectAttrJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnObjectAttrField *pRtnObjectAttr =(CShfeFtdcRtnObjectAttrField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnObjectAttr->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnObjectAttr->MonTime).ToLocalChecked();
     v8::Local<v8::String> ValueType=Nan::New<v8::String>("ValueType").ToLocalChecked();
     v8::Local<v8::Integer> ValueTypeValue=Nan::New<v8::Integer>(pRtnObjectAttr->ValueType);
     v8::Local<v8::String> AttrValue=Nan::New<v8::String>("AttrValue").ToLocalChecked();
     v8::Local<v8::String> AttrValueValue=Nan::New(pRtnObjectAttr->AttrValue).ToLocalChecked();

     v8::Local<v8::Object> pRtnObjectAttrJS=Nan::New<v8::Object>();
     pRtnObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnObjectAttrJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnObjectAttrJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnObjectAttrJS->Set(Local<v8::Value>(ValueType),Local<v8::Value>(ValueTypeValue));
     pRtnObjectAttrJS->Set(Local<v8::Value>(AttrValue),Local<v8::Value>(AttrValueValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnObjectAttrJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryInvalidateOrderTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryInvalidateOrderTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryInvalidateOrderField *pRspQryInvalidateOrder =(CShfeFtdcRspQryInvalidateOrderField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRspQryInvalidateOrder->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> OrderLocalID=Nan::New<v8::String>("OrderLocalID").ToLocalChecked();
     v8::Local<v8::String> OrderLocalIDValue=Nan::New(pRspQryInvalidateOrder->OrderLocalID).ToLocalChecked();
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryInvalidateOrder->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryInvalidateOrder->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
     v8::Local<v8::String> ErrorMsgValue=Nan::New(pRspQryInvalidateOrder->ErrorMsg).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryInvalidateOrder->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryInvalidateOrder->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryInvalidateOrder->ClientID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryInvalidateOrder->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Direction=Nan::New<v8::String>("Direction").ToLocalChecked();
     v8::Local<v8::Integer> DirectionValue=Nan::New<v8::Integer>(pRspQryInvalidateOrder->Direction);
     v8::Local<v8::String> CombOffsetFlag=Nan::New<v8::String>("CombOffsetFlag").ToLocalChecked();
     v8::Local<v8::String> CombOffsetFlagValue=Nan::New(pRspQryInvalidateOrder->CombOffsetFlag).ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlag=Nan::New<v8::String>("CombHedgeFlag").ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlagValue=Nan::New(pRspQryInvalidateOrder->CombHedgeFlag).ToLocalChecked();
     v8::Local<v8::String> LimitPrice=Nan::New<v8::String>("LimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LimitPriceValue=Nan::New<v8::Number>(pRspQryInvalidateOrder->LimitPrice);
     v8::Local<v8::String> VolumeTotalOriginal=Nan::New<v8::String>("VolumeTotalOriginal").ToLocalChecked();
     v8::Local<v8::Integer> VolumeTotalOriginalValue=Nan::New<v8::Integer>(pRspQryInvalidateOrder->VolumeTotalOriginal);
     v8::Local<v8::String> TimeCondition=Nan::New<v8::String>("TimeCondition").ToLocalChecked();
     v8::Local<v8::Integer> TimeConditionValue=Nan::New<v8::Integer>(pRspQryInvalidateOrder->TimeCondition);
     v8::Local<v8::String> VolumeCondition=Nan::New<v8::String>("VolumeCondition").ToLocalChecked();
     v8::Local<v8::Integer> VolumeConditionValue=Nan::New<v8::Integer>(pRspQryInvalidateOrder->VolumeCondition);
     v8::Local<v8::String> MinVolume=Nan::New<v8::String>("MinVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinVolumeValue=Nan::New<v8::Integer>(pRspQryInvalidateOrder->MinVolume);
     v8::Local<v8::Object> pRspQryInvalidateOrderJS=Nan::New<v8::Object>();
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(OrderLocalID),Local<v8::Value>(OrderLocalIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsgValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(Direction),Local<v8::Value>(DirectionValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(CombOffsetFlag),Local<v8::Value>(CombOffsetFlagValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(CombHedgeFlag),Local<v8::Value>(CombHedgeFlagValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(LimitPrice),Local<v8::Value>(LimitPriceValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(VolumeTotalOriginal),Local<v8::Value>(VolumeTotalOriginalValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(TimeCondition),Local<v8::Value>(TimeConditionValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(VolumeCondition),Local<v8::Value>(VolumeConditionValue));
     pRspQryInvalidateOrderJS->Set(Local<v8::Value>(MinVolume),Local<v8::Value>(MinVolumeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryInvalidateOrderJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnInvalidateOrderTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnInvalidateOrderTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnInvalidateOrderField *pRtnInvalidateOrder =(CShfeFtdcRtnInvalidateOrderField *)(paramArrayNew[0]);

     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRtnInvalidateOrder->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> OrderLocalID=Nan::New<v8::String>("OrderLocalID").ToLocalChecked();
     v8::Local<v8::String> OrderLocalIDValue=Nan::New(pRtnInvalidateOrder->OrderLocalID).ToLocalChecked();
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnInvalidateOrder->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnInvalidateOrder->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
     v8::Local<v8::String> ErrorMsgValue=Nan::New(pRtnInvalidateOrder->ErrorMsg).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnInvalidateOrder->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnInvalidateOrder->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnInvalidateOrder->ClientID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnInvalidateOrder->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Direction=Nan::New<v8::String>("Direction").ToLocalChecked();
     v8::Local<v8::Integer> DirectionValue=Nan::New<v8::Integer>(pRtnInvalidateOrder->Direction);
     v8::Local<v8::String> CombOffsetFlag=Nan::New<v8::String>("CombOffsetFlag").ToLocalChecked();
     v8::Local<v8::String> CombOffsetFlagValue=Nan::New(pRtnInvalidateOrder->CombOffsetFlag).ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlag=Nan::New<v8::String>("CombHedgeFlag").ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlagValue=Nan::New(pRtnInvalidateOrder->CombHedgeFlag).ToLocalChecked();
     v8::Local<v8::String> LimitPrice=Nan::New<v8::String>("LimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LimitPriceValue=Nan::New<v8::Number>(pRtnInvalidateOrder->LimitPrice);
     v8::Local<v8::String> VolumeTotalOriginal=Nan::New<v8::String>("VolumeTotalOriginal").ToLocalChecked();
     v8::Local<v8::Integer> VolumeTotalOriginalValue=Nan::New<v8::Integer>(pRtnInvalidateOrder->VolumeTotalOriginal);
     v8::Local<v8::String> TimeCondition=Nan::New<v8::String>("TimeCondition").ToLocalChecked();
     v8::Local<v8::Integer> TimeConditionValue=Nan::New<v8::Integer>(pRtnInvalidateOrder->TimeCondition);
     v8::Local<v8::String> VolumeCondition=Nan::New<v8::String>("VolumeCondition").ToLocalChecked();
     v8::Local<v8::Integer> VolumeConditionValue=Nan::New<v8::Integer>(pRtnInvalidateOrder->VolumeCondition);
     v8::Local<v8::String> MinVolume=Nan::New<v8::String>("MinVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinVolumeValue=Nan::New<v8::Integer>(pRtnInvalidateOrder->MinVolume);

     v8::Local<v8::Object> pRtnInvalidateOrderJS=Nan::New<v8::Object>();
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(OrderLocalID),Local<v8::Value>(OrderLocalIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsgValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(Direction),Local<v8::Value>(DirectionValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(CombOffsetFlag),Local<v8::Value>(CombOffsetFlagValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(CombHedgeFlag),Local<v8::Value>(CombHedgeFlagValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(LimitPrice),Local<v8::Value>(LimitPriceValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(VolumeTotalOriginal),Local<v8::Value>(VolumeTotalOriginalValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(TimeCondition),Local<v8::Value>(TimeConditionValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(VolumeCondition),Local<v8::Value>(VolumeConditionValue));
     pRtnInvalidateOrderJS->Set(Local<v8::Value>(MinVolume),Local<v8::Value>(MinVolumeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnInvalidateOrderJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryOrderStatusTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryOrderStatusTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryOrderStatusField *pRspQryOrderStatus =(CShfeFtdcRspQryOrderStatusField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryOrderStatus->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryOrderStatus->ActionTime).ToLocalChecked();
     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRspQryOrderStatus->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> OrderLocalID=Nan::New<v8::String>("OrderLocalID").ToLocalChecked();
     v8::Local<v8::String> OrderLocalIDValue=Nan::New(pRspQryOrderStatus->OrderLocalID).ToLocalChecked();
     v8::Local<v8::String> InsertDate=Nan::New<v8::String>("InsertDate").ToLocalChecked();
     v8::Local<v8::String> InsertDateValue=Nan::New(pRspQryOrderStatus->InsertDate).ToLocalChecked();
     v8::Local<v8::String> InsertTime=Nan::New<v8::String>("InsertTime").ToLocalChecked();
     v8::Local<v8::String> InsertTimeValue=Nan::New(pRspQryOrderStatus->InsertTime).ToLocalChecked();
     v8::Local<v8::String> OrderStatus=Nan::New<v8::String>("OrderStatus").ToLocalChecked();
     v8::Local<v8::Integer> OrderStatusValue=Nan::New<v8::Integer>(pRspQryOrderStatus->OrderStatus);
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryOrderStatus->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryOrderStatus->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryOrderStatus->ClientID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryOrderStatus->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Direction=Nan::New<v8::String>("Direction").ToLocalChecked();
     v8::Local<v8::Integer> DirectionValue=Nan::New<v8::Integer>(pRspQryOrderStatus->Direction);
     v8::Local<v8::String> CombOffsetFlag=Nan::New<v8::String>("CombOffsetFlag").ToLocalChecked();
     v8::Local<v8::String> CombOffsetFlagValue=Nan::New(pRspQryOrderStatus->CombOffsetFlag).ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlag=Nan::New<v8::String>("CombHedgeFlag").ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlagValue=Nan::New(pRspQryOrderStatus->CombHedgeFlag).ToLocalChecked();
     v8::Local<v8::String> LimitPrice=Nan::New<v8::String>("LimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LimitPriceValue=Nan::New<v8::Number>(pRspQryOrderStatus->LimitPrice);
     v8::Local<v8::String> VolumeTotalOriginal=Nan::New<v8::String>("VolumeTotalOriginal").ToLocalChecked();
     v8::Local<v8::Integer> VolumeTotalOriginalValue=Nan::New<v8::Integer>(pRspQryOrderStatus->VolumeTotalOriginal);
     v8::Local<v8::String> TimeCondition=Nan::New<v8::String>("TimeCondition").ToLocalChecked();
     v8::Local<v8::Integer> TimeConditionValue=Nan::New<v8::Integer>(pRspQryOrderStatus->TimeCondition);
     v8::Local<v8::String> VolumeCondition=Nan::New<v8::String>("VolumeCondition").ToLocalChecked();
     v8::Local<v8::Integer> VolumeConditionValue=Nan::New<v8::Integer>(pRspQryOrderStatus->VolumeCondition);
     v8::Local<v8::String> MinVolume=Nan::New<v8::String>("MinVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinVolumeValue=Nan::New<v8::Integer>(pRspQryOrderStatus->MinVolume);
     v8::Local<v8::Object> pRspQryOrderStatusJS=Nan::New<v8::Object>();
     pRspQryOrderStatusJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(OrderLocalID),Local<v8::Value>(OrderLocalIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(InsertDate),Local<v8::Value>(InsertDateValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(InsertTime),Local<v8::Value>(InsertTimeValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(OrderStatus),Local<v8::Value>(OrderStatusValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(Direction),Local<v8::Value>(DirectionValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(CombOffsetFlag),Local<v8::Value>(CombOffsetFlagValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(CombHedgeFlag),Local<v8::Value>(CombHedgeFlagValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(LimitPrice),Local<v8::Value>(LimitPriceValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(VolumeTotalOriginal),Local<v8::Value>(VolumeTotalOriginalValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(TimeCondition),Local<v8::Value>(TimeConditionValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(VolumeCondition),Local<v8::Value>(VolumeConditionValue));
     pRspQryOrderStatusJS->Set(Local<v8::Value>(MinVolume),Local<v8::Value>(MinVolumeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryOrderStatusJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnOrderStatusTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnOrderStatusTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnOrderStatusField *pRtnOrderStatus =(CShfeFtdcRtnOrderStatusField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnOrderStatus->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnOrderStatus->ActionTime).ToLocalChecked();
     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRtnOrderStatus->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> OrderLocalID=Nan::New<v8::String>("OrderLocalID").ToLocalChecked();
     v8::Local<v8::String> OrderLocalIDValue=Nan::New(pRtnOrderStatus->OrderLocalID).ToLocalChecked();
     v8::Local<v8::String> InsertDate=Nan::New<v8::String>("InsertDate").ToLocalChecked();
     v8::Local<v8::String> InsertDateValue=Nan::New(pRtnOrderStatus->InsertDate).ToLocalChecked();
     v8::Local<v8::String> InsertTime=Nan::New<v8::String>("InsertTime").ToLocalChecked();
     v8::Local<v8::String> InsertTimeValue=Nan::New(pRtnOrderStatus->InsertTime).ToLocalChecked();
     v8::Local<v8::String> OrderStatus=Nan::New<v8::String>("OrderStatus").ToLocalChecked();
     v8::Local<v8::Integer> OrderStatusValue=Nan::New<v8::Integer>(pRtnOrderStatus->OrderStatus);
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnOrderStatus->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnOrderStatus->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnOrderStatus->ClientID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnOrderStatus->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Direction=Nan::New<v8::String>("Direction").ToLocalChecked();
     v8::Local<v8::Integer> DirectionValue=Nan::New<v8::Integer>(pRtnOrderStatus->Direction);
     v8::Local<v8::String> CombOffsetFlag=Nan::New<v8::String>("CombOffsetFlag").ToLocalChecked();
     v8::Local<v8::String> CombOffsetFlagValue=Nan::New(pRtnOrderStatus->CombOffsetFlag).ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlag=Nan::New<v8::String>("CombHedgeFlag").ToLocalChecked();
     v8::Local<v8::String> CombHedgeFlagValue=Nan::New(pRtnOrderStatus->CombHedgeFlag).ToLocalChecked();
     v8::Local<v8::String> LimitPrice=Nan::New<v8::String>("LimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LimitPriceValue=Nan::New<v8::Number>(pRtnOrderStatus->LimitPrice);
     v8::Local<v8::String> VolumeTotalOriginal=Nan::New<v8::String>("VolumeTotalOriginal").ToLocalChecked();
     v8::Local<v8::Integer> VolumeTotalOriginalValue=Nan::New<v8::Integer>(pRtnOrderStatus->VolumeTotalOriginal);
     v8::Local<v8::String> TimeCondition=Nan::New<v8::String>("TimeCondition").ToLocalChecked();
     v8::Local<v8::Integer> TimeConditionValue=Nan::New<v8::Integer>(pRtnOrderStatus->TimeCondition);
     v8::Local<v8::String> VolumeCondition=Nan::New<v8::String>("VolumeCondition").ToLocalChecked();
     v8::Local<v8::Integer> VolumeConditionValue=Nan::New<v8::Integer>(pRtnOrderStatus->VolumeCondition);
     v8::Local<v8::String> MinVolume=Nan::New<v8::String>("MinVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinVolumeValue=Nan::New<v8::Integer>(pRtnOrderStatus->MinVolume);

     v8::Local<v8::Object> pRtnOrderStatusJS=Nan::New<v8::Object>();
     pRtnOrderStatusJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(OrderLocalID),Local<v8::Value>(OrderLocalIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(InsertDate),Local<v8::Value>(InsertDateValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(InsertTime),Local<v8::Value>(InsertTimeValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(OrderStatus),Local<v8::Value>(OrderStatusValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(Direction),Local<v8::Value>(DirectionValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(CombOffsetFlag),Local<v8::Value>(CombOffsetFlagValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(CombHedgeFlag),Local<v8::Value>(CombHedgeFlagValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(LimitPrice),Local<v8::Value>(LimitPriceValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(VolumeTotalOriginal),Local<v8::Value>(VolumeTotalOriginalValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(TimeCondition),Local<v8::Value>(TimeConditionValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(VolumeCondition),Local<v8::Value>(VolumeConditionValue));
     pRtnOrderStatusJS->Set(Local<v8::Value>(MinVolume),Local<v8::Value>(MinVolumeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnOrderStatusJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryBargainOrderTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryBargainOrderTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryBargainOrderField *pRspQryBargainOrder =(CShfeFtdcRspQryBargainOrderField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryBargainOrder->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryBargainOrder->ActionTime).ToLocalChecked();
     v8::Local<v8::String> TradeID=Nan::New<v8::String>("TradeID").ToLocalChecked();
     v8::Local<v8::String> TradeIDValue=Nan::New(pRspQryBargainOrder->TradeID).ToLocalChecked();
     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRspQryBargainOrder->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryBargainOrder->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Price=Nan::New<v8::String>("Price").ToLocalChecked();
     v8::Local<v8::Number> PriceValue=Nan::New<v8::Number>(pRspQryBargainOrder->Price);
     v8::Local<v8::String> Volume=Nan::New<v8::String>("Volume").ToLocalChecked();
     v8::Local<v8::Integer> VolumeValue=Nan::New<v8::Integer>(pRspQryBargainOrder->Volume);
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryBargainOrder->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryBargainOrder->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryBargainOrder->ClientID).ToLocalChecked();
     v8::Local<v8::Object> pRspQryBargainOrderJS=Nan::New<v8::Object>();
     pRspQryBargainOrderJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(TradeID),Local<v8::Value>(TradeIDValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(Price),Local<v8::Value>(PriceValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(Volume),Local<v8::Value>(VolumeValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryBargainOrderJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryBargainOrderJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnBargainOrderTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnBargainOrderTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnBargainOrderField *pRtnBargainOrder =(CShfeFtdcRtnBargainOrderField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnBargainOrder->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnBargainOrder->ActionTime).ToLocalChecked();
     v8::Local<v8::String> TradeID=Nan::New<v8::String>("TradeID").ToLocalChecked();
     v8::Local<v8::String> TradeIDValue=Nan::New(pRtnBargainOrder->TradeID).ToLocalChecked();
     v8::Local<v8::String> OrderSysID=Nan::New<v8::String>("OrderSysID").ToLocalChecked();
     v8::Local<v8::String> OrderSysIDValue=Nan::New(pRtnBargainOrder->OrderSysID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnBargainOrder->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> Price=Nan::New<v8::String>("Price").ToLocalChecked();
     v8::Local<v8::Number> PriceValue=Nan::New<v8::Number>(pRtnBargainOrder->Price);
     v8::Local<v8::String> Volume=Nan::New<v8::String>("Volume").ToLocalChecked();
     v8::Local<v8::Integer> VolumeValue=Nan::New<v8::Integer>(pRtnBargainOrder->Volume);
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnBargainOrder->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnBargainOrder->UserID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnBargainOrder->ClientID).ToLocalChecked();

     v8::Local<v8::Object> pRtnBargainOrderJS=Nan::New<v8::Object>();
     pRtnBargainOrderJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(TradeID),Local<v8::Value>(TradeIDValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(OrderSysID),Local<v8::Value>(OrderSysIDValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(Price),Local<v8::Value>(PriceValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(Volume),Local<v8::Value>(VolumeValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnBargainOrderJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnBargainOrderJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryInstPropertyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryInstPropertyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryInstPropertyField *pRspQryInstProperty =(CShfeFtdcRspQryInstPropertyField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryInstProperty->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryInstProperty->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryInstProperty->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRspQryInstProperty->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> UnderlyingInstrID=Nan::New<v8::String>("UnderlyingInstrID").ToLocalChecked();
     v8::Local<v8::String> UnderlyingInstrIDValue=Nan::New(pRspQryInstProperty->UnderlyingInstrID).ToLocalChecked();
     v8::Local<v8::String> ProductClass=Nan::New<v8::String>("ProductClass").ToLocalChecked();
     v8::Local<v8::Integer> ProductClassValue=Nan::New<v8::Integer>(pRspQryInstProperty->ProductClass);
     v8::Local<v8::String> PositionType=Nan::New<v8::String>("PositionType").ToLocalChecked();
     v8::Local<v8::Integer> PositionTypeValue=Nan::New<v8::Integer>(pRspQryInstProperty->PositionType);
     v8::Local<v8::String> VolumeMultiple=Nan::New<v8::String>("VolumeMultiple").ToLocalChecked();
     v8::Local<v8::Integer> VolumeMultipleValue=Nan::New<v8::Integer>(pRspQryInstProperty->VolumeMultiple);
     v8::Local<v8::String> UnderlyingMultiple=Nan::New<v8::String>("UnderlyingMultiple").ToLocalChecked();
     v8::Local<v8::Number> UnderlyingMultipleValue=Nan::New<v8::Number>(pRspQryInstProperty->UnderlyingMultiple);
     v8::Local<v8::String> InstLifePhase=Nan::New<v8::String>("InstLifePhase").ToLocalChecked();
     v8::Local<v8::Integer> InstLifePhaseValue=Nan::New<v8::Integer>(pRspQryInstProperty->InstLifePhase);
     v8::Local<v8::String> OpenDate=Nan::New<v8::String>("OpenDate").ToLocalChecked();
     v8::Local<v8::String> OpenDateValue=Nan::New(pRspQryInstProperty->OpenDate).ToLocalChecked();
     v8::Local<v8::String> ExpireDate=Nan::New<v8::String>("ExpireDate").ToLocalChecked();
     v8::Local<v8::String> ExpireDateValue=Nan::New(pRspQryInstProperty->ExpireDate).ToLocalChecked();
     v8::Local<v8::String> StartDelivDate=Nan::New<v8::String>("StartDelivDate").ToLocalChecked();
     v8::Local<v8::String> StartDelivDateValue=Nan::New(pRspQryInstProperty->StartDelivDate).ToLocalChecked();
     v8::Local<v8::String> EndDelivDate=Nan::New<v8::String>("EndDelivDate").ToLocalChecked();
     v8::Local<v8::String> EndDelivDateValue=Nan::New(pRspQryInstProperty->EndDelivDate).ToLocalChecked();
     v8::Local<v8::String> BasisPrice=Nan::New<v8::String>("BasisPrice").ToLocalChecked();
     v8::Local<v8::Number> BasisPriceValue=Nan::New<v8::Number>(pRspQryInstProperty->BasisPrice);
     v8::Local<v8::String> MaxMarketOrderVolume=Nan::New<v8::String>("MaxMarketOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MaxMarketOrderVolumeValue=Nan::New<v8::Integer>(pRspQryInstProperty->MaxMarketOrderVolume);
     v8::Local<v8::String> MinMarketOrderVolume=Nan::New<v8::String>("MinMarketOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinMarketOrderVolumeValue=Nan::New<v8::Integer>(pRspQryInstProperty->MinMarketOrderVolume);
     v8::Local<v8::String> MaxLimitOrderVolume=Nan::New<v8::String>("MaxLimitOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MaxLimitOrderVolumeValue=Nan::New<v8::Integer>(pRspQryInstProperty->MaxLimitOrderVolume);
     v8::Local<v8::String> MinLimitOrderVolume=Nan::New<v8::String>("MinLimitOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinLimitOrderVolumeValue=Nan::New<v8::Integer>(pRspQryInstProperty->MinLimitOrderVolume);
     v8::Local<v8::String> PriceTick=Nan::New<v8::String>("PriceTick").ToLocalChecked();
     v8::Local<v8::Number> PriceTickValue=Nan::New<v8::Number>(pRspQryInstProperty->PriceTick);
     v8::Local<v8::String> AllowDelivPersonOpen=Nan::New<v8::String>("AllowDelivPersonOpen").ToLocalChecked();
     v8::Local<v8::Integer> AllowDelivPersonOpenValue=Nan::New<v8::Integer>(pRspQryInstProperty->AllowDelivPersonOpen);
     v8::Local<v8::Object> pRspQryInstPropertyJS=Nan::New<v8::Object>();
     pRspQryInstPropertyJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(UnderlyingInstrID),Local<v8::Value>(UnderlyingInstrIDValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(ProductClass),Local<v8::Value>(ProductClassValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(PositionType),Local<v8::Value>(PositionTypeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(VolumeMultiple),Local<v8::Value>(VolumeMultipleValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(UnderlyingMultiple),Local<v8::Value>(UnderlyingMultipleValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(InstLifePhase),Local<v8::Value>(InstLifePhaseValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(OpenDate),Local<v8::Value>(OpenDateValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(ExpireDate),Local<v8::Value>(ExpireDateValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(StartDelivDate),Local<v8::Value>(StartDelivDateValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(EndDelivDate),Local<v8::Value>(EndDelivDateValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(BasisPrice),Local<v8::Value>(BasisPriceValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(MaxMarketOrderVolume),Local<v8::Value>(MaxMarketOrderVolumeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(MinMarketOrderVolume),Local<v8::Value>(MinMarketOrderVolumeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(MaxLimitOrderVolume),Local<v8::Value>(MaxLimitOrderVolumeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(MinLimitOrderVolume),Local<v8::Value>(MinLimitOrderVolumeValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(PriceTick),Local<v8::Value>(PriceTickValue));
     pRspQryInstPropertyJS->Set(Local<v8::Value>(AllowDelivPersonOpen),Local<v8::Value>(AllowDelivPersonOpenValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryInstPropertyJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnInstPropertyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnInstPropertyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnInstPropertyField *pRtnInstProperty =(CShfeFtdcRtnInstPropertyField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnInstProperty->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnInstProperty->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnInstProperty->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRtnInstProperty->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> UnderlyingInstrID=Nan::New<v8::String>("UnderlyingInstrID").ToLocalChecked();
     v8::Local<v8::String> UnderlyingInstrIDValue=Nan::New(pRtnInstProperty->UnderlyingInstrID).ToLocalChecked();
     v8::Local<v8::String> ProductClass=Nan::New<v8::String>("ProductClass").ToLocalChecked();
     v8::Local<v8::Integer> ProductClassValue=Nan::New<v8::Integer>(pRtnInstProperty->ProductClass);
     v8::Local<v8::String> PositionType=Nan::New<v8::String>("PositionType").ToLocalChecked();
     v8::Local<v8::Integer> PositionTypeValue=Nan::New<v8::Integer>(pRtnInstProperty->PositionType);
     v8::Local<v8::String> VolumeMultiple=Nan::New<v8::String>("VolumeMultiple").ToLocalChecked();
     v8::Local<v8::Integer> VolumeMultipleValue=Nan::New<v8::Integer>(pRtnInstProperty->VolumeMultiple);
     v8::Local<v8::String> UnderlyingMultiple=Nan::New<v8::String>("UnderlyingMultiple").ToLocalChecked();
     v8::Local<v8::Number> UnderlyingMultipleValue=Nan::New<v8::Number>(pRtnInstProperty->UnderlyingMultiple);
     v8::Local<v8::String> InstLifePhase=Nan::New<v8::String>("InstLifePhase").ToLocalChecked();
     v8::Local<v8::Integer> InstLifePhaseValue=Nan::New<v8::Integer>(pRtnInstProperty->InstLifePhase);
     v8::Local<v8::String> OpenDate=Nan::New<v8::String>("OpenDate").ToLocalChecked();
     v8::Local<v8::String> OpenDateValue=Nan::New(pRtnInstProperty->OpenDate).ToLocalChecked();
     v8::Local<v8::String> ExpireDate=Nan::New<v8::String>("ExpireDate").ToLocalChecked();
     v8::Local<v8::String> ExpireDateValue=Nan::New(pRtnInstProperty->ExpireDate).ToLocalChecked();
     v8::Local<v8::String> StartDelivDate=Nan::New<v8::String>("StartDelivDate").ToLocalChecked();
     v8::Local<v8::String> StartDelivDateValue=Nan::New(pRtnInstProperty->StartDelivDate).ToLocalChecked();
     v8::Local<v8::String> EndDelivDate=Nan::New<v8::String>("EndDelivDate").ToLocalChecked();
     v8::Local<v8::String> EndDelivDateValue=Nan::New(pRtnInstProperty->EndDelivDate).ToLocalChecked();
     v8::Local<v8::String> BasisPrice=Nan::New<v8::String>("BasisPrice").ToLocalChecked();
     v8::Local<v8::Number> BasisPriceValue=Nan::New<v8::Number>(pRtnInstProperty->BasisPrice);
     v8::Local<v8::String> MaxMarketOrderVolume=Nan::New<v8::String>("MaxMarketOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MaxMarketOrderVolumeValue=Nan::New<v8::Integer>(pRtnInstProperty->MaxMarketOrderVolume);
     v8::Local<v8::String> MinMarketOrderVolume=Nan::New<v8::String>("MinMarketOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinMarketOrderVolumeValue=Nan::New<v8::Integer>(pRtnInstProperty->MinMarketOrderVolume);
     v8::Local<v8::String> MaxLimitOrderVolume=Nan::New<v8::String>("MaxLimitOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MaxLimitOrderVolumeValue=Nan::New<v8::Integer>(pRtnInstProperty->MaxLimitOrderVolume);
     v8::Local<v8::String> MinLimitOrderVolume=Nan::New<v8::String>("MinLimitOrderVolume").ToLocalChecked();
     v8::Local<v8::Integer> MinLimitOrderVolumeValue=Nan::New<v8::Integer>(pRtnInstProperty->MinLimitOrderVolume);
     v8::Local<v8::String> PriceTick=Nan::New<v8::String>("PriceTick").ToLocalChecked();
     v8::Local<v8::Number> PriceTickValue=Nan::New<v8::Number>(pRtnInstProperty->PriceTick);
     v8::Local<v8::String> AllowDelivPersonOpen=Nan::New<v8::String>("AllowDelivPersonOpen").ToLocalChecked();
     v8::Local<v8::Integer> AllowDelivPersonOpenValue=Nan::New<v8::Integer>(pRtnInstProperty->AllowDelivPersonOpen);

     v8::Local<v8::Object> pRtnInstPropertyJS=Nan::New<v8::Object>();
     pRtnInstPropertyJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(UnderlyingInstrID),Local<v8::Value>(UnderlyingInstrIDValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(ProductClass),Local<v8::Value>(ProductClassValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(PositionType),Local<v8::Value>(PositionTypeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(VolumeMultiple),Local<v8::Value>(VolumeMultipleValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(UnderlyingMultiple),Local<v8::Value>(UnderlyingMultipleValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(InstLifePhase),Local<v8::Value>(InstLifePhaseValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(OpenDate),Local<v8::Value>(OpenDateValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(ExpireDate),Local<v8::Value>(ExpireDateValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(StartDelivDate),Local<v8::Value>(StartDelivDateValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(EndDelivDate),Local<v8::Value>(EndDelivDateValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(BasisPrice),Local<v8::Value>(BasisPriceValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(MaxMarketOrderVolume),Local<v8::Value>(MaxMarketOrderVolumeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(MinMarketOrderVolume),Local<v8::Value>(MinMarketOrderVolumeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(MaxLimitOrderVolume),Local<v8::Value>(MaxLimitOrderVolumeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(MinLimitOrderVolume),Local<v8::Value>(MinLimitOrderVolumeValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(PriceTick),Local<v8::Value>(PriceTickValue));
     pRtnInstPropertyJS->Set(Local<v8::Value>(AllowDelivPersonOpen),Local<v8::Value>(AllowDelivPersonOpenValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnInstPropertyJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryMarginRateTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMarginRateTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMarginRateField *pRspQryMarginRate =(CShfeFtdcRspQryMarginRateField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryMarginRate->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryMarginRate->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryMarginRate->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryMarginRate->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryMarginRate->TradingRole);
     v8::Local<v8::String> HedgeFlag=Nan::New<v8::String>("HedgeFlag").ToLocalChecked();
     v8::Local<v8::Integer> HedgeFlagValue=Nan::New<v8::Integer>(pRspQryMarginRate->HedgeFlag);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryMarginRate->ValueMode);
     v8::Local<v8::String> LongMarginRatio=Nan::New<v8::String>("LongMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> LongMarginRatioValue=Nan::New<v8::Number>(pRspQryMarginRate->LongMarginRatio);
     v8::Local<v8::String> ShortMarginRatio=Nan::New<v8::String>("ShortMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> ShortMarginRatioValue=Nan::New<v8::Number>(pRspQryMarginRate->ShortMarginRatio);
     v8::Local<v8::Object> pRspQryMarginRateJS=Nan::New<v8::Object>();
     pRspQryMarginRateJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(HedgeFlag),Local<v8::Value>(HedgeFlagValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(LongMarginRatio),Local<v8::Value>(LongMarginRatioValue));
     pRspQryMarginRateJS->Set(Local<v8::Value>(ShortMarginRatio),Local<v8::Value>(ShortMarginRatioValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMarginRateJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMarginRateTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMarginRateTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMarginRateField *pRtnMarginRate =(CShfeFtdcRtnMarginRateField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnMarginRate->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnMarginRate->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnMarginRate->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnMarginRate->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnMarginRate->TradingRole);
     v8::Local<v8::String> HedgeFlag=Nan::New<v8::String>("HedgeFlag").ToLocalChecked();
     v8::Local<v8::Integer> HedgeFlagValue=Nan::New<v8::Integer>(pRtnMarginRate->HedgeFlag);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnMarginRate->ValueMode);
     v8::Local<v8::String> LongMarginRatio=Nan::New<v8::String>("LongMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> LongMarginRatioValue=Nan::New<v8::Number>(pRtnMarginRate->LongMarginRatio);
     v8::Local<v8::String> ShortMarginRatio=Nan::New<v8::String>("ShortMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> ShortMarginRatioValue=Nan::New<v8::Number>(pRtnMarginRate->ShortMarginRatio);

     v8::Local<v8::Object> pRtnMarginRateJS=Nan::New<v8::Object>();
     pRtnMarginRateJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(HedgeFlag),Local<v8::Value>(HedgeFlagValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(LongMarginRatio),Local<v8::Value>(LongMarginRatioValue));
     pRtnMarginRateJS->Set(Local<v8::Value>(ShortMarginRatio),Local<v8::Value>(ShortMarginRatioValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMarginRateJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPriceLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPriceLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPriceLimitField *pRspQryPriceLimit =(CShfeFtdcRspQryPriceLimitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryPriceLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryPriceLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryPriceLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryPriceLimit->ValueMode);
     v8::Local<v8::String> RoundingMode=Nan::New<v8::String>("RoundingMode").ToLocalChecked();
     v8::Local<v8::Integer> RoundingModeValue=Nan::New<v8::Integer>(pRspQryPriceLimit->RoundingMode);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRspQryPriceLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRspQryPriceLimit->LowerLimitPrice);
     v8::Local<v8::Object> pRspQryPriceLimitJS=Nan::New<v8::Object>();
     pRspQryPriceLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(RoundingMode),Local<v8::Value>(RoundingModeValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRspQryPriceLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPriceLimitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPriceLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPriceLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPriceLimitField *pRtnPriceLimit =(CShfeFtdcRtnPriceLimitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnPriceLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnPriceLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnPriceLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnPriceLimit->ValueMode);
     v8::Local<v8::String> RoundingMode=Nan::New<v8::String>("RoundingMode").ToLocalChecked();
     v8::Local<v8::Integer> RoundingModeValue=Nan::New<v8::Integer>(pRtnPriceLimit->RoundingMode);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRtnPriceLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRtnPriceLimit->LowerLimitPrice);

     v8::Local<v8::Object> pRtnPriceLimitJS=Nan::New<v8::Object>();
     pRtnPriceLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(RoundingMode),Local<v8::Value>(RoundingModeValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRtnPriceLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPriceLimitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPartPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPartPosiLimitField *pRspQryPartPosiLimit =(CShfeFtdcRspQryPartPosiLimitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryPartPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryPartPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryPartPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryPartPosiLimit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryPartPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQryPartPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryPartPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQryPartPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQryPartPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRspQryPartPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRspQryPartPosiLimit->LowerLimitPrice);
     v8::Local<v8::Object> pRspQryPartPosiLimitJS=Nan::New<v8::Object>();
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRspQryPartPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPartPosiLimitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPartPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPartPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPartPosiLimitField *pRtnPartPosiLimit =(CShfeFtdcRtnPartPosiLimitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnPartPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnPartPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnPartPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnPartPosiLimit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnPartPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnPartPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnPartPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnPartPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnPartPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRtnPartPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRtnPartPosiLimit->LowerLimitPrice);

     v8::Local<v8::Object> pRtnPartPosiLimitJS=Nan::New<v8::Object>();
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRtnPartPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPartPosiLimitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientPosiLimitField *pRspQryClientPosiLimit =(CShfeFtdcRspQryClientPosiLimitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryClientPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryClientPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryClientPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRspQryClientPosiLimit->ClientType);
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryClientPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQryClientPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryClientPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQryClientPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQryClientPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRspQryClientPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRspQryClientPosiLimit->LowerLimitPrice);
     v8::Local<v8::Object> pRspQryClientPosiLimitJS=Nan::New<v8::Object>();
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRspQryClientPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientPosiLimitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnClientPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnClientPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnClientPosiLimitField *pRtnClientPosiLimit =(CShfeFtdcRtnClientPosiLimitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnClientPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnClientPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnClientPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRtnClientPosiLimit->ClientType);
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnClientPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnClientPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnClientPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnClientPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnClientPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRtnClientPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRtnClientPosiLimit->LowerLimitPrice);

     v8::Local<v8::Object> pRtnClientPosiLimitJS=Nan::New<v8::Object>();
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRtnClientPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnClientPosiLimitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySpecialPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySpecialPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySpecialPosiLimitField *pRspQrySpecialPosiLimit =(CShfeFtdcRspQrySpecialPosiLimitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQrySpecialPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQrySpecialPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQrySpecialPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQrySpecialPosiLimit->ClientID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQrySpecialPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQrySpecialPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQrySpecialPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQrySpecialPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQrySpecialPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRspQrySpecialPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRspQrySpecialPosiLimit->LowerLimitPrice);
     v8::Local<v8::Object> pRspQrySpecialPosiLimitJS=Nan::New<v8::Object>();
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRspQrySpecialPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySpecialPosiLimitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSpecialPosiLimitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSpecialPosiLimitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSpecialPosiLimitField *pRtnSpecialPosiLimit =(CShfeFtdcRtnSpecialPosiLimitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnSpecialPosiLimit->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnSpecialPosiLimit->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnSpecialPosiLimit->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnSpecialPosiLimit->ClientID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnSpecialPosiLimit->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnSpecialPosiLimit->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnSpecialPosiLimit->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnSpecialPosiLimit->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnSpecialPosiLimit->ShortPosLimit);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRtnSpecialPosiLimit->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRtnSpecialPosiLimit->LowerLimitPrice);

     v8::Local<v8::Object> pRtnSpecialPosiLimitJS=Nan::New<v8::Object>();
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRtnSpecialPosiLimitJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSpecialPosiLimitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTransactionChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTransactionChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTransactionChgField *pRspQryTransactionChg =(CShfeFtdcRspQryTransactionChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryTransactionChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryTransactionChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> BillSN=Nan::New<v8::String>("BillSN").ToLocalChecked();
     v8::Local<v8::Integer> BillSNValue=Nan::New<v8::Integer>(pRspQryTransactionChg->BillSN);
     v8::Local<v8::String> ParticipantAccount=Nan::New<v8::String>("ParticipantAccount").ToLocalChecked();
     v8::Local<v8::String> ParticipantAccountValue=Nan::New(pRspQryTransactionChg->ParticipantAccount).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryTransactionChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> Amount=Nan::New<v8::String>("Amount").ToLocalChecked();
     v8::Local<v8::Number> AmountValue=Nan::New<v8::Number>(pRspQryTransactionChg->Amount);
     v8::Local<v8::Object> pRspQryTransactionChgJS=Nan::New<v8::Object>();
     pRspQryTransactionChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryTransactionChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryTransactionChgJS->Set(Local<v8::Value>(BillSN),Local<v8::Value>(BillSNValue));
     pRspQryTransactionChgJS->Set(Local<v8::Value>(ParticipantAccount),Local<v8::Value>(ParticipantAccountValue));
     pRspQryTransactionChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryTransactionChgJS->Set(Local<v8::Value>(Amount),Local<v8::Value>(AmountValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTransactionChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTransactionChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTransactionChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTransactionChgField *pRtnTransactionChg =(CShfeFtdcRtnTransactionChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnTransactionChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnTransactionChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> BillSN=Nan::New<v8::String>("BillSN").ToLocalChecked();
     v8::Local<v8::Integer> BillSNValue=Nan::New<v8::Integer>(pRtnTransactionChg->BillSN);
     v8::Local<v8::String> ParticipantAccount=Nan::New<v8::String>("ParticipantAccount").ToLocalChecked();
     v8::Local<v8::String> ParticipantAccountValue=Nan::New(pRtnTransactionChg->ParticipantAccount).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnTransactionChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> Amount=Nan::New<v8::String>("Amount").ToLocalChecked();
     v8::Local<v8::Number> AmountValue=Nan::New<v8::Number>(pRtnTransactionChg->Amount);

     v8::Local<v8::Object> pRtnTransactionChgJS=Nan::New<v8::Object>();
     pRtnTransactionChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnTransactionChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnTransactionChgJS->Set(Local<v8::Value>(BillSN),Local<v8::Value>(BillSNValue));
     pRtnTransactionChgJS->Set(Local<v8::Value>(ParticipantAccount),Local<v8::Value>(ParticipantAccountValue));
     pRtnTransactionChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnTransactionChgJS->Set(Local<v8::Value>(Amount),Local<v8::Value>(AmountValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTransactionChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientChgField *pRspQryClientChg =(CShfeFtdcRspQryClientChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryClientChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryClientChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryClientChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRspQryClientChg->ClientName).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRspQryClientChg->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryClientChg->IsActive);
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRspQryClientChg->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRspQryClientChg->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryClientChg->OperationType);
     v8::Local<v8::Object> pRspQryClientChgJS=Nan::New<v8::Object>();
     pRspQryClientChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRspQryClientChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnClientChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnClientChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnClientChgField *pRtnClientChg =(CShfeFtdcRtnClientChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnClientChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnClientChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnClientChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRtnClientChg->ClientName).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRtnClientChg->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnClientChg->IsActive);
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRtnClientChg->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRtnClientChg->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnClientChg->OperationType);

     v8::Local<v8::Object> pRtnClientChgJS=Nan::New<v8::Object>();
     pRtnClientChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnClientChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnClientChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnClientChgJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRtnClientChgJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRtnClientChgJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnClientChgJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRtnClientChgJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRtnClientChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnClientChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPartClientChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartClientChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPartClientChgField *pRspQryPartClientChg =(CShfeFtdcRspQryPartClientChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryPartClientChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryPartClientChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryPartClientChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryPartClientChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryPartClientChg->OperationType);
     v8::Local<v8::Object> pRspQryPartClientChgJS=Nan::New<v8::Object>();
     pRspQryPartClientChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryPartClientChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryPartClientChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryPartClientChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryPartClientChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPartClientChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPartClientChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPartClientChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPartClientChgField *pRtnPartClientChg =(CShfeFtdcRtnPartClientChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnPartClientChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnPartClientChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnPartClientChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnPartClientChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnPartClientChg->OperationType);

     v8::Local<v8::Object> pRtnPartClientChgJS=Nan::New<v8::Object>();
     pRtnPartClientChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnPartClientChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnPartClientChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnPartClientChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnPartClientChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPartClientChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPosiLimitChgField *pRspQryPosiLimitChg =(CShfeFtdcRspQryPosiLimitChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryPosiLimitChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQryPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQryPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQryPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryPosiLimitChg->OperationType);
     v8::Local<v8::Object> pRspQryPosiLimitChgJS=Nan::New<v8::Object>();
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQryPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPosiLimitChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPosiLimitChgField *pRtnPosiLimitChg =(CShfeFtdcRtnPosiLimitChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnPosiLimitChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnPosiLimitChg->OperationType);

     v8::Local<v8::Object> pRtnPosiLimitChgJS=Nan::New<v8::Object>();
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPosiLimitChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryHedgeDetailChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHedgeDetailChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHedgeDetailChgField *pRspQryHedgeDetailChg =(CShfeFtdcRspQryHedgeDetailChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryHedgeDetailChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryHedgeDetailChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryHedgeDetailChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryHedgeDetailChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> OperatorID=Nan::New<v8::String>("OperatorID").ToLocalChecked();
     v8::Local<v8::String> OperatorIDValue=Nan::New(pRspQryHedgeDetailChg->OperatorID).ToLocalChecked();
     v8::Local<v8::String> Time=Nan::New<v8::String>("Time").ToLocalChecked();
     v8::Local<v8::String> TimeValue=Nan::New(pRspQryHedgeDetailChg->Time).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryHedgeDetailChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> PosiDirection=Nan::New<v8::String>("PosiDirection").ToLocalChecked();
     v8::Local<v8::Integer> PosiDirectionValue=Nan::New<v8::Integer>(pRspQryHedgeDetailChg->PosiDirection);
     v8::Local<v8::String> TradingVolume=Nan::New<v8::String>("TradingVolume").ToLocalChecked();
     v8::Local<v8::Integer> TradingVolumeValue=Nan::New<v8::Integer>(pRspQryHedgeDetailChg->TradingVolume);
     v8::Local<v8::String> HedgeQuota=Nan::New<v8::String>("HedgeQuota").ToLocalChecked();
     v8::Local<v8::Integer> HedgeQuotaValue=Nan::New<v8::Integer>(pRspQryHedgeDetailChg->HedgeQuota);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryHedgeDetailChg->OperationType);
     v8::Local<v8::Object> pRspQryHedgeDetailChgJS=Nan::New<v8::Object>();
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(OperatorID),Local<v8::Value>(OperatorIDValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(Time),Local<v8::Value>(TimeValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(PosiDirection),Local<v8::Value>(PosiDirectionValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(TradingVolume),Local<v8::Value>(TradingVolumeValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(HedgeQuota),Local<v8::Value>(HedgeQuotaValue));
     pRspQryHedgeDetailChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHedgeDetailChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnHedgeDetailChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnHedgeDetailChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnHedgeDetailChgField *pRtnHedgeDetailChg =(CShfeFtdcRtnHedgeDetailChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnHedgeDetailChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnHedgeDetailChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnHedgeDetailChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnHedgeDetailChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> OperatorID=Nan::New<v8::String>("OperatorID").ToLocalChecked();
     v8::Local<v8::String> OperatorIDValue=Nan::New(pRtnHedgeDetailChg->OperatorID).ToLocalChecked();
     v8::Local<v8::String> Time=Nan::New<v8::String>("Time").ToLocalChecked();
     v8::Local<v8::String> TimeValue=Nan::New(pRtnHedgeDetailChg->Time).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnHedgeDetailChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> PosiDirection=Nan::New<v8::String>("PosiDirection").ToLocalChecked();
     v8::Local<v8::Integer> PosiDirectionValue=Nan::New<v8::Integer>(pRtnHedgeDetailChg->PosiDirection);
     v8::Local<v8::String> TradingVolume=Nan::New<v8::String>("TradingVolume").ToLocalChecked();
     v8::Local<v8::Integer> TradingVolumeValue=Nan::New<v8::Integer>(pRtnHedgeDetailChg->TradingVolume);
     v8::Local<v8::String> HedgeQuota=Nan::New<v8::String>("HedgeQuota").ToLocalChecked();
     v8::Local<v8::Integer> HedgeQuotaValue=Nan::New<v8::Integer>(pRtnHedgeDetailChg->HedgeQuota);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnHedgeDetailChg->OperationType);

     v8::Local<v8::Object> pRtnHedgeDetailChgJS=Nan::New<v8::Object>();
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(OperatorID),Local<v8::Value>(OperatorIDValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(Time),Local<v8::Value>(TimeValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(PosiDirection),Local<v8::Value>(PosiDirectionValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(TradingVolume),Local<v8::Value>(TradingVolumeValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(HedgeQuota),Local<v8::Value>(HedgeQuotaValue));
     pRtnHedgeDetailChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnHedgeDetailChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryParticipantChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticipantChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryParticipantChgField *pRspQryParticipantChg =(CShfeFtdcRspQryParticipantChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryParticipantChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryParticipantChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryParticipantChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRspQryParticipantChg->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbr=Nan::New<v8::String>("ParticipantAbbr").ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbrValue=Nan::New(pRspQryParticipantChg->ParticipantAbbr).ToLocalChecked();
     v8::Local<v8::String> MemberType=Nan::New<v8::String>("MemberType").ToLocalChecked();
     v8::Local<v8::Integer> MemberTypeValue=Nan::New<v8::Integer>(pRspQryParticipantChg->MemberType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryParticipantChg->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryParticipantChg->OperationType);
     v8::Local<v8::Object> pRspQryParticipantChgJS=Nan::New<v8::Object>();
     pRspQryParticipantChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(ParticipantAbbr),Local<v8::Value>(ParticipantAbbrValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(MemberType),Local<v8::Value>(MemberTypeValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryParticipantChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryParticipantChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnParticipantChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnParticipantChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnParticipantChgField *pRtnParticipantChg =(CShfeFtdcRtnParticipantChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnParticipantChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnParticipantChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnParticipantChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRtnParticipantChg->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbr=Nan::New<v8::String>("ParticipantAbbr").ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbrValue=Nan::New(pRtnParticipantChg->ParticipantAbbr).ToLocalChecked();
     v8::Local<v8::String> MemberType=Nan::New<v8::String>("MemberType").ToLocalChecked();
     v8::Local<v8::Integer> MemberTypeValue=Nan::New<v8::Integer>(pRtnParticipantChg->MemberType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnParticipantChg->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnParticipantChg->OperationType);

     v8::Local<v8::Object> pRtnParticipantChgJS=Nan::New<v8::Object>();
     pRtnParticipantChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(ParticipantAbbr),Local<v8::Value>(ParticipantAbbrValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(MemberType),Local<v8::Value>(MemberTypeValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnParticipantChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnParticipantChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryMarginRateChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMarginRateChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMarginRateChgField *pRspQryMarginRateChg =(CShfeFtdcRspQryMarginRateChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryMarginRateChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryMarginRateChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryMarginRateChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryMarginRateChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryMarginRateChg->TradingRole);
     v8::Local<v8::String> HedgeFlag=Nan::New<v8::String>("HedgeFlag").ToLocalChecked();
     v8::Local<v8::Integer> HedgeFlagValue=Nan::New<v8::Integer>(pRspQryMarginRateChg->HedgeFlag);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryMarginRateChg->ValueMode);
     v8::Local<v8::String> LongMarginRatio=Nan::New<v8::String>("LongMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> LongMarginRatioValue=Nan::New<v8::Number>(pRspQryMarginRateChg->LongMarginRatio);
     v8::Local<v8::String> ShortMarginRatio=Nan::New<v8::String>("ShortMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> ShortMarginRatioValue=Nan::New<v8::Number>(pRspQryMarginRateChg->ShortMarginRatio);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryMarginRateChg->OperationType);
     v8::Local<v8::Object> pRspQryMarginRateChgJS=Nan::New<v8::Object>();
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(HedgeFlag),Local<v8::Value>(HedgeFlagValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(LongMarginRatio),Local<v8::Value>(LongMarginRatioValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(ShortMarginRatio),Local<v8::Value>(ShortMarginRatioValue));
     pRspQryMarginRateChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMarginRateChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMarginRateChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMarginRateChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMarginRateChgField *pRtnMarginRateChg =(CShfeFtdcRtnMarginRateChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnMarginRateChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnMarginRateChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnMarginRateChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnMarginRateChg->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnMarginRateChg->TradingRole);
     v8::Local<v8::String> HedgeFlag=Nan::New<v8::String>("HedgeFlag").ToLocalChecked();
     v8::Local<v8::Integer> HedgeFlagValue=Nan::New<v8::Integer>(pRtnMarginRateChg->HedgeFlag);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnMarginRateChg->ValueMode);
     v8::Local<v8::String> LongMarginRatio=Nan::New<v8::String>("LongMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> LongMarginRatioValue=Nan::New<v8::Number>(pRtnMarginRateChg->LongMarginRatio);
     v8::Local<v8::String> ShortMarginRatio=Nan::New<v8::String>("ShortMarginRatio").ToLocalChecked();
     v8::Local<v8::Number> ShortMarginRatioValue=Nan::New<v8::Number>(pRtnMarginRateChg->ShortMarginRatio);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnMarginRateChg->OperationType);

     v8::Local<v8::Object> pRtnMarginRateChgJS=Nan::New<v8::Object>();
     pRtnMarginRateChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(HedgeFlag),Local<v8::Value>(HedgeFlagValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(LongMarginRatio),Local<v8::Value>(LongMarginRatioValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(ShortMarginRatio),Local<v8::Value>(ShortMarginRatioValue));
     pRtnMarginRateChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMarginRateChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryUserIpChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserIpChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryUserIpChgField *pRspQryUserIpChg =(CShfeFtdcRspQryUserIpChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryUserIpChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryUserIpChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryUserIpChg->UserID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryUserIpChg->IPAddress).ToLocalChecked();
     v8::Local<v8::String> IPMask=Nan::New<v8::String>("IPMask").ToLocalChecked();
     v8::Local<v8::String> IPMaskValue=Nan::New(pRspQryUserIpChg->IPMask).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryUserIpChg->OperationType);
     v8::Local<v8::Object> pRspQryUserIpChgJS=Nan::New<v8::Object>();
     pRspQryUserIpChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryUserIpChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryUserIpChgJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryUserIpChgJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQryUserIpChgJS->Set(Local<v8::Value>(IPMask),Local<v8::Value>(IPMaskValue));
     pRspQryUserIpChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryUserIpChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnUserIpChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnUserIpChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnUserIpChgField *pRtnUserIpChg =(CShfeFtdcRtnUserIpChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnUserIpChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnUserIpChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnUserIpChg->UserID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRtnUserIpChg->IPAddress).ToLocalChecked();
     v8::Local<v8::String> IPMask=Nan::New<v8::String>("IPMask").ToLocalChecked();
     v8::Local<v8::String> IPMaskValue=Nan::New(pRtnUserIpChg->IPMask).ToLocalChecked();
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnUserIpChg->OperationType);

     v8::Local<v8::Object> pRtnUserIpChgJS=Nan::New<v8::Object>();
     pRtnUserIpChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnUserIpChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnUserIpChgJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnUserIpChgJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRtnUserIpChgJS->Set(Local<v8::Value>(IPMask),Local<v8::Value>(IPMaskValue));
     pRtnUserIpChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnUserIpChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientPosiLimitChgField *pRspQryClientPosiLimitChg =(CShfeFtdcRspQryClientPosiLimitChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryClientPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryClientPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryClientPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRspQryClientPosiLimitChg->ClientType);
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryClientPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQryClientPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQryClientPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQryClientPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQryClientPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryClientPosiLimitChg->OperationType);
     v8::Local<v8::Object> pRspQryClientPosiLimitChgJS=Nan::New<v8::Object>();
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQryClientPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientPosiLimitChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnClientPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnClientPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnClientPosiLimitChgField *pRtnClientPosiLimitChg =(CShfeFtdcRtnClientPosiLimitChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnClientPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnClientPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnClientPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRtnClientPosiLimitChg->ClientType);
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnClientPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnClientPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnClientPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnClientPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnClientPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnClientPosiLimitChg->OperationType);

     v8::Local<v8::Object> pRtnClientPosiLimitChgJS=Nan::New<v8::Object>();
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnClientPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnClientPosiLimitChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySpecPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySpecPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySpecPosiLimitChgField *pRspQrySpecPosiLimitChg =(CShfeFtdcRspQrySpecPosiLimitChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQrySpecPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQrySpecPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQrySpecPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQrySpecPosiLimitChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQrySpecPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRspQrySpecPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRspQrySpecPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRspQrySpecPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRspQrySpecPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQrySpecPosiLimitChg->OperationType);
     v8::Local<v8::Object> pRspQrySpecPosiLimitChgJS=Nan::New<v8::Object>();
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRspQrySpecPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySpecPosiLimitChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSpecPosiLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSpecPosiLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSpecPosiLimitChgField *pRtnSpecPosiLimitChg =(CShfeFtdcRtnSpecPosiLimitChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnSpecPosiLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnSpecPosiLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnSpecPosiLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnSpecPosiLimitChg->ClientID).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnSpecPosiLimitChg->TradingRole);
     v8::Local<v8::String> StartTotalPosition=Nan::New<v8::String>("StartTotalPosition").ToLocalChecked();
     v8::Local<v8::Number> StartTotalPositionValue=Nan::New<v8::Number>(pRtnSpecPosiLimitChg->StartTotalPosition);
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnSpecPosiLimitChg->ValueMode);
     v8::Local<v8::String> LongPosLimit=Nan::New<v8::String>("LongPosLimit").ToLocalChecked();
     v8::Local<v8::Number> LongPosLimitValue=Nan::New<v8::Number>(pRtnSpecPosiLimitChg->LongPosLimit);
     v8::Local<v8::String> ShortPosLimit=Nan::New<v8::String>("ShortPosLimit").ToLocalChecked();
     v8::Local<v8::Number> ShortPosLimitValue=Nan::New<v8::Number>(pRtnSpecPosiLimitChg->ShortPosLimit);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnSpecPosiLimitChg->OperationType);

     v8::Local<v8::Object> pRtnSpecPosiLimitChgJS=Nan::New<v8::Object>();
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(StartTotalPosition),Local<v8::Value>(StartTotalPositionValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(LongPosLimit),Local<v8::Value>(LongPosLimitValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(ShortPosLimit),Local<v8::Value>(ShortPosLimitValue));
     pRtnSpecPosiLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSpecPosiLimitChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryHistoryObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHistoryObjectAttrField *pRspQryHistoryObjectAttr =(CShfeFtdcRspQryHistoryObjectAttrField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryHistoryObjectAttr->MonDate).ToLocalChecked();
     v8::Local<v8::String> BeginTime=Nan::New<v8::String>("BeginTime").ToLocalChecked();
     v8::Local<v8::String> BeginTimeValue=Nan::New(pRspQryHistoryObjectAttr->BeginTime).ToLocalChecked();
     v8::Local<v8::String> EndTime=Nan::New<v8::String>("EndTime").ToLocalChecked();
     v8::Local<v8::String> EndTimeValue=Nan::New(pRspQryHistoryObjectAttr->EndTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryHistoryObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryHistoryObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> ValueType=Nan::New<v8::String>("ValueType").ToLocalChecked();
     v8::Local<v8::Integer> ValueTypeValue=Nan::New<v8::Integer>(pRspQryHistoryObjectAttr->ValueType);
     v8::Local<v8::String> FirstValue=Nan::New<v8::String>("FirstValue").ToLocalChecked();
     v8::Local<v8::Number> FirstValueValue=Nan::New<v8::Number>(pRspQryHistoryObjectAttr->FirstValue);
     v8::Local<v8::String> EndValue=Nan::New<v8::String>("EndValue").ToLocalChecked();
     v8::Local<v8::Number> EndValueValue=Nan::New<v8::Number>(pRspQryHistoryObjectAttr->EndValue);
     v8::Local<v8::String> AvgValue=Nan::New<v8::String>("AvgValue").ToLocalChecked();
     v8::Local<v8::Number> AvgValueValue=Nan::New<v8::Number>(pRspQryHistoryObjectAttr->AvgValue);
     v8::Local<v8::String> MinValue=Nan::New<v8::String>("MinValue").ToLocalChecked();
     v8::Local<v8::Number> MinValueValue=Nan::New<v8::Number>(pRspQryHistoryObjectAttr->MinValue);
     v8::Local<v8::String> MaxValue=Nan::New<v8::String>("MaxValue").ToLocalChecked();
     v8::Local<v8::Number> MaxValueValue=Nan::New<v8::Number>(pRspQryHistoryObjectAttr->MaxValue);
     v8::Local<v8::String> ValueCount=Nan::New<v8::String>("ValueCount").ToLocalChecked();
     v8::Local<v8::Integer> ValueCountValue=Nan::New<v8::Integer>(pRspQryHistoryObjectAttr->ValueCount);
     v8::Local<v8::Object> pRspQryHistoryObjectAttrJS=Nan::New<v8::Object>();
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(BeginTime),Local<v8::Value>(BeginTimeValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(EndTime),Local<v8::Value>(EndTimeValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(ValueType),Local<v8::Value>(ValueTypeValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(FirstValue),Local<v8::Value>(FirstValueValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(EndValue),Local<v8::Value>(EndValueValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(AvgValue),Local<v8::Value>(AvgValueValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(MinValue),Local<v8::Value>(MinValueValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(MaxValue),Local<v8::Value>(MaxValueValue));
     pRspQryHistoryObjectAttrJS->Set(Local<v8::Value>(ValueCount),Local<v8::Value>(ValueCountValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHistoryObjectAttrJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnHistoryObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnHistoryObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnHistoryObjectAttrField *pRtnHistoryObjectAttr =(CShfeFtdcRtnHistoryObjectAttrField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnHistoryObjectAttr->MonDate).ToLocalChecked();
     v8::Local<v8::String> BeginTime=Nan::New<v8::String>("BeginTime").ToLocalChecked();
     v8::Local<v8::String> BeginTimeValue=Nan::New(pRtnHistoryObjectAttr->BeginTime).ToLocalChecked();
     v8::Local<v8::String> EndTime=Nan::New<v8::String>("EndTime").ToLocalChecked();
     v8::Local<v8::String> EndTimeValue=Nan::New(pRtnHistoryObjectAttr->EndTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnHistoryObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnHistoryObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> ValueType=Nan::New<v8::String>("ValueType").ToLocalChecked();
     v8::Local<v8::Integer> ValueTypeValue=Nan::New<v8::Integer>(pRtnHistoryObjectAttr->ValueType);
     v8::Local<v8::String> FirstValue=Nan::New<v8::String>("FirstValue").ToLocalChecked();
     v8::Local<v8::Number> FirstValueValue=Nan::New<v8::Number>(pRtnHistoryObjectAttr->FirstValue);
     v8::Local<v8::String> EndValue=Nan::New<v8::String>("EndValue").ToLocalChecked();
     v8::Local<v8::Number> EndValueValue=Nan::New<v8::Number>(pRtnHistoryObjectAttr->EndValue);
     v8::Local<v8::String> AvgValue=Nan::New<v8::String>("AvgValue").ToLocalChecked();
     v8::Local<v8::Number> AvgValueValue=Nan::New<v8::Number>(pRtnHistoryObjectAttr->AvgValue);
     v8::Local<v8::String> MinValue=Nan::New<v8::String>("MinValue").ToLocalChecked();
     v8::Local<v8::Number> MinValueValue=Nan::New<v8::Number>(pRtnHistoryObjectAttr->MinValue);
     v8::Local<v8::String> MaxValue=Nan::New<v8::String>("MaxValue").ToLocalChecked();
     v8::Local<v8::Number> MaxValueValue=Nan::New<v8::Number>(pRtnHistoryObjectAttr->MaxValue);
     v8::Local<v8::String> ValueCount=Nan::New<v8::String>("ValueCount").ToLocalChecked();
     v8::Local<v8::Integer> ValueCountValue=Nan::New<v8::Integer>(pRtnHistoryObjectAttr->ValueCount);

     v8::Local<v8::Object> pRtnHistoryObjectAttrJS=Nan::New<v8::Object>();
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(BeginTime),Local<v8::Value>(BeginTimeValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(EndTime),Local<v8::Value>(EndTimeValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(ValueType),Local<v8::Value>(ValueTypeValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(FirstValue),Local<v8::Value>(FirstValueValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(EndValue),Local<v8::Value>(EndValueValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(AvgValue),Local<v8::Value>(AvgValueValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(MinValue),Local<v8::Value>(MinValueValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(MaxValue),Local<v8::Value>(MaxValueValue));
     pRtnHistoryObjectAttrJS->Set(Local<v8::Value>(ValueCount),Local<v8::Value>(ValueCountValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnHistoryObjectAttrJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFrontInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFrontInfoField *pRspQryFrontInfo =(CShfeFtdcRspQryFrontInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryFrontInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryFrontInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FrontId=Nan::New<v8::String>("FrontId").ToLocalChecked();
     v8::Local<v8::String> FrontIdValue=Nan::New(pRspQryFrontInfo->FrontId).ToLocalChecked();
     v8::Local<v8::String> RspCondition=Nan::New<v8::String>("RspCondition").ToLocalChecked();
     v8::Local<v8::Integer> RspConditionValue=Nan::New<v8::Integer>(pRspQryFrontInfo->RspCondition);
     v8::Local<v8::String> ReqCount=Nan::New<v8::String>("ReqCount").ToLocalChecked();
     v8::Local<v8::Integer> ReqCountValue=Nan::New<v8::Integer>(pRspQryFrontInfo->ReqCount);
     v8::Local<v8::String> ReqRate=Nan::New<v8::String>("ReqRate").ToLocalChecked();
     v8::Local<v8::Number> ReqRateValue=Nan::New<v8::Number>(pRspQryFrontInfo->ReqRate);
     v8::Local<v8::Object> pRspQryFrontInfoJS=Nan::New<v8::Object>();
     pRspQryFrontInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryFrontInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryFrontInfoJS->Set(Local<v8::Value>(FrontId),Local<v8::Value>(FrontIdValue));
     pRspQryFrontInfoJS->Set(Local<v8::Value>(RspCondition),Local<v8::Value>(RspConditionValue));
     pRspQryFrontInfoJS->Set(Local<v8::Value>(ReqCount),Local<v8::Value>(ReqCountValue));
     pRspQryFrontInfoJS->Set(Local<v8::Value>(ReqRate),Local<v8::Value>(ReqRateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFrontInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFrontInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFrontInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFrontInfoField *pRtnFrontInfo =(CShfeFtdcRtnFrontInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnFrontInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnFrontInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FrontId=Nan::New<v8::String>("FrontId").ToLocalChecked();
     v8::Local<v8::String> FrontIdValue=Nan::New(pRtnFrontInfo->FrontId).ToLocalChecked();
     v8::Local<v8::String> RspCondition=Nan::New<v8::String>("RspCondition").ToLocalChecked();
     v8::Local<v8::Integer> RspConditionValue=Nan::New<v8::Integer>(pRtnFrontInfo->RspCondition);
     v8::Local<v8::String> ReqCount=Nan::New<v8::String>("ReqCount").ToLocalChecked();
     v8::Local<v8::Integer> ReqCountValue=Nan::New<v8::Integer>(pRtnFrontInfo->ReqCount);
     v8::Local<v8::String> ReqRate=Nan::New<v8::String>("ReqRate").ToLocalChecked();
     v8::Local<v8::Number> ReqRateValue=Nan::New<v8::Number>(pRtnFrontInfo->ReqRate);

     v8::Local<v8::Object> pRtnFrontInfoJS=Nan::New<v8::Object>();
     pRtnFrontInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnFrontInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnFrontInfoJS->Set(Local<v8::Value>(FrontId),Local<v8::Value>(FrontIdValue));
     pRtnFrontInfoJS->Set(Local<v8::Value>(RspCondition),Local<v8::Value>(RspConditionValue));
     pRtnFrontInfoJS->Set(Local<v8::Value>(ReqCount),Local<v8::Value>(ReqCountValue));
     pRtnFrontInfoJS->Set(Local<v8::Value>(ReqRate),Local<v8::Value>(ReqRateValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFrontInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySysUserLoginTopic(uv_async_t *handle)
{
    std::cout<<"\n****************SpiCFunc:: OnRspQrySysUserLoginTopic: START ****************" << std::endl;
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserLoginTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysUserLoginField *pRspQrySysUserLogin =(CShfeFtdcRspQrySysUserLoginField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQrySysUserLogin->UserID).ToLocalChecked();
     v8::Local<v8::String> TradingDay=Nan::New<v8::String>("TradingDay").ToLocalChecked();
     v8::Local<v8::String> TradingDayValue=Nan::New(pRspQrySysUserLogin->TradingDay).ToLocalChecked();
     v8::Local<v8::String> LoginTime=Nan::New<v8::String>("LoginTime").ToLocalChecked();
     v8::Local<v8::String> LoginTimeValue=Nan::New(pRspQrySysUserLogin->LoginTime).ToLocalChecked();
     v8::Local<v8::String> Privilege=Nan::New<v8::String>("Privilege").ToLocalChecked();
     v8::Local<v8::Integer> PrivilegeValue=Nan::New<v8::Integer>(pRspQrySysUserLogin->Privilege);
     v8::Local<v8::String> VersionFlag=Nan::New<v8::String>("VersionFlag").ToLocalChecked();
     v8::Local<v8::Integer> VersionFlagValue=Nan::New<v8::Integer>(pRspQrySysUserLogin->VersionFlag);
     v8::Local<v8::Object> pRspQrySysUserLoginJS=Nan::New<v8::Object>();
     pRspQrySysUserLoginJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQrySysUserLoginJS->Set(Local<v8::Value>(TradingDay),Local<v8::Value>(TradingDayValue));
     pRspQrySysUserLoginJS->Set(Local<v8::Value>(LoginTime),Local<v8::Value>(LoginTimeValue));
     pRspQrySysUserLoginJS->Set(Local<v8::Value>(Privilege),Local<v8::Value>(PrivilegeValue));
     pRspQrySysUserLoginJS->Set(Local<v8::Value>(VersionFlag),Local<v8::Value>(VersionFlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysUserLoginJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
    
    std::cout<<"****************SpiCFunc:: OnRspQrySysUserLoginTopic: END ****************" << std::endl;
        
}
void OnRspQrySysUserLogoutTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserLogoutTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysUserLogoutField *pRspQrySysUserLogout =(CShfeFtdcRspQrySysUserLogoutField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQrySysUserLogout->UserID).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySysUserLogoutJS=Nan::New<v8::Object>();
     pRspQrySysUserLogoutJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysUserLogoutJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQrySysUserPasswordUpdateTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserPasswordUpdateTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysUserPasswordUpdateField *pRspQrySysUserPasswordUpdate =(CShfeFtdcRspQrySysUserPasswordUpdateField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQrySysUserPasswordUpdate->UserID).ToLocalChecked();
     v8::Local<v8::String> PasswordChgMsg=Nan::New<v8::String>("PasswordChgMsg").ToLocalChecked();
     v8::Local<v8::String> PasswordChgMsgValue=Nan::New(pRspQrySysUserPasswordUpdate->PasswordChgMsg).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySysUserPasswordUpdateJS=Nan::New<v8::Object>();
     pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQrySysUserPasswordUpdateJS->Set(Local<v8::Value>(PasswordChgMsg),Local<v8::Value>(PasswordChgMsgValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysUserPasswordUpdateJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQrySysUserRegisterTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserRegisterTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysUserRegisterField *pRspQrySysUserRegister =(CShfeFtdcRspQrySysUserRegisterField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQrySysUserRegister->UserID).ToLocalChecked();
     v8::Local<v8::String> Privilege=Nan::New<v8::String>("Privilege").ToLocalChecked();
     v8::Local<v8::Integer> PrivilegeValue=Nan::New<v8::Integer>(pRspQrySysUserRegister->Privilege);
     v8::Local<v8::Object> pRspQrySysUserRegisterJS=Nan::New<v8::Object>();
     pRspQrySysUserRegisterJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQrySysUserRegisterJS->Set(Local<v8::Value>(Privilege),Local<v8::Value>(PrivilegeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysUserRegisterJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQrySysUserDeleteTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysUserDeleteTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysUserDeleteField *pRspQrySysUserDelete =(CShfeFtdcRspQrySysUserDeleteField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQrySysUserDelete->UserID).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySysUserDeleteJS=Nan::New<v8::Object>();
     pRspQrySysUserDeleteJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysUserDeleteJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryParticipantInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticipantInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryParticipantInitField *pRspQryParticipantInit =(CShfeFtdcRspQryParticipantInitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryParticipantInit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRspQryParticipantInit->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbr=Nan::New<v8::String>("ParticipantAbbr").ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbrValue=Nan::New(pRspQryParticipantInit->ParticipantAbbr).ToLocalChecked();
     v8::Local<v8::String> MemberType=Nan::New<v8::String>("MemberType").ToLocalChecked();
     v8::Local<v8::Integer> MemberTypeValue=Nan::New<v8::Integer>(pRspQryParticipantInit->MemberType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryParticipantInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryParticipantInit->OperationType);
     v8::Local<v8::Object> pRspQryParticipantInitJS=Nan::New<v8::Object>();
     pRspQryParticipantInitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryParticipantInitJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRspQryParticipantInitJS->Set(Local<v8::Value>(ParticipantAbbr),Local<v8::Value>(ParticipantAbbrValue));
     pRspQryParticipantInitJS->Set(Local<v8::Value>(MemberType),Local<v8::Value>(MemberTypeValue));
     pRspQryParticipantInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryParticipantInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryParticipantInitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnParticipantInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnParticipantInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnParticipantInitField *pRtnParticipantInit =(CShfeFtdcRtnParticipantInitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnParticipantInit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRtnParticipantInit->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbr=Nan::New<v8::String>("ParticipantAbbr").ToLocalChecked();
     v8::Local<v8::String> ParticipantAbbrValue=Nan::New(pRtnParticipantInit->ParticipantAbbr).ToLocalChecked();
     v8::Local<v8::String> MemberType=Nan::New<v8::String>("MemberType").ToLocalChecked();
     v8::Local<v8::Integer> MemberTypeValue=Nan::New<v8::Integer>(pRtnParticipantInit->MemberType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnParticipantInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnParticipantInit->OperationType);

     v8::Local<v8::Object> pRtnParticipantInitJS=Nan::New<v8::Object>();
     pRtnParticipantInitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnParticipantInitJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRtnParticipantInitJS->Set(Local<v8::Value>(ParticipantAbbr),Local<v8::Value>(ParticipantAbbrValue));
     pRtnParticipantInitJS->Set(Local<v8::Value>(MemberType),Local<v8::Value>(MemberTypeValue));
     pRtnParticipantInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnParticipantInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnParticipantInitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryUserInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryUserInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryUserInitField *pRspQryUserInit =(CShfeFtdcRspQryUserInitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryUserInit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryUserInit->UserID).ToLocalChecked();
     v8::Local<v8::String> UserType=Nan::New<v8::String>("UserType").ToLocalChecked();
     v8::Local<v8::Integer> UserTypeValue=Nan::New<v8::Integer>(pRspQryUserInit->UserType);
     v8::Local<v8::String> Password=Nan::New<v8::String>("Password").ToLocalChecked();
     v8::Local<v8::String> PasswordValue=Nan::New(pRspQryUserInit->Password).ToLocalChecked();
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryUserInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryUserInit->OperationType);
     v8::Local<v8::Object> pRspQryUserInitJS=Nan::New<v8::Object>();
     pRspQryUserInitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryUserInitJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryUserInitJS->Set(Local<v8::Value>(UserType),Local<v8::Value>(UserTypeValue));
     pRspQryUserInitJS->Set(Local<v8::Value>(Password),Local<v8::Value>(PasswordValue));
     pRspQryUserInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryUserInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryUserInitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnUserInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnUserInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnUserInitField *pRtnUserInit =(CShfeFtdcRtnUserInitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnUserInit->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnUserInit->UserID).ToLocalChecked();
     v8::Local<v8::String> UserType=Nan::New<v8::String>("UserType").ToLocalChecked();
     v8::Local<v8::Integer> UserTypeValue=Nan::New<v8::Integer>(pRtnUserInit->UserType);
     v8::Local<v8::String> Password=Nan::New<v8::String>("Password").ToLocalChecked();
     v8::Local<v8::String> PasswordValue=Nan::New(pRtnUserInit->Password).ToLocalChecked();
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnUserInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnUserInit->OperationType);

     v8::Local<v8::Object> pRtnUserInitJS=Nan::New<v8::Object>();
     pRtnUserInitJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnUserInitJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnUserInitJS->Set(Local<v8::Value>(UserType),Local<v8::Value>(UserTypeValue));
     pRtnUserInitJS->Set(Local<v8::Value>(Password),Local<v8::Value>(PasswordValue));
     pRtnUserInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnUserInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnUserInitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientInitField *pRspQryClientInit =(CShfeFtdcRspQryClientInitField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryClientInit->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRspQryClientInit->ClientName).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRspQryClientInit->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRspQryClientInit->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryClientInit->TradingRole);
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRspQryClientInit->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryClientInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryClientInit->OperationType);
     v8::Local<v8::Object> pRspQryClientInitJS=Nan::New<v8::Object>();
     pRspQryClientInitJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryClientInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientInitJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnClientInitTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnClientInitTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnClientInitField *pRtnClientInit =(CShfeFtdcRtnClientInitField *)(paramArrayNew[0]);

     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnClientInit->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRtnClientInit->ClientName).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRtnClientInit->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRtnClientInit->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnClientInit->TradingRole);
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRtnClientInit->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnClientInit->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnClientInit->OperationType);

     v8::Local<v8::Object> pRtnClientInitJS=Nan::New<v8::Object>();
     pRtnClientInitJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnClientInitJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRtnClientInitJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRtnClientInitJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRtnClientInitJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnClientInitJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRtnClientInitJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnClientInitJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnClientInitJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTradeLogTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeLogTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeLogField *pRspQryTradeLog =(CShfeFtdcRspQryTradeLogField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> bFlag=Nan::New<v8::String>("bFlag").ToLocalChecked();
     v8::Local<v8::Integer> bFlagValue=Nan::New<v8::Integer>(pRspQryTradeLog->bFlag);
     v8::Local<v8::String> TradeLogStr=Nan::New<v8::String>("TradeLogStr").ToLocalChecked();
     v8::Local<v8::String> TradeLogStrValue=Nan::New(pRspQryTradeLog->TradeLogStr).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTradeLogJS=Nan::New<v8::Object>();
     pRspQryTradeLogJS->Set(Local<v8::Value>(bFlag),Local<v8::Value>(bFlagValue));
     pRspQryTradeLogJS->Set(Local<v8::Value>(TradeLogStr),Local<v8::Value>(TradeLogStrValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeLogJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTradeLogTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeLogTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTradeLogField *pRtnTradeLog =(CShfeFtdcRtnTradeLogField *)(paramArrayNew[0]);

     v8::Local<v8::String> bFlag=Nan::New<v8::String>("bFlag").ToLocalChecked();
     v8::Local<v8::Integer> bFlagValue=Nan::New<v8::Integer>(pRtnTradeLog->bFlag);
     v8::Local<v8::String> TradeLogStr=Nan::New<v8::String>("TradeLogStr").ToLocalChecked();
     v8::Local<v8::String> TradeLogStrValue=Nan::New(pRtnTradeLog->TradeLogStr).ToLocalChecked();

     v8::Local<v8::Object> pRtnTradeLogJS=Nan::New<v8::Object>();
     pRtnTradeLogJS->Set(Local<v8::Value>(bFlag),Local<v8::Value>(bFlagValue));
     pRtnTradeLogJS->Set(Local<v8::Value>(TradeLogStr),Local<v8::Value>(TradeLogStrValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTradeLogJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTradeUserLoginInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeUserLoginInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeUserLoginInfoField *pRspQryTradeUserLoginInfo =(CShfeFtdcRspQryTradeUserLoginInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryTradeUserLoginInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryTradeUserLoginInfo->UserID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryTradeUserLoginInfo->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ProtocolInfo=Nan::New<v8::String>("ProtocolInfo").ToLocalChecked();
     v8::Local<v8::String> ProtocolInfoValue=Nan::New(pRspQryTradeUserLoginInfo->ProtocolInfo).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryTradeUserLoginInfo->IPAddress).ToLocalChecked();
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRspQryTradeUserLoginInfo->FrontID);
     v8::Local<v8::String> UserType=Nan::New<v8::String>("UserType").ToLocalChecked();
     v8::Local<v8::String> UserTypeValue=Nan::New(pRspQryTradeUserLoginInfo->UserType).ToLocalChecked();
     v8::Local<v8::String> AccessType=Nan::New<v8::String>("AccessType").ToLocalChecked();
     v8::Local<v8::String> AccessTypeValue=Nan::New(pRspQryTradeUserLoginInfo->AccessType).ToLocalChecked();
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryTradeUserLoginInfo->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryTradeUserLoginInfo->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ActionFlag=Nan::New<v8::String>("ActionFlag").ToLocalChecked();
     v8::Local<v8::Integer> ActionFlagValue=Nan::New<v8::Integer>(pRspQryTradeUserLoginInfo->ActionFlag);
     v8::Local<v8::String> DataCenter=Nan::New<v8::String>("DataCenter").ToLocalChecked();
     v8::Local<v8::String> DataCenterValue=Nan::New(pRspQryTradeUserLoginInfo->DataCenter).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTradeUserLoginInfoJS=Nan::New<v8::Object>();
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ProtocolInfo),Local<v8::Value>(ProtocolInfoValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(UserType),Local<v8::Value>(UserTypeValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(AccessType),Local<v8::Value>(AccessTypeValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionFlag),Local<v8::Value>(ActionFlagValue));
     pRspQryTradeUserLoginInfoJS->Set(Local<v8::Value>(DataCenter),Local<v8::Value>(DataCenterValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeUserLoginInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTradeUserLoginInfoTopic(uv_async_t *handle)
{
   std::cout <<"\n********** CFunc::OnRtnTradeUserLoginInfoTopic: START ********"<<std::endl;
   std::cout << "**** g_RtnTradeUserLoginInfoTopic_Fun_index: " 
             << g_RtnTradeUserLoginInfoTopic_Fun_index++ << endl;
              
    void**paramArrayNew=new void*[4];
    
    paramArrayNew = (void**)handle->data;
    
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeUserLoginInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTradeUserLoginInfoField *pRtnTradeUserLoginInfo =(CShfeFtdcRtnTradeUserLoginInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnTradeUserLoginInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnTradeUserLoginInfo->UserID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnTradeUserLoginInfo->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> ProtocolInfo=Nan::New<v8::String>("ProtocolInfo").ToLocalChecked();
     v8::Local<v8::String> ProtocolInfoValue=Nan::New(pRtnTradeUserLoginInfo->ProtocolInfo).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRtnTradeUserLoginInfo->IPAddress).ToLocalChecked();
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRtnTradeUserLoginInfo->FrontID);
     v8::Local<v8::String> UserType=Nan::New<v8::String>("UserType").ToLocalChecked();
     v8::Local<v8::String> UserTypeValue=Nan::New(pRtnTradeUserLoginInfo->UserType).ToLocalChecked();
     v8::Local<v8::String> AccessType=Nan::New<v8::String>("AccessType").ToLocalChecked();
     v8::Local<v8::String> AccessTypeValue=Nan::New(pRtnTradeUserLoginInfo->AccessType).ToLocalChecked();
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnTradeUserLoginInfo->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnTradeUserLoginInfo->ActionTime).ToLocalChecked();
     v8::Local<v8::String> ActionFlag=Nan::New<v8::String>("ActionFlag").ToLocalChecked();
     v8::Local<v8::Integer> ActionFlagValue=Nan::New<v8::Integer>(pRtnTradeUserLoginInfo->ActionFlag);
     v8::Local<v8::String> DataCenter=Nan::New<v8::String>("DataCenter").ToLocalChecked();
     v8::Local<v8::String> DataCenterValue=Nan::New(pRtnTradeUserLoginInfo->DataCenter).ToLocalChecked();

     v8::Local<v8::Object> pRtnTradeUserLoginInfoJS=Nan::New<v8::Object>();
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ProtocolInfo),Local<v8::Value>(ProtocolInfoValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(UserType),Local<v8::Value>(UserTypeValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(AccessType),Local<v8::Value>(AccessTypeValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(ActionFlag),Local<v8::Value>(ActionFlagValue));
     pRtnTradeUserLoginInfoJS->Set(Local<v8::Value>(DataCenter),Local<v8::Value>(DataCenterValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTradeUserLoginInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
     uv_sem_post(&g_RtnTradeUserLoginInfoTopic_sem);
     std::cout<<"********** CFunc::OnRtnTradeUserLoginInfoTopic: END! ********\n"<<std::endl;
     
}
void OnRspQryPartTradeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPartTradeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPartTradeField *pRspQryPartTrade =(CShfeFtdcRspQryPartTradeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRspQryPartTrade->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRspQryPartTrade->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryPartTrade->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryPartTrade->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> TotalPositiveOrder=Nan::New<v8::String>("TotalPositiveOrder").ToLocalChecked();
     v8::Local<v8::Integer> TotalPositiveOrderValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalPositiveOrder);
     v8::Local<v8::String> TotalNegativeOrder=Nan::New<v8::String>("TotalNegativeOrder").ToLocalChecked();
     v8::Local<v8::Integer> TotalNegativeOrderValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalNegativeOrder);
     v8::Local<v8::String> TotalPositiveTrade=Nan::New<v8::String>("TotalPositiveTrade").ToLocalChecked();
     v8::Local<v8::Integer> TotalPositiveTradeValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalPositiveTrade);
     v8::Local<v8::String> TotalNegativeTrade=Nan::New<v8::String>("TotalNegativeTrade").ToLocalChecked();
     v8::Local<v8::Integer> TotalNegativeTradeValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalNegativeTrade);
     v8::Local<v8::String> TotalPositivePosi=Nan::New<v8::String>("TotalPositivePosi").ToLocalChecked();
     v8::Local<v8::Integer> TotalPositivePosiValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalPositivePosi);
     v8::Local<v8::String> TotalNegativePosi=Nan::New<v8::String>("TotalNegativePosi").ToLocalChecked();
     v8::Local<v8::Integer> TotalNegativePosiValue=Nan::New<v8::Integer>(pRspQryPartTrade->TotalNegativePosi);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryPartTrade->OperationType);
     v8::Local<v8::Object> pRspQryPartTradeJS=Nan::New<v8::Object>();
     pRspQryPartTradeJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalPositiveOrder),Local<v8::Value>(TotalPositiveOrderValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalNegativeOrder),Local<v8::Value>(TotalNegativeOrderValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalPositiveTrade),Local<v8::Value>(TotalPositiveTradeValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalNegativeTrade),Local<v8::Value>(TotalNegativeTradeValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalPositivePosi),Local<v8::Value>(TotalPositivePosiValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(TotalNegativePosi),Local<v8::Value>(TotalNegativePosiValue));
     pRspQryPartTradeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPartTradeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryTradepeakTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradepeakTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradepeakField *pRspQryTradepeak =(CShfeFtdcRspQryTradepeakField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> TradepeakFlag=Nan::New<v8::String>("TradepeakFlag").ToLocalChecked();
     v8::Local<v8::Integer> TradepeakFlagValue=Nan::New<v8::Integer>(pRspQryTradepeak->TradepeakFlag);
     v8::Local<v8::String> PeakTime=Nan::New<v8::String>("PeakTime").ToLocalChecked();
     v8::Local<v8::String> PeakTimeValue=Nan::New(pRspQryTradepeak->PeakTime).ToLocalChecked();
     v8::Local<v8::String> InsertOrder=Nan::New<v8::String>("InsertOrder").ToLocalChecked();
     v8::Local<v8::Integer> InsertOrderValue=Nan::New<v8::Integer>(pRspQryTradepeak->InsertOrder);
     v8::Local<v8::String> ActionOrder=Nan::New<v8::String>("ActionOrder").ToLocalChecked();
     v8::Local<v8::Integer> ActionOrderValue=Nan::New<v8::Integer>(pRspQryTradepeak->ActionOrder);
     v8::Local<v8::String> InvalidOrder=Nan::New<v8::String>("InvalidOrder").ToLocalChecked();
     v8::Local<v8::Integer> InvalidOrderValue=Nan::New<v8::Integer>(pRspQryTradepeak->InvalidOrder);
     v8::Local<v8::String> TotalBusiness=Nan::New<v8::String>("TotalBusiness").ToLocalChecked();
     v8::Local<v8::Integer> TotalBusinessValue=Nan::New<v8::Integer>(pRspQryTradepeak->TotalBusiness);
     v8::Local<v8::String> TradeCount=Nan::New<v8::String>("TradeCount").ToLocalChecked();
     v8::Local<v8::Integer> TradeCountValue=Nan::New<v8::Integer>(pRspQryTradepeak->TradeCount);
     v8::Local<v8::String> TotalCount=Nan::New<v8::String>("TotalCount").ToLocalChecked();
     v8::Local<v8::Integer> TotalCountValue=Nan::New<v8::Integer>(pRspQryTradepeak->TotalCount);
     v8::Local<v8::Object> pRspQryTradepeakJS=Nan::New<v8::Object>();
     pRspQryTradepeakJS->Set(Local<v8::Value>(TradepeakFlag),Local<v8::Value>(TradepeakFlagValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(PeakTime),Local<v8::Value>(PeakTimeValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(InsertOrder),Local<v8::Value>(InsertOrderValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(ActionOrder),Local<v8::Value>(ActionOrderValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(InvalidOrder),Local<v8::Value>(InvalidOrderValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(TotalBusiness),Local<v8::Value>(TotalBusinessValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(TradeCount),Local<v8::Value>(TradeCountValue));
     pRspQryTradepeakJS->Set(Local<v8::Value>(TotalCount),Local<v8::Value>(TotalCountValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradepeakJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnUpdateSysConfigTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnUpdateSysConfigTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnUpdateSysConfigField *pRtnUpdateSysConfig =(CShfeFtdcRtnUpdateSysConfigField *)(paramArrayNew[0]);

     v8::Local<v8::String> UpdateType=Nan::New<v8::String>("UpdateType").ToLocalChecked();
     v8::Local<v8::String> UpdateTypeValue=Nan::New(pRtnUpdateSysConfig->UpdateType).ToLocalChecked();
     v8::Local<v8::String> OldValue=Nan::New<v8::String>("OldValue").ToLocalChecked();
     v8::Local<v8::String> OldValueValue=Nan::New(pRtnUpdateSysConfig->OldValue).ToLocalChecked();
     v8::Local<v8::String> NewValue=Nan::New<v8::String>("NewValue").ToLocalChecked();
     v8::Local<v8::String> NewValueValue=Nan::New(pRtnUpdateSysConfig->NewValue).ToLocalChecked();
     v8::Local<v8::String> Standby=Nan::New<v8::String>("Standby").ToLocalChecked();
     v8::Local<v8::String> StandbyValue=Nan::New(pRtnUpdateSysConfig->Standby).ToLocalChecked();

     v8::Local<v8::Object> pRtnUpdateSysConfigJS=Nan::New<v8::Object>();
     pRtnUpdateSysConfigJS->Set(Local<v8::Value>(UpdateType),Local<v8::Value>(UpdateTypeValue));
     pRtnUpdateSysConfigJS->Set(Local<v8::Value>(OldValue),Local<v8::Value>(OldValueValue));
     pRtnUpdateSysConfigJS->Set(Local<v8::Value>(NewValue),Local<v8::Value>(NewValueValue));
     pRtnUpdateSysConfigJS->Set(Local<v8::Value>(Standby),Local<v8::Value>(StandbyValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnUpdateSysConfigJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRtnSysUser(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSysUser").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSysUserField *pRtnSysUser =(CShfeFtdcRtnSysUserField *)(paramArrayNew[0]);

     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnSysUser->UserID).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRtnSysUser->UserName).ToLocalChecked();
     v8::Local<v8::String> UserInfo=Nan::New<v8::String>("UserInfo").ToLocalChecked();
     v8::Local<v8::String> UserInfoValue=Nan::New(pRtnSysUser->UserInfo).ToLocalChecked();
     v8::Local<v8::String> Password=Nan::New<v8::String>("Password").ToLocalChecked();
     v8::Local<v8::String> PasswordValue=Nan::New(pRtnSysUser->Password).ToLocalChecked();
     v8::Local<v8::String> Privilege=Nan::New<v8::String>("Privilege").ToLocalChecked();
     v8::Local<v8::Integer> PrivilegeValue=Nan::New<v8::Integer>(pRtnSysUser->Privilege);
     v8::Local<v8::String> EMail=Nan::New<v8::String>("EMail").ToLocalChecked();
     v8::Local<v8::String> EMailValue=Nan::New(pRtnSysUser->EMail).ToLocalChecked();
     v8::Local<v8::String> EMailFlag=Nan::New<v8::String>("EMailFlag").ToLocalChecked();
     v8::Local<v8::Integer> EMailFlagValue=Nan::New<v8::Integer>(pRtnSysUser->EMailFlag);
     v8::Local<v8::String> HomePhone=Nan::New<v8::String>("HomePhone").ToLocalChecked();
     v8::Local<v8::String> HomePhoneValue=Nan::New(pRtnSysUser->HomePhone).ToLocalChecked();
     v8::Local<v8::String> HomePhoneFlag=Nan::New<v8::String>("HomePhoneFlag").ToLocalChecked();
     v8::Local<v8::Integer> HomePhoneFlagValue=Nan::New<v8::Integer>(pRtnSysUser->HomePhoneFlag);
     v8::Local<v8::String> MobilePhone=Nan::New<v8::String>("MobilePhone").ToLocalChecked();
     v8::Local<v8::String> MobilePhoneValue=Nan::New(pRtnSysUser->MobilePhone).ToLocalChecked();
     v8::Local<v8::String> MobilePhoneFlag=Nan::New<v8::String>("MobilePhoneFlag").ToLocalChecked();
     v8::Local<v8::Integer> MobilePhoneFlagValue=Nan::New<v8::Integer>(pRtnSysUser->MobilePhoneFlag);

     v8::Local<v8::Object> pRtnSysUserJS=Nan::New<v8::Object>();
     pRtnSysUserJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnSysUserJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRtnSysUserJS->Set(Local<v8::Value>(UserInfo),Local<v8::Value>(UserInfoValue));
     pRtnSysUserJS->Set(Local<v8::Value>(Password),Local<v8::Value>(PasswordValue));
     pRtnSysUserJS->Set(Local<v8::Value>(Privilege),Local<v8::Value>(PrivilegeValue));
     pRtnSysUserJS->Set(Local<v8::Value>(EMail),Local<v8::Value>(EMailValue));
     pRtnSysUserJS->Set(Local<v8::Value>(EMailFlag),Local<v8::Value>(EMailFlagValue));
     pRtnSysUserJS->Set(Local<v8::Value>(HomePhone),Local<v8::Value>(HomePhoneValue));
     pRtnSysUserJS->Set(Local<v8::Value>(HomePhoneFlag),Local<v8::Value>(HomePhoneFlagValue));
     pRtnSysUserJS->Set(Local<v8::Value>(MobilePhone),Local<v8::Value>(MobilePhoneValue));
     pRtnSysUserJS->Set(Local<v8::Value>(MobilePhoneFlag),Local<v8::Value>(MobilePhoneFlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSysUserJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRtnPriceLimitChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPriceLimitChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPriceLimitChgField *pRtnPriceLimitChg =(CShfeFtdcRtnPriceLimitChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> ActionDate=Nan::New<v8::String>("ActionDate").ToLocalChecked();
     v8::Local<v8::String> ActionDateValue=Nan::New(pRtnPriceLimitChg->ActionDate).ToLocalChecked();
     v8::Local<v8::String> ActionTime=Nan::New<v8::String>("ActionTime").ToLocalChecked();
     v8::Local<v8::String> ActionTimeValue=Nan::New(pRtnPriceLimitChg->ActionTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnPriceLimitChg->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> ValueMode=Nan::New<v8::String>("ValueMode").ToLocalChecked();
     v8::Local<v8::Integer> ValueModeValue=Nan::New<v8::Integer>(pRtnPriceLimitChg->ValueMode);
     v8::Local<v8::String> RoundingMode=Nan::New<v8::String>("RoundingMode").ToLocalChecked();
     v8::Local<v8::Integer> RoundingModeValue=Nan::New<v8::Integer>(pRtnPriceLimitChg->RoundingMode);
     v8::Local<v8::String> UpperLimitPrice=Nan::New<v8::String>("UpperLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> UpperLimitPriceValue=Nan::New<v8::Number>(pRtnPriceLimitChg->UpperLimitPrice);
     v8::Local<v8::String> LowerLimitPrice=Nan::New<v8::String>("LowerLimitPrice").ToLocalChecked();
     v8::Local<v8::Number> LowerLimitPriceValue=Nan::New<v8::Number>(pRtnPriceLimitChg->LowerLimitPrice);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnPriceLimitChg->OperationType);

     v8::Local<v8::Object> pRtnPriceLimitChgJS=Nan::New<v8::Object>();
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(ActionDate),Local<v8::Value>(ActionDateValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(ActionTime),Local<v8::Value>(ActionTimeValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(ValueMode),Local<v8::Value>(ValueModeValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(RoundingMode),Local<v8::Value>(RoundingModeValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(UpperLimitPrice),Local<v8::Value>(UpperLimitPriceValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(LowerLimitPrice),Local<v8::Value>(LowerLimitPriceValue));
     pRtnPriceLimitChgJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPriceLimitChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryHistoryCpuInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryCpuInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHistoryCpuInfoField *pRspQryHistoryCpuInfo =(CShfeFtdcRspQryHistoryCpuInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryHistoryCpuInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryHistoryCpuInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryHistoryCpuInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRspQryHistoryCpuInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> LOAD=Nan::New<v8::String>("LOAD").ToLocalChecked();
     v8::Local<v8::Number> LOADValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->LOAD);
     v8::Local<v8::String> USER=Nan::New<v8::String>("USER").ToLocalChecked();
     v8::Local<v8::Number> USERValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->USER);
     v8::Local<v8::String> NICE=Nan::New<v8::String>("NICE").ToLocalChecked();
     v8::Local<v8::Number> NICEValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->NICE);
     v8::Local<v8::String> SYS=Nan::New<v8::String>("SYS").ToLocalChecked();
     v8::Local<v8::Number> SYSValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->SYS);
     v8::Local<v8::String> IDLE=Nan::New<v8::String>("IDLE").ToLocalChecked();
     v8::Local<v8::Number> IDLEValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->IDLE);
     v8::Local<v8::String> BLOCK=Nan::New<v8::String>("BLOCK").ToLocalChecked();
     v8::Local<v8::Number> BLOCKValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->BLOCK);
     v8::Local<v8::String> SWAIT=Nan::New<v8::String>("SWAIT").ToLocalChecked();
     v8::Local<v8::Number> SWAITValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->SWAIT);
     v8::Local<v8::String> INTR=Nan::New<v8::String>("INTR").ToLocalChecked();
     v8::Local<v8::Number> INTRValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->INTR);
     v8::Local<v8::String> SSYS=Nan::New<v8::String>("SSYS").ToLocalChecked();
     v8::Local<v8::Number> SSYSValue=Nan::New<v8::Number>(pRspQryHistoryCpuInfo->SSYS);
     v8::Local<v8::Object> pRspQryHistoryCpuInfoJS=Nan::New<v8::Object>();
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(LOAD),Local<v8::Value>(LOADValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(USER),Local<v8::Value>(USERValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(NICE),Local<v8::Value>(NICEValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(SYS),Local<v8::Value>(SYSValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(IDLE),Local<v8::Value>(IDLEValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(BLOCK),Local<v8::Value>(BLOCKValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(SWAIT),Local<v8::Value>(SWAITValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(INTR),Local<v8::Value>(INTRValue));
     pRspQryHistoryCpuInfoJS->Set(Local<v8::Value>(SSYS),Local<v8::Value>(SSYSValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHistoryCpuInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryHistoryMemInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryMemInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHistoryMemInfoField *pRspQryHistoryMemInfo =(CShfeFtdcRspQryHistoryMemInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryHistoryMemInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryHistoryMemInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryHistoryMemInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> TOTALREAL=Nan::New<v8::String>("TOTALREAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALREALValue=Nan::New<v8::Integer>(pRspQryHistoryMemInfo->TOTALREAL);
     v8::Local<v8::String> ACTIVEREAL=Nan::New<v8::String>("ACTIVEREAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEREALValue=Nan::New<v8::Integer>(pRspQryHistoryMemInfo->ACTIVEREAL);
     v8::Local<v8::String> TOTALVIRTUAL=Nan::New<v8::String>("TOTALVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> TOTALVIRTUALValue=Nan::New<v8::Integer>(pRspQryHistoryMemInfo->TOTALVIRTUAL);
     v8::Local<v8::String> ACTIVEVIRTUAL=Nan::New<v8::String>("ACTIVEVIRTUAL").ToLocalChecked();
     v8::Local<v8::Integer> ACTIVEVIRTUALValue=Nan::New<v8::Integer>(pRspQryHistoryMemInfo->ACTIVEVIRTUAL);
     v8::Local<v8::String> FREE=Nan::New<v8::String>("FREE").ToLocalChecked();
     v8::Local<v8::Integer> FREEValue=Nan::New<v8::Integer>(pRspQryHistoryMemInfo->FREE);
     v8::Local<v8::Object> pRspQryHistoryMemInfoJS=Nan::New<v8::Object>();
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(TOTALREAL),Local<v8::Value>(TOTALREALValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(ACTIVEREAL),Local<v8::Value>(ACTIVEREALValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(TOTALVIRTUAL),Local<v8::Value>(TOTALVIRTUALValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(ACTIVEVIRTUAL),Local<v8::Value>(ACTIVEVIRTUALValue));
     pRspQryHistoryMemInfoJS->Set(Local<v8::Value>(FREE),Local<v8::Value>(FREEValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHistoryMemInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryHistoryNetworkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryNetworkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHistoryNetworkInfoField *pRspQryHistoryNetworkInfo =(CShfeFtdcRspQryHistoryNetworkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryHistoryNetworkInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryHistoryNetworkInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryHistoryNetworkInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> LANNAME=Nan::New<v8::String>("LANNAME").ToLocalChecked();
     v8::Local<v8::String> LANNAMEValue=Nan::New(pRspQryHistoryNetworkInfo->LANNAME).ToLocalChecked();
     v8::Local<v8::String> LANSTATUS=Nan::New<v8::String>("LANSTATUS").ToLocalChecked();
     v8::Local<v8::String> LANSTATUSValue=Nan::New(pRspQryHistoryNetworkInfo->LANSTATUS).ToLocalChecked();
     v8::Local<v8::String> IPADDRESS=Nan::New<v8::String>("IPADDRESS").ToLocalChecked();
     v8::Local<v8::String> IPADDRESSValue=Nan::New(pRspQryHistoryNetworkInfo->IPADDRESS).ToLocalChecked();
     v8::Local<v8::String> RECVBYTES=Nan::New<v8::String>("RECVBYTES").ToLocalChecked();
     v8::Local<v8::Number> RECVBYTESValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->RECVBYTES);
     v8::Local<v8::String> RECVPACKETS=Nan::New<v8::String>("RECVPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->RECVPACKETS);
     v8::Local<v8::String> RECVERRORPACKETS=Nan::New<v8::String>("RECVERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVERRORPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->RECVERRORPACKETS);
     v8::Local<v8::String> RECVDROPPACKETS=Nan::New<v8::String>("RECVDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> RECVDROPPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->RECVDROPPACKETS);
     v8::Local<v8::String> SENDBYTES=Nan::New<v8::String>("SENDBYTES").ToLocalChecked();
     v8::Local<v8::Number> SENDBYTESValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->SENDBYTES);
     v8::Local<v8::String> SENDPACKETS=Nan::New<v8::String>("SENDPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->SENDPACKETS);
     v8::Local<v8::String> SENDERRORPACKETS=Nan::New<v8::String>("SENDERRORPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDERRORPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->SENDERRORPACKETS);
     v8::Local<v8::String> SENDDROPPACKETS=Nan::New<v8::String>("SENDDROPPACKETS").ToLocalChecked();
     v8::Local<v8::Number> SENDDROPPACKETSValue=Nan::New<v8::Number>(pRspQryHistoryNetworkInfo->SENDDROPPACKETS);
     v8::Local<v8::Object> pRspQryHistoryNetworkInfoJS=Nan::New<v8::Object>();
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(LANNAME),Local<v8::Value>(LANNAMEValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(LANSTATUS),Local<v8::Value>(LANSTATUSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(IPADDRESS),Local<v8::Value>(IPADDRESSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(RECVBYTES),Local<v8::Value>(RECVBYTESValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(RECVPACKETS),Local<v8::Value>(RECVPACKETSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(RECVERRORPACKETS),Local<v8::Value>(RECVERRORPACKETSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(RECVDROPPACKETS),Local<v8::Value>(RECVDROPPACKETSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(SENDBYTES),Local<v8::Value>(SENDBYTESValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(SENDPACKETS),Local<v8::Value>(SENDPACKETSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(SENDERRORPACKETS),Local<v8::Value>(SENDERRORPACKETSValue));
     pRspQryHistoryNetworkInfoJS->Set(Local<v8::Value>(SENDDROPPACKETS),Local<v8::Value>(SENDDROPPACKETSValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHistoryNetworkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryMonitorOnlineUser(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMonitorOnlineUser").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMonitorOnlineUserField *pRspQryMonitorOnlineUser =(CShfeFtdcRspQryMonitorOnlineUserField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryMonitorOnlineUser->UserID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryMonitorOnlineUser->IPAddress).ToLocalChecked();
     v8::Local<v8::Object> pRspQryMonitorOnlineUserJS=Nan::New<v8::Object>();
     pRspQryMonitorOnlineUserJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryMonitorOnlineUserJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMonitorOnlineUserJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryFrontStat(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontStat").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFrontStatField *pRspQryFrontStat =(CShfeFtdcRspQryFrontStatField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRspQryFrontStat->FrontID);
     v8::Local<v8::String> PositiveOrder=Nan::New<v8::String>("PositiveOrder").ToLocalChecked();
     v8::Local<v8::Integer> PositiveOrderValue=Nan::New<v8::Integer>(pRspQryFrontStat->PositiveOrder);
     v8::Local<v8::String> NegativeOrder=Nan::New<v8::String>("NegativeOrder").ToLocalChecked();
     v8::Local<v8::Integer> NegativeOrderValue=Nan::New<v8::Integer>(pRspQryFrontStat->NegativeOrder);
     v8::Local<v8::String> TotalPositiveOrder=Nan::New<v8::String>("TotalPositiveOrder").ToLocalChecked();
     v8::Local<v8::Integer> TotalPositiveOrderValue=Nan::New<v8::Integer>(pRspQryFrontStat->TotalPositiveOrder);
     v8::Local<v8::String> TotalNegativeOrder=Nan::New<v8::String>("TotalNegativeOrder").ToLocalChecked();
     v8::Local<v8::Integer> TotalNegativeOrderValue=Nan::New<v8::Integer>(pRspQryFrontStat->TotalNegativeOrder);
     v8::Local<v8::String> OrderAction=Nan::New<v8::String>("OrderAction").ToLocalChecked();
     v8::Local<v8::Integer> OrderActionValue=Nan::New<v8::Integer>(pRspQryFrontStat->OrderAction);
     v8::Local<v8::String> TotalOrderAction=Nan::New<v8::String>("TotalOrderAction").ToLocalChecked();
     v8::Local<v8::Integer> TotalOrderActionValue=Nan::New<v8::Integer>(pRspQryFrontStat->TotalOrderAction);
     v8::Local<v8::Object> pRspQryFrontStatJS=Nan::New<v8::Object>();
     pRspQryFrontStatJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(PositiveOrder),Local<v8::Value>(PositiveOrderValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(NegativeOrder),Local<v8::Value>(NegativeOrderValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(TotalPositiveOrder),Local<v8::Value>(TotalPositiveOrderValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(TotalNegativeOrder),Local<v8::Value>(TotalNegativeOrderValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(OrderAction),Local<v8::Value>(OrderActionValue));
     pRspQryFrontStatJS->Set(Local<v8::Value>(TotalOrderAction),Local<v8::Value>(TotalOrderActionValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFrontStatJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSysTimeSyncTopic(uv_async_t *handle)
{
    std::cout <<"\n**************** SpiCFunc:OnRtnSysTimeSyncTopic : START ****************" << std::endl;
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSysTimeSyncTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSysTimeSyncField *pRtnSysTimeSync =(CShfeFtdcRtnSysTimeSyncField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnSysTimeSync->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnSysTimeSync->MonTime).ToLocalChecked();

     v8::Local<v8::Object> pRtnSysTimeSyncJS=Nan::New<v8::Object>();
     pRtnSysTimeSyncJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnSysTimeSyncJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSysTimeSyncJS);

     callback.Call(1, param);
     }
     std::cout <<"**************** SpiCFunc:OnRtnSysTimeSyncTopic : END ****************\n" << std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRtnDataCenterChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnDataCenterChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnDataCenterChgField *pRtnDataCenterChg =(CShfeFtdcRtnDataCenterChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> DataCenterID=Nan::New<v8::String>("DataCenterID").ToLocalChecked();
     v8::Local<v8::String> DataCenterIDValue=Nan::New(pRtnDataCenterChg->DataCenterID).ToLocalChecked();

     v8::Local<v8::Object> pRtnDataCenterChgJS=Nan::New<v8::Object>();
     pRtnDataCenterChgJS->Set(Local<v8::Value>(DataCenterID),Local<v8::Value>(DataCenterIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnDataCenterChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryHistoryTradePeakTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryHistoryTradePeakTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryHistoryTradePeakField *pRspQryHistoryTradePeak =(CShfeFtdcRspQryHistoryTradePeakField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryHistoryTradePeak->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryHistoryTradePeak->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryHistoryTradePeak->MonTime).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryHistoryTradePeak->AttrType).ToLocalChecked();
     v8::Local<v8::String> AttrValue=Nan::New<v8::String>("AttrValue").ToLocalChecked();
     v8::Local<v8::Number> AttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->AttrValue);
     v8::Local<v8::String> RltAttrType=Nan::New<v8::String>("RltAttrType").ToLocalChecked();
     v8::Local<v8::String> RltAttrTypeValue=Nan::New(pRspQryHistoryTradePeak->RltAttrType).ToLocalChecked();
     v8::Local<v8::String> RltAttrValue=Nan::New<v8::String>("RltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> RltAttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->RltAttrValue);
     v8::Local<v8::String> MaxMonDate=Nan::New<v8::String>("MaxMonDate").ToLocalChecked();
     v8::Local<v8::String> MaxMonDateValue=Nan::New(pRspQryHistoryTradePeak->MaxMonDate).ToLocalChecked();
     v8::Local<v8::String> MaxMonTime=Nan::New<v8::String>("MaxMonTime").ToLocalChecked();
     v8::Local<v8::String> MaxMonTimeValue=Nan::New(pRspQryHistoryTradePeak->MaxMonTime).ToLocalChecked();
     v8::Local<v8::String> MaxAttrValue=Nan::New<v8::String>("MaxAttrValue").ToLocalChecked();
     v8::Local<v8::Number> MaxAttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->MaxAttrValue);
     v8::Local<v8::String> MaxRltAttrValue=Nan::New<v8::String>("MaxRltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> MaxRltAttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->MaxRltAttrValue);
     v8::Local<v8::String> OldMonDate=Nan::New<v8::String>("OldMonDate").ToLocalChecked();
     v8::Local<v8::String> OldMonDateValue=Nan::New(pRspQryHistoryTradePeak->OldMonDate).ToLocalChecked();
     v8::Local<v8::String> OldMonTime=Nan::New<v8::String>("OldMonTime").ToLocalChecked();
     v8::Local<v8::String> OldMonTimeValue=Nan::New(pRspQryHistoryTradePeak->OldMonTime).ToLocalChecked();
     v8::Local<v8::String> OldAttrValue=Nan::New<v8::String>("OldAttrValue").ToLocalChecked();
     v8::Local<v8::Number> OldAttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->OldAttrValue);
     v8::Local<v8::String> OldRltAttrValue=Nan::New<v8::String>("OldRltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> OldRltAttrValueValue=Nan::New<v8::Number>(pRspQryHistoryTradePeak->OldRltAttrValue);
     v8::Local<v8::Object> pRspQryHistoryTradePeakJS=Nan::New<v8::Object>();
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(AttrValue),Local<v8::Value>(AttrValueValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(RltAttrType),Local<v8::Value>(RltAttrTypeValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(RltAttrValue),Local<v8::Value>(RltAttrValueValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MaxMonDate),Local<v8::Value>(MaxMonDateValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MaxMonTime),Local<v8::Value>(MaxMonTimeValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MaxAttrValue),Local<v8::Value>(MaxAttrValueValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(MaxRltAttrValue),Local<v8::Value>(MaxRltAttrValueValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(OldMonDate),Local<v8::Value>(OldMonDateValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(OldMonTime),Local<v8::Value>(OldMonTimeValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(OldAttrValue),Local<v8::Value>(OldAttrValueValue));
     pRspQryHistoryTradePeakJS->Set(Local<v8::Value>(OldRltAttrValue),Local<v8::Value>(OldRltAttrValueValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryHistoryTradePeakJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnHistoryTradePeakTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnHistoryTradePeakTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnHistoryTradePeakField *pRtnHistoryTradePeak =(CShfeFtdcRtnHistoryTradePeakField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnHistoryTradePeak->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnHistoryTradePeak->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnHistoryTradePeak->MonTime).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnHistoryTradePeak->AttrType).ToLocalChecked();
     v8::Local<v8::String> AttrValue=Nan::New<v8::String>("AttrValue").ToLocalChecked();
     v8::Local<v8::Number> AttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->AttrValue);
     v8::Local<v8::String> RltAttrType=Nan::New<v8::String>("RltAttrType").ToLocalChecked();
     v8::Local<v8::String> RltAttrTypeValue=Nan::New(pRtnHistoryTradePeak->RltAttrType).ToLocalChecked();
     v8::Local<v8::String> RltAttrValue=Nan::New<v8::String>("RltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> RltAttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->RltAttrValue);
     v8::Local<v8::String> MaxMonDate=Nan::New<v8::String>("MaxMonDate").ToLocalChecked();
     v8::Local<v8::String> MaxMonDateValue=Nan::New(pRtnHistoryTradePeak->MaxMonDate).ToLocalChecked();
     v8::Local<v8::String> MaxMonTime=Nan::New<v8::String>("MaxMonTime").ToLocalChecked();
     v8::Local<v8::String> MaxMonTimeValue=Nan::New(pRtnHistoryTradePeak->MaxMonTime).ToLocalChecked();
     v8::Local<v8::String> MaxAttrValue=Nan::New<v8::String>("MaxAttrValue").ToLocalChecked();
     v8::Local<v8::Number> MaxAttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->MaxAttrValue);
     v8::Local<v8::String> MaxRltAttrValue=Nan::New<v8::String>("MaxRltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> MaxRltAttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->MaxRltAttrValue);
     v8::Local<v8::String> OldMonDate=Nan::New<v8::String>("OldMonDate").ToLocalChecked();
     v8::Local<v8::String> OldMonDateValue=Nan::New(pRtnHistoryTradePeak->OldMonDate).ToLocalChecked();
     v8::Local<v8::String> OldMonTime=Nan::New<v8::String>("OldMonTime").ToLocalChecked();
     v8::Local<v8::String> OldMonTimeValue=Nan::New(pRtnHistoryTradePeak->OldMonTime).ToLocalChecked();
     v8::Local<v8::String> OldAttrValue=Nan::New<v8::String>("OldAttrValue").ToLocalChecked();
     v8::Local<v8::Number> OldAttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->OldAttrValue);
     v8::Local<v8::String> OldRltAttrValue=Nan::New<v8::String>("OldRltAttrValue").ToLocalChecked();
     v8::Local<v8::Number> OldRltAttrValueValue=Nan::New<v8::Number>(pRtnHistoryTradePeak->OldRltAttrValue);

     v8::Local<v8::Object> pRtnHistoryTradePeakJS=Nan::New<v8::Object>();
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(AttrValue),Local<v8::Value>(AttrValueValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(RltAttrType),Local<v8::Value>(RltAttrTypeValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(RltAttrValue),Local<v8::Value>(RltAttrValueValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MaxMonDate),Local<v8::Value>(MaxMonDateValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MaxMonTime),Local<v8::Value>(MaxMonTimeValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MaxAttrValue),Local<v8::Value>(MaxAttrValueValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(MaxRltAttrValue),Local<v8::Value>(MaxRltAttrValueValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(OldMonDate),Local<v8::Value>(OldMonDateValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(OldMonTime),Local<v8::Value>(OldMonTimeValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(OldAttrValue),Local<v8::Value>(OldAttrValueValue));
     pRtnHistoryTradePeakJS->Set(Local<v8::Value>(OldRltAttrValue),Local<v8::Value>(OldRltAttrValueValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnHistoryTradePeakJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySyslogEventTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySyslogEventTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySyslogEventField *pRspQrySyslogEvent =(CShfeFtdcRspQrySyslogEventField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQrySyslogEvent->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQrySyslogEvent->MonTime).ToLocalChecked();
     v8::Local<v8::String> OccurDate=Nan::New<v8::String>("OccurDate").ToLocalChecked();
     v8::Local<v8::String> OccurDateValue=Nan::New(pRspQrySyslogEvent->OccurDate).ToLocalChecked();
     v8::Local<v8::String> OccurTime=Nan::New<v8::String>("OccurTime").ToLocalChecked();
     v8::Local<v8::String> OccurTimeValue=Nan::New(pRspQrySyslogEvent->OccurTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRspQrySyslogEvent->EvendID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQrySyslogEvent->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQrySyslogEvent->IPAddress).ToLocalChecked();
     v8::Local<v8::String> EventName=Nan::New<v8::String>("EventName").ToLocalChecked();
     v8::Local<v8::String> EventNameValue=Nan::New(pRspQrySyslogEvent->EventName).ToLocalChecked();
     v8::Local<v8::String> EventNum=Nan::New<v8::String>("EventNum").ToLocalChecked();
     v8::Local<v8::Integer> EventNumValue=Nan::New<v8::Integer>(pRspQrySyslogEvent->EventNum);
     v8::Local<v8::String> EventType=Nan::New<v8::String>("EventType").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeValue=Nan::New<v8::Integer>(pRspQrySyslogEvent->EventType);
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRspQrySyslogEvent->EventDes).ToLocalChecked();
     v8::Local<v8::String> ProcessFlag=Nan::New<v8::String>("ProcessFlag").ToLocalChecked();
     v8::Local<v8::String> ProcessFlagValue=Nan::New(pRspQrySyslogEvent->ProcessFlag).ToLocalChecked();
     v8::Local<v8::String> WarningLevel=Nan::New<v8::String>("WarningLevel").ToLocalChecked();
     v8::Local<v8::String> WarningLevelValue=Nan::New(pRspQrySyslogEvent->WarningLevel).ToLocalChecked();
     v8::Local<v8::String> EventDealDes=Nan::New<v8::String>("EventDealDes").ToLocalChecked();
     v8::Local<v8::String> EventDealDesValue=Nan::New(pRspQrySyslogEvent->EventDealDes).ToLocalChecked();
     v8::Local<v8::String> FullEventName=Nan::New<v8::String>("FullEventName").ToLocalChecked();
     v8::Local<v8::String> FullEventNameValue=Nan::New(pRspQrySyslogEvent->FullEventName).ToLocalChecked();
     v8::Local<v8::String> EventCount=Nan::New<v8::String>("EventCount").ToLocalChecked();
     v8::Local<v8::Integer> EventCountValue=Nan::New<v8::Integer>(pRspQrySyslogEvent->EventCount);
     v8::Local<v8::Object> pRspQrySyslogEventJS=Nan::New<v8::Object>();
     pRspQrySyslogEventJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(OccurDate),Local<v8::Value>(OccurDateValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(OccurTime),Local<v8::Value>(OccurTimeValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventName),Local<v8::Value>(EventNameValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventNum),Local<v8::Value>(EventNumValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventType),Local<v8::Value>(EventTypeValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(ProcessFlag),Local<v8::Value>(ProcessFlagValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(WarningLevel),Local<v8::Value>(WarningLevelValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventDealDes),Local<v8::Value>(EventDealDesValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(FullEventName),Local<v8::Value>(FullEventNameValue));
     pRspQrySyslogEventJS->Set(Local<v8::Value>(EventCount),Local<v8::Value>(EventCountValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySyslogEventJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSyslogEventTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSyslogEventTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSyslogEventField *pRtnSyslogEvent =(CShfeFtdcRtnSyslogEventField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnSyslogEvent->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnSyslogEvent->MonTime).ToLocalChecked();
     v8::Local<v8::String> OccurDate=Nan::New<v8::String>("OccurDate").ToLocalChecked();
     v8::Local<v8::String> OccurDateValue=Nan::New(pRtnSyslogEvent->OccurDate).ToLocalChecked();
     v8::Local<v8::String> OccurTime=Nan::New<v8::String>("OccurTime").ToLocalChecked();
     v8::Local<v8::String> OccurTimeValue=Nan::New(pRtnSyslogEvent->OccurTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRtnSyslogEvent->EvendID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnSyslogEvent->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRtnSyslogEvent->IPAddress).ToLocalChecked();
     v8::Local<v8::String> EventName=Nan::New<v8::String>("EventName").ToLocalChecked();
     v8::Local<v8::String> EventNameValue=Nan::New(pRtnSyslogEvent->EventName).ToLocalChecked();
     v8::Local<v8::String> EventNum=Nan::New<v8::String>("EventNum").ToLocalChecked();
     v8::Local<v8::Integer> EventNumValue=Nan::New<v8::Integer>(pRtnSyslogEvent->EventNum);
     v8::Local<v8::String> EventType=Nan::New<v8::String>("EventType").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeValue=Nan::New<v8::Integer>(pRtnSyslogEvent->EventType);
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRtnSyslogEvent->EventDes).ToLocalChecked();
     v8::Local<v8::String> ProcessFlag=Nan::New<v8::String>("ProcessFlag").ToLocalChecked();
     v8::Local<v8::String> ProcessFlagValue=Nan::New(pRtnSyslogEvent->ProcessFlag).ToLocalChecked();
     v8::Local<v8::String> WarningLevel=Nan::New<v8::String>("WarningLevel").ToLocalChecked();
     v8::Local<v8::String> WarningLevelValue=Nan::New(pRtnSyslogEvent->WarningLevel).ToLocalChecked();
     v8::Local<v8::String> EventDealDes=Nan::New<v8::String>("EventDealDes").ToLocalChecked();
     v8::Local<v8::String> EventDealDesValue=Nan::New(pRtnSyslogEvent->EventDealDes).ToLocalChecked();
     v8::Local<v8::String> FullEventName=Nan::New<v8::String>("FullEventName").ToLocalChecked();
     v8::Local<v8::String> FullEventNameValue=Nan::New(pRtnSyslogEvent->FullEventName).ToLocalChecked();

     v8::Local<v8::Object> pRtnSyslogEventJS=Nan::New<v8::Object>();
     pRtnSyslogEventJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(OccurDate),Local<v8::Value>(OccurDateValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(OccurTime),Local<v8::Value>(OccurTimeValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EventName),Local<v8::Value>(EventNameValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EventNum),Local<v8::Value>(EventNumValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EventType),Local<v8::Value>(EventTypeValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(ProcessFlag),Local<v8::Value>(ProcessFlagValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(WarningLevel),Local<v8::Value>(WarningLevelValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(EventDealDes),Local<v8::Value>(EventDealDesValue));
     pRtnSyslogEventJS->Set(Local<v8::Value>(FullEventName),Local<v8::Value>(FullEventNameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSyslogEventJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTradeDayChangeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeDayChangeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeDayChangeField *pRspQryTradeDayChange =(CShfeFtdcRspQryTradeDayChangeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ChangeType=Nan::New<v8::String>("ChangeType").ToLocalChecked();
     v8::Local<v8::String> ChangeTypeValue=Nan::New(pRspQryTradeDayChange->ChangeType).ToLocalChecked();
     v8::Local<v8::String> OldDate=Nan::New<v8::String>("OldDate").ToLocalChecked();
     v8::Local<v8::String> OldDateValue=Nan::New(pRspQryTradeDayChange->OldDate).ToLocalChecked();
     v8::Local<v8::String> NewDate=Nan::New<v8::String>("NewDate").ToLocalChecked();
     v8::Local<v8::String> NewDateValue=Nan::New(pRspQryTradeDayChange->NewDate).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTradeDayChangeJS=Nan::New<v8::Object>();
     pRspQryTradeDayChangeJS->Set(Local<v8::Value>(ChangeType),Local<v8::Value>(ChangeTypeValue));
     pRspQryTradeDayChangeJS->Set(Local<v8::Value>(OldDate),Local<v8::Value>(OldDateValue));
     pRspQryTradeDayChangeJS->Set(Local<v8::Value>(NewDate),Local<v8::Value>(NewDateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeDayChangeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryWebAppInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryWebAppInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryWebAppInfoField *pRspQryWebAppInfo =(CShfeFtdcRspQryWebAppInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryWebAppInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryWebAppInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryWebAppInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> AppName=Nan::New<v8::String>("AppName").ToLocalChecked();
     v8::Local<v8::String> AppNameValue=Nan::New(pRspQryWebAppInfo->AppName).ToLocalChecked();
     v8::Local<v8::String> Status=Nan::New<v8::String>("Status").ToLocalChecked();
     v8::Local<v8::String> StatusValue=Nan::New(pRspQryWebAppInfo->Status).ToLocalChecked();
     v8::Local<v8::String> Desc=Nan::New<v8::String>("Desc").ToLocalChecked();
     v8::Local<v8::String> DescValue=Nan::New(pRspQryWebAppInfo->Desc).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRspQryWebAppInfo->StartTime).ToLocalChecked();
     v8::Local<v8::String> ServletNum=Nan::New<v8::String>("ServletNum").ToLocalChecked();
     v8::Local<v8::String> ServletNumValue=Nan::New(pRspQryWebAppInfo->ServletNum).ToLocalChecked();
     v8::Local<v8::String> ProcessTime=Nan::New<v8::String>("ProcessTime").ToLocalChecked();
     v8::Local<v8::String> ProcessTimeValue=Nan::New(pRspQryWebAppInfo->ProcessTime).ToLocalChecked();
     v8::Local<v8::String> RequestNum=Nan::New<v8::String>("RequestNum").ToLocalChecked();
     v8::Local<v8::String> RequestNumValue=Nan::New(pRspQryWebAppInfo->RequestNum).ToLocalChecked();
     v8::Local<v8::String> ErrorNum=Nan::New<v8::String>("ErrorNum").ToLocalChecked();
     v8::Local<v8::String> ErrorNumValue=Nan::New(pRspQryWebAppInfo->ErrorNum).ToLocalChecked();
     v8::Local<v8::String> SessionSize=Nan::New<v8::String>("SessionSize").ToLocalChecked();
     v8::Local<v8::String> SessionSizeValue=Nan::New(pRspQryWebAppInfo->SessionSize).ToLocalChecked();
     v8::Local<v8::String> TimeOut=Nan::New<v8::String>("TimeOut").ToLocalChecked();
     v8::Local<v8::String> TimeOutValue=Nan::New(pRspQryWebAppInfo->TimeOut).ToLocalChecked();
     v8::Local<v8::String> JDBCUsage=Nan::New<v8::String>("JDBCUsage").ToLocalChecked();
     v8::Local<v8::String> JDBCUsageValue=Nan::New(pRspQryWebAppInfo->JDBCUsage).ToLocalChecked();
     v8::Local<v8::String> JSPNum=Nan::New<v8::String>("JSPNum").ToLocalChecked();
     v8::Local<v8::String> JSPNumValue=Nan::New(pRspQryWebAppInfo->JSPNum).ToLocalChecked();
     v8::Local<v8::Object> pRspQryWebAppInfoJS=Nan::New<v8::Object>();
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(AppName),Local<v8::Value>(AppNameValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(Status),Local<v8::Value>(StatusValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(Desc),Local<v8::Value>(DescValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(ServletNum),Local<v8::Value>(ServletNumValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(ProcessTime),Local<v8::Value>(ProcessTimeValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(RequestNum),Local<v8::Value>(RequestNumValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(ErrorNum),Local<v8::Value>(ErrorNumValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(SessionSize),Local<v8::Value>(SessionSizeValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(TimeOut),Local<v8::Value>(TimeOutValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(JDBCUsage),Local<v8::Value>(JDBCUsageValue));
     pRspQryWebAppInfoJS->Set(Local<v8::Value>(JSPNum),Local<v8::Value>(JSPNumValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryWebAppInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnWebAppInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnWebAppInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnWebAppInfoField *pRtnWebAppInfo =(CShfeFtdcRtnWebAppInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnWebAppInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnWebAppInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnWebAppInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> AppName=Nan::New<v8::String>("AppName").ToLocalChecked();
     v8::Local<v8::String> AppNameValue=Nan::New(pRtnWebAppInfo->AppName).ToLocalChecked();
     v8::Local<v8::String> Status=Nan::New<v8::String>("Status").ToLocalChecked();
     v8::Local<v8::String> StatusValue=Nan::New(pRtnWebAppInfo->Status).ToLocalChecked();
     v8::Local<v8::String> Desc=Nan::New<v8::String>("Desc").ToLocalChecked();
     v8::Local<v8::String> DescValue=Nan::New(pRtnWebAppInfo->Desc).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRtnWebAppInfo->StartTime).ToLocalChecked();
     v8::Local<v8::String> ServletNum=Nan::New<v8::String>("ServletNum").ToLocalChecked();
     v8::Local<v8::String> ServletNumValue=Nan::New(pRtnWebAppInfo->ServletNum).ToLocalChecked();
     v8::Local<v8::String> ProcessTime=Nan::New<v8::String>("ProcessTime").ToLocalChecked();
     v8::Local<v8::String> ProcessTimeValue=Nan::New(pRtnWebAppInfo->ProcessTime).ToLocalChecked();
     v8::Local<v8::String> RequestNum=Nan::New<v8::String>("RequestNum").ToLocalChecked();
     v8::Local<v8::String> RequestNumValue=Nan::New(pRtnWebAppInfo->RequestNum).ToLocalChecked();
     v8::Local<v8::String> ErrorNum=Nan::New<v8::String>("ErrorNum").ToLocalChecked();
     v8::Local<v8::String> ErrorNumValue=Nan::New(pRtnWebAppInfo->ErrorNum).ToLocalChecked();
     v8::Local<v8::String> SessionSize=Nan::New<v8::String>("SessionSize").ToLocalChecked();
     v8::Local<v8::String> SessionSizeValue=Nan::New(pRtnWebAppInfo->SessionSize).ToLocalChecked();
     v8::Local<v8::String> TimeOut=Nan::New<v8::String>("TimeOut").ToLocalChecked();
     v8::Local<v8::String> TimeOutValue=Nan::New(pRtnWebAppInfo->TimeOut).ToLocalChecked();
     v8::Local<v8::String> JDBCUsage=Nan::New<v8::String>("JDBCUsage").ToLocalChecked();
     v8::Local<v8::String> JDBCUsageValue=Nan::New(pRtnWebAppInfo->JDBCUsage).ToLocalChecked();
     v8::Local<v8::String> JSPNum=Nan::New<v8::String>("JSPNum").ToLocalChecked();
     v8::Local<v8::String> JSPNumValue=Nan::New(pRtnWebAppInfo->JSPNum).ToLocalChecked();

     v8::Local<v8::Object> pRtnWebAppInfoJS=Nan::New<v8::Object>();
     pRtnWebAppInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(AppName),Local<v8::Value>(AppNameValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(Status),Local<v8::Value>(StatusValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(Desc),Local<v8::Value>(DescValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(ServletNum),Local<v8::Value>(ServletNumValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(ProcessTime),Local<v8::Value>(ProcessTimeValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(RequestNum),Local<v8::Value>(RequestNumValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(ErrorNum),Local<v8::Value>(ErrorNumValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(SessionSize),Local<v8::Value>(SessionSizeValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(TimeOut),Local<v8::Value>(TimeOutValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(JDBCUsage),Local<v8::Value>(JDBCUsageValue));
     pRtnWebAppInfoJS->Set(Local<v8::Value>(JSPNum),Local<v8::Value>(JSPNumValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnWebAppInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryServletInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryServletInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryServletInfoField *pRspQryServletInfo =(CShfeFtdcRspQryServletInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryServletInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryServletInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryServletInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryServletInfo->Name).ToLocalChecked();
     v8::Local<v8::String> LoadTime=Nan::New<v8::String>("LoadTime").ToLocalChecked();
     v8::Local<v8::Integer> LoadTimeValue=Nan::New<v8::Integer>(pRspQryServletInfo->LoadTime);
     v8::Local<v8::String> RequestNum=Nan::New<v8::String>("RequestNum").ToLocalChecked();
     v8::Local<v8::Number> RequestNumValue=Nan::New<v8::Number>(pRspQryServletInfo->RequestNum);
     v8::Local<v8::String> RequestErrNum=Nan::New<v8::String>("RequestErrNum").ToLocalChecked();
     v8::Local<v8::Number> RequestErrNumValue=Nan::New<v8::Number>(pRspQryServletInfo->RequestErrNum);
     v8::Local<v8::String> ProcessTime=Nan::New<v8::String>("ProcessTime").ToLocalChecked();
     v8::Local<v8::Number> ProcessTimeValue=Nan::New<v8::Number>(pRspQryServletInfo->ProcessTime);
     v8::Local<v8::String> MixTime=Nan::New<v8::String>("MixTime").ToLocalChecked();
     v8::Local<v8::Integer> MixTimeValue=Nan::New<v8::Integer>(pRspQryServletInfo->MixTime);
     v8::Local<v8::String> MaxTime=Nan::New<v8::String>("MaxTime").ToLocalChecked();
     v8::Local<v8::Integer> MaxTimeValue=Nan::New<v8::Integer>(pRspQryServletInfo->MaxTime);
     v8::Local<v8::Object> pRspQryServletInfoJS=Nan::New<v8::Object>();
     pRspQryServletInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(LoadTime),Local<v8::Value>(LoadTimeValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(RequestNum),Local<v8::Value>(RequestNumValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(RequestErrNum),Local<v8::Value>(RequestErrNumValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(ProcessTime),Local<v8::Value>(ProcessTimeValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(MixTime),Local<v8::Value>(MixTimeValue));
     pRspQryServletInfoJS->Set(Local<v8::Value>(MaxTime),Local<v8::Value>(MaxTimeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryServletInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnServletInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnServletInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnServletInfoField *pRtnServletInfo =(CShfeFtdcRtnServletInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnServletInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnServletInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnServletInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnServletInfo->Name).ToLocalChecked();
     v8::Local<v8::String> LoadTime=Nan::New<v8::String>("LoadTime").ToLocalChecked();
     v8::Local<v8::Integer> LoadTimeValue=Nan::New<v8::Integer>(pRtnServletInfo->LoadTime);
     v8::Local<v8::String> RequestNum=Nan::New<v8::String>("RequestNum").ToLocalChecked();
     v8::Local<v8::Number> RequestNumValue=Nan::New<v8::Number>(pRtnServletInfo->RequestNum);
     v8::Local<v8::String> RequestErrNum=Nan::New<v8::String>("RequestErrNum").ToLocalChecked();
     v8::Local<v8::Number> RequestErrNumValue=Nan::New<v8::Number>(pRtnServletInfo->RequestErrNum);
     v8::Local<v8::String> ProcessTime=Nan::New<v8::String>("ProcessTime").ToLocalChecked();
     v8::Local<v8::Number> ProcessTimeValue=Nan::New<v8::Number>(pRtnServletInfo->ProcessTime);
     v8::Local<v8::String> MixTime=Nan::New<v8::String>("MixTime").ToLocalChecked();
     v8::Local<v8::Integer> MixTimeValue=Nan::New<v8::Integer>(pRtnServletInfo->MixTime);
     v8::Local<v8::String> MaxTime=Nan::New<v8::String>("MaxTime").ToLocalChecked();
     v8::Local<v8::Integer> MaxTimeValue=Nan::New<v8::Integer>(pRtnServletInfo->MaxTime);

     v8::Local<v8::Object> pRtnServletInfoJS=Nan::New<v8::Object>();
     pRtnServletInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(LoadTime),Local<v8::Value>(LoadTimeValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(RequestNum),Local<v8::Value>(RequestNumValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(RequestErrNum),Local<v8::Value>(RequestErrNumValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(ProcessTime),Local<v8::Value>(ProcessTimeValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(MixTime),Local<v8::Value>(MixTimeValue));
     pRtnServletInfoJS->Set(Local<v8::Value>(MaxTime),Local<v8::Value>(MaxTimeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnServletInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFileInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFileInfoField *pRspQryFileInfo =(CShfeFtdcRspQryFileInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryFileInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryFileInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryFileInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> PathName=Nan::New<v8::String>("PathName").ToLocalChecked();
     v8::Local<v8::String> PathNameValue=Nan::New(pRspQryFileInfo->PathName).ToLocalChecked();
     v8::Local<v8::String> FileSize=Nan::New<v8::String>("FileSize").ToLocalChecked();
     v8::Local<v8::String> FileSizeValue=Nan::New(pRspQryFileInfo->FileSize).ToLocalChecked();
     v8::Local<v8::String> LastModDate=Nan::New<v8::String>("LastModDate").ToLocalChecked();
     v8::Local<v8::String> LastModDateValue=Nan::New(pRspQryFileInfo->LastModDate).ToLocalChecked();
     v8::Local<v8::String> FileType=Nan::New<v8::String>("FileType").ToLocalChecked();
     v8::Local<v8::String> FileTypeValue=Nan::New(pRspQryFileInfo->FileType).ToLocalChecked();
     v8::Local<v8::Object> pRspQryFileInfoJS=Nan::New<v8::Object>();
     pRspQryFileInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(PathName),Local<v8::Value>(PathNameValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(FileSize),Local<v8::Value>(FileSizeValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(LastModDate),Local<v8::Value>(LastModDateValue));
     pRspQryFileInfoJS->Set(Local<v8::Value>(FileType),Local<v8::Value>(FileTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFileInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFileInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFileInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFileInfoField *pRtnFileInfo =(CShfeFtdcRtnFileInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnFileInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnFileInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnFileInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> PathName=Nan::New<v8::String>("PathName").ToLocalChecked();
     v8::Local<v8::String> PathNameValue=Nan::New(pRtnFileInfo->PathName).ToLocalChecked();
     v8::Local<v8::String> FileSize=Nan::New<v8::String>("FileSize").ToLocalChecked();
     v8::Local<v8::String> FileSizeValue=Nan::New(pRtnFileInfo->FileSize).ToLocalChecked();
     v8::Local<v8::String> LastModDate=Nan::New<v8::String>("LastModDate").ToLocalChecked();
     v8::Local<v8::String> LastModDateValue=Nan::New(pRtnFileInfo->LastModDate).ToLocalChecked();
     v8::Local<v8::String> FileType=Nan::New<v8::String>("FileType").ToLocalChecked();
     v8::Local<v8::String> FileTypeValue=Nan::New(pRtnFileInfo->FileType).ToLocalChecked();

     v8::Local<v8::Object> pRtnFileInfoJS=Nan::New<v8::Object>();
     pRtnFileInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(PathName),Local<v8::Value>(PathNameValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(FileSize),Local<v8::Value>(FileSizeValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(LastModDate),Local<v8::Value>(LastModDateValue));
     pRtnFileInfoJS->Set(Local<v8::Value>(FileType),Local<v8::Value>(FileTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFileInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySessionInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySessionInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySessionInfoField *pRspQrySessionInfo =(CShfeFtdcRspQrySessionInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQrySessionInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQrySessionInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQrySessionInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> SessionID=Nan::New<v8::String>("SessionID").ToLocalChecked();
     v8::Local<v8::String> SessionIDValue=Nan::New(pRspQrySessionInfo->SessionID).ToLocalChecked();
     v8::Local<v8::String> SessionName=Nan::New<v8::String>("SessionName").ToLocalChecked();
     v8::Local<v8::String> SessionNameValue=Nan::New(pRspQrySessionInfo->SessionName).ToLocalChecked();
     v8::Local<v8::String> RemoteIP=Nan::New<v8::String>("RemoteIP").ToLocalChecked();
     v8::Local<v8::String> RemoteIPValue=Nan::New(pRspQrySessionInfo->RemoteIP).ToLocalChecked();
     v8::Local<v8::String> BeginTime=Nan::New<v8::String>("BeginTime").ToLocalChecked();
     v8::Local<v8::String> BeginTimeValue=Nan::New(pRspQrySessionInfo->BeginTime).ToLocalChecked();
     v8::Local<v8::String> LatestTime=Nan::New<v8::String>("LatestTime").ToLocalChecked();
     v8::Local<v8::String> LatestTimeValue=Nan::New(pRspQrySessionInfo->LatestTime).ToLocalChecked();
     v8::Local<v8::String> MaxIdleTime=Nan::New<v8::String>("MaxIdleTime").ToLocalChecked();
     v8::Local<v8::Integer> MaxIdleTimeValue=Nan::New<v8::Integer>(pRspQrySessionInfo->MaxIdleTime);
     v8::Local<v8::Object> pRspQrySessionInfoJS=Nan::New<v8::Object>();
     pRspQrySessionInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(SessionID),Local<v8::Value>(SessionIDValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(SessionName),Local<v8::Value>(SessionNameValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(RemoteIP),Local<v8::Value>(RemoteIPValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(BeginTime),Local<v8::Value>(BeginTimeValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(LatestTime),Local<v8::Value>(LatestTimeValue));
     pRspQrySessionInfoJS->Set(Local<v8::Value>(MaxIdleTime),Local<v8::Value>(MaxIdleTimeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySessionInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSessionInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSessionInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSessionInfoField *pRtnSessionInfo =(CShfeFtdcRtnSessionInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnSessionInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnSessionInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnSessionInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> SessionID=Nan::New<v8::String>("SessionID").ToLocalChecked();
     v8::Local<v8::String> SessionIDValue=Nan::New(pRtnSessionInfo->SessionID).ToLocalChecked();
     v8::Local<v8::String> SessionName=Nan::New<v8::String>("SessionName").ToLocalChecked();
     v8::Local<v8::String> SessionNameValue=Nan::New(pRtnSessionInfo->SessionName).ToLocalChecked();
     v8::Local<v8::String> RemoteIP=Nan::New<v8::String>("RemoteIP").ToLocalChecked();
     v8::Local<v8::String> RemoteIPValue=Nan::New(pRtnSessionInfo->RemoteIP).ToLocalChecked();
     v8::Local<v8::String> BeginTime=Nan::New<v8::String>("BeginTime").ToLocalChecked();
     v8::Local<v8::String> BeginTimeValue=Nan::New(pRtnSessionInfo->BeginTime).ToLocalChecked();
     v8::Local<v8::String> LatestTime=Nan::New<v8::String>("LatestTime").ToLocalChecked();
     v8::Local<v8::String> LatestTimeValue=Nan::New(pRtnSessionInfo->LatestTime).ToLocalChecked();
     v8::Local<v8::String> MaxIdleTime=Nan::New<v8::String>("MaxIdleTime").ToLocalChecked();
     v8::Local<v8::Integer> MaxIdleTimeValue=Nan::New<v8::Integer>(pRtnSessionInfo->MaxIdleTime);

     v8::Local<v8::Object> pRtnSessionInfoJS=Nan::New<v8::Object>();
     pRtnSessionInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(SessionID),Local<v8::Value>(SessionIDValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(SessionName),Local<v8::Value>(SessionNameValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(RemoteIP),Local<v8::Value>(RemoteIPValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(BeginTime),Local<v8::Value>(BeginTimeValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(LatestTime),Local<v8::Value>(LatestTimeValue));
     pRtnSessionInfoJS->Set(Local<v8::Value>(MaxIdleTime),Local<v8::Value>(MaxIdleTimeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSessionInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryJDBCInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryJDBCInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryJDBCInfoField *pRspQryJDBCInfo =(CShfeFtdcRspQryJDBCInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryJDBCInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryJDBCInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryJDBCInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> AppName=Nan::New<v8::String>("AppName").ToLocalChecked();
     v8::Local<v8::String> AppNameValue=Nan::New(pRspQryJDBCInfo->AppName).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryJDBCInfo->Name).ToLocalChecked();
     v8::Local<v8::String> Usage=Nan::New<v8::String>("Usage").ToLocalChecked();
     v8::Local<v8::Number> UsageValue=Nan::New<v8::Number>(pRspQryJDBCInfo->Usage);
     v8::Local<v8::String> ConnNumMax=Nan::New<v8::String>("ConnNumMax").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumMaxValue=Nan::New<v8::Integer>(pRspQryJDBCInfo->ConnNumMax);
     v8::Local<v8::String> ConnNumFree=Nan::New<v8::String>("ConnNumFree").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumFreeValue=Nan::New<v8::Integer>(pRspQryJDBCInfo->ConnNumFree);
     v8::Local<v8::String> ConnNumUnRU=Nan::New<v8::String>("ConnNumUnRU").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumUnRUValue=Nan::New<v8::Integer>(pRspQryJDBCInfo->ConnNumUnRU);
     v8::Local<v8::String> ConnNumRU=Nan::New<v8::String>("ConnNumRU").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumRUValue=Nan::New<v8::Integer>(pRspQryJDBCInfo->ConnNumRU);
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRspQryJDBCInfo->UserName).ToLocalChecked();
     v8::Local<v8::String> Type=Nan::New<v8::String>("Type").ToLocalChecked();
     v8::Local<v8::String> TypeValue=Nan::New(pRspQryJDBCInfo->Type).ToLocalChecked();
     v8::Local<v8::String> URL=Nan::New<v8::String>("URL").ToLocalChecked();
     v8::Local<v8::String> URLValue=Nan::New(pRspQryJDBCInfo->URL).ToLocalChecked();
     v8::Local<v8::Object> pRspQryJDBCInfoJS=Nan::New<v8::Object>();
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(AppName),Local<v8::Value>(AppNameValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(Usage),Local<v8::Value>(UsageValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(ConnNumMax),Local<v8::Value>(ConnNumMaxValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(ConnNumFree),Local<v8::Value>(ConnNumFreeValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(ConnNumUnRU),Local<v8::Value>(ConnNumUnRUValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(ConnNumRU),Local<v8::Value>(ConnNumRUValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(Type),Local<v8::Value>(TypeValue));
     pRspQryJDBCInfoJS->Set(Local<v8::Value>(URL),Local<v8::Value>(URLValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryJDBCInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnJDBCInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnJDBCInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnJDBCInfoField *pRtnJDBCInfo =(CShfeFtdcRtnJDBCInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnJDBCInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnJDBCInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnJDBCInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> AppName=Nan::New<v8::String>("AppName").ToLocalChecked();
     v8::Local<v8::String> AppNameValue=Nan::New(pRtnJDBCInfo->AppName).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnJDBCInfo->Name).ToLocalChecked();
     v8::Local<v8::String> Usage=Nan::New<v8::String>("Usage").ToLocalChecked();
     v8::Local<v8::Number> UsageValue=Nan::New<v8::Number>(pRtnJDBCInfo->Usage);
     v8::Local<v8::String> ConnNumMax=Nan::New<v8::String>("ConnNumMax").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumMaxValue=Nan::New<v8::Integer>(pRtnJDBCInfo->ConnNumMax);
     v8::Local<v8::String> ConnNumFree=Nan::New<v8::String>("ConnNumFree").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumFreeValue=Nan::New<v8::Integer>(pRtnJDBCInfo->ConnNumFree);
     v8::Local<v8::String> ConnNumUnRU=Nan::New<v8::String>("ConnNumUnRU").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumUnRUValue=Nan::New<v8::Integer>(pRtnJDBCInfo->ConnNumUnRU);
     v8::Local<v8::String> ConnNumRU=Nan::New<v8::String>("ConnNumRU").ToLocalChecked();
     v8::Local<v8::Integer> ConnNumRUValue=Nan::New<v8::Integer>(pRtnJDBCInfo->ConnNumRU);
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRtnJDBCInfo->UserName).ToLocalChecked();
     v8::Local<v8::String> Type=Nan::New<v8::String>("Type").ToLocalChecked();
     v8::Local<v8::String> TypeValue=Nan::New(pRtnJDBCInfo->Type).ToLocalChecked();
     v8::Local<v8::String> URL=Nan::New<v8::String>("URL").ToLocalChecked();
     v8::Local<v8::String> URLValue=Nan::New(pRtnJDBCInfo->URL).ToLocalChecked();

     v8::Local<v8::Object> pRtnJDBCInfoJS=Nan::New<v8::Object>();
     pRtnJDBCInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(AppName),Local<v8::Value>(AppNameValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(Usage),Local<v8::Value>(UsageValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(ConnNumMax),Local<v8::Value>(ConnNumMaxValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(ConnNumFree),Local<v8::Value>(ConnNumFreeValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(ConnNumUnRU),Local<v8::Value>(ConnNumUnRUValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(ConnNumRU),Local<v8::Value>(ConnNumRUValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(Type),Local<v8::Value>(TypeValue));
     pRtnJDBCInfoJS->Set(Local<v8::Value>(URL),Local<v8::Value>(URLValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnJDBCInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryThreadInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryThreadInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryThreadInfoField *pRspQryThreadInfo =(CShfeFtdcRspQryThreadInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryThreadInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryThreadInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryThreadInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryThreadInfo->Name).ToLocalChecked();
     v8::Local<v8::String> ThreadNum=Nan::New<v8::String>("ThreadNum").ToLocalChecked();
     v8::Local<v8::Integer> ThreadNumValue=Nan::New<v8::Integer>(pRspQryThreadInfo->ThreadNum);
     v8::Local<v8::String> ThreadStatus=Nan::New<v8::String>("ThreadStatus").ToLocalChecked();
     v8::Local<v8::String> ThreadStatusValue=Nan::New(pRspQryThreadInfo->ThreadStatus).ToLocalChecked();
     v8::Local<v8::String> InNative=Nan::New<v8::String>("InNative").ToLocalChecked();
     v8::Local<v8::Integer> InNativeValue=Nan::New<v8::Integer>(pRspQryThreadInfo->InNative);
     v8::Local<v8::String> Suspended=Nan::New<v8::String>("Suspended").ToLocalChecked();
     v8::Local<v8::String> SuspendedValue=Nan::New(pRspQryThreadInfo->Suspended).ToLocalChecked();
     v8::Local<v8::String> BlockCount=Nan::New<v8::String>("BlockCount").ToLocalChecked();
     v8::Local<v8::String> BlockCountValue=Nan::New(pRspQryThreadInfo->BlockCount).ToLocalChecked();
     v8::Local<v8::String> WaitCount=Nan::New<v8::String>("WaitCount").ToLocalChecked();
     v8::Local<v8::Integer> WaitCountValue=Nan::New<v8::Integer>(pRspQryThreadInfo->WaitCount);
     v8::Local<v8::String> CpuTime=Nan::New<v8::String>("CpuTime").ToLocalChecked();
     v8::Local<v8::Number> CpuTimeValue=Nan::New<v8::Number>(pRspQryThreadInfo->CpuTime);
     v8::Local<v8::String> UserTime=Nan::New<v8::String>("UserTime").ToLocalChecked();
     v8::Local<v8::Number> UserTimeValue=Nan::New<v8::Number>(pRspQryThreadInfo->UserTime);
     v8::Local<v8::Object> pRspQryThreadInfoJS=Nan::New<v8::Object>();
     pRspQryThreadInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(ThreadNum),Local<v8::Value>(ThreadNumValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(ThreadStatus),Local<v8::Value>(ThreadStatusValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(InNative),Local<v8::Value>(InNativeValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(Suspended),Local<v8::Value>(SuspendedValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(BlockCount),Local<v8::Value>(BlockCountValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(WaitCount),Local<v8::Value>(WaitCountValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(CpuTime),Local<v8::Value>(CpuTimeValue));
     pRspQryThreadInfoJS->Set(Local<v8::Value>(UserTime),Local<v8::Value>(UserTimeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryThreadInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnThreadInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnThreadInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnThreadInfoField *pRtnThreadInfo =(CShfeFtdcRtnThreadInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnThreadInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnThreadInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnThreadInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnThreadInfo->Name).ToLocalChecked();
     v8::Local<v8::String> ThreadNum=Nan::New<v8::String>("ThreadNum").ToLocalChecked();
     v8::Local<v8::Integer> ThreadNumValue=Nan::New<v8::Integer>(pRtnThreadInfo->ThreadNum);
     v8::Local<v8::String> ThreadStatus=Nan::New<v8::String>("ThreadStatus").ToLocalChecked();
     v8::Local<v8::String> ThreadStatusValue=Nan::New(pRtnThreadInfo->ThreadStatus).ToLocalChecked();
     v8::Local<v8::String> InNative=Nan::New<v8::String>("InNative").ToLocalChecked();
     v8::Local<v8::Integer> InNativeValue=Nan::New<v8::Integer>(pRtnThreadInfo->InNative);
     v8::Local<v8::String> Suspended=Nan::New<v8::String>("Suspended").ToLocalChecked();
     v8::Local<v8::String> SuspendedValue=Nan::New(pRtnThreadInfo->Suspended).ToLocalChecked();
     v8::Local<v8::String> BlockCount=Nan::New<v8::String>("BlockCount").ToLocalChecked();
     v8::Local<v8::String> BlockCountValue=Nan::New(pRtnThreadInfo->BlockCount).ToLocalChecked();
     v8::Local<v8::String> WaitCount=Nan::New<v8::String>("WaitCount").ToLocalChecked();
     v8::Local<v8::Integer> WaitCountValue=Nan::New<v8::Integer>(pRtnThreadInfo->WaitCount);
     v8::Local<v8::String> CpuTime=Nan::New<v8::String>("CpuTime").ToLocalChecked();
     v8::Local<v8::Number> CpuTimeValue=Nan::New<v8::Number>(pRtnThreadInfo->CpuTime);
     v8::Local<v8::String> UserTime=Nan::New<v8::String>("UserTime").ToLocalChecked();
     v8::Local<v8::Number> UserTimeValue=Nan::New<v8::Number>(pRtnThreadInfo->UserTime);

     v8::Local<v8::Object> pRtnThreadInfoJS=Nan::New<v8::Object>();
     pRtnThreadInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(ThreadNum),Local<v8::Value>(ThreadNumValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(ThreadStatus),Local<v8::Value>(ThreadStatusValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(InNative),Local<v8::Value>(InNativeValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(Suspended),Local<v8::Value>(SuspendedValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(BlockCount),Local<v8::Value>(BlockCountValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(WaitCount),Local<v8::Value>(WaitCountValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(CpuTime),Local<v8::Value>(CpuTimeValue));
     pRtnThreadInfoJS->Set(Local<v8::Value>(UserTime),Local<v8::Value>(UserTimeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnThreadInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryVMInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryVMInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryVMInfoField *pRspQryVMInfo =(CShfeFtdcRspQryVMInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryVMInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryVMInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryVMInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryVMInfo->Name).ToLocalChecked();
     v8::Local<v8::String> VmName=Nan::New<v8::String>("VmName").ToLocalChecked();
     v8::Local<v8::String> VmNameValue=Nan::New(pRspQryVMInfo->VmName).ToLocalChecked();
     v8::Local<v8::String> VmVendor=Nan::New<v8::String>("VmVendor").ToLocalChecked();
     v8::Local<v8::String> VmVendorValue=Nan::New(pRspQryVMInfo->VmVendor).ToLocalChecked();
     v8::Local<v8::String> VmVersion=Nan::New<v8::String>("VmVersion").ToLocalChecked();
     v8::Local<v8::String> VmVersionValue=Nan::New(pRspQryVMInfo->VmVersion).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRspQryVMInfo->StartTime).ToLocalChecked();
     v8::Local<v8::String> BootClassPath=Nan::New<v8::String>("BootClassPath").ToLocalChecked();
     v8::Local<v8::String> BootClassPathValue=Nan::New(pRspQryVMInfo->BootClassPath).ToLocalChecked();
     v8::Local<v8::String> ClassPath=Nan::New<v8::String>("ClassPath").ToLocalChecked();
     v8::Local<v8::String> ClassPathValue=Nan::New(pRspQryVMInfo->ClassPath).ToLocalChecked();
     v8::Local<v8::String> LibraryPath=Nan::New<v8::String>("LibraryPath").ToLocalChecked();
     v8::Local<v8::String> LibraryPathValue=Nan::New(pRspQryVMInfo->LibraryPath).ToLocalChecked();
     v8::Local<v8::String> Arguments=Nan::New<v8::String>("Arguments").ToLocalChecked();
     v8::Local<v8::String> ArgumentsValue=Nan::New(pRspQryVMInfo->Arguments).ToLocalChecked();
     v8::Local<v8::Object> pRspQryVMInfoJS=Nan::New<v8::Object>();
     pRspQryVMInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(VmName),Local<v8::Value>(VmNameValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(VmVendor),Local<v8::Value>(VmVendorValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(VmVersion),Local<v8::Value>(VmVersionValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(BootClassPath),Local<v8::Value>(BootClassPathValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(ClassPath),Local<v8::Value>(ClassPathValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(LibraryPath),Local<v8::Value>(LibraryPathValue));
     pRspQryVMInfoJS->Set(Local<v8::Value>(Arguments),Local<v8::Value>(ArgumentsValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryVMInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnVMInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnVMInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnVMInfoField *pRtnVMInfo =(CShfeFtdcRtnVMInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnVMInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnVMInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnVMInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnVMInfo->Name).ToLocalChecked();
     v8::Local<v8::String> VmName=Nan::New<v8::String>("VmName").ToLocalChecked();
     v8::Local<v8::String> VmNameValue=Nan::New(pRtnVMInfo->VmName).ToLocalChecked();
     v8::Local<v8::String> VmVendor=Nan::New<v8::String>("VmVendor").ToLocalChecked();
     v8::Local<v8::String> VmVendorValue=Nan::New(pRtnVMInfo->VmVendor).ToLocalChecked();
     v8::Local<v8::String> VmVersion=Nan::New<v8::String>("VmVersion").ToLocalChecked();
     v8::Local<v8::String> VmVersionValue=Nan::New(pRtnVMInfo->VmVersion).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRtnVMInfo->StartTime).ToLocalChecked();
     v8::Local<v8::String> BootClassPath=Nan::New<v8::String>("BootClassPath").ToLocalChecked();
     v8::Local<v8::String> BootClassPathValue=Nan::New(pRtnVMInfo->BootClassPath).ToLocalChecked();
     v8::Local<v8::String> ClassPath=Nan::New<v8::String>("ClassPath").ToLocalChecked();
     v8::Local<v8::String> ClassPathValue=Nan::New(pRtnVMInfo->ClassPath).ToLocalChecked();
     v8::Local<v8::String> LibraryPath=Nan::New<v8::String>("LibraryPath").ToLocalChecked();
     v8::Local<v8::String> LibraryPathValue=Nan::New(pRtnVMInfo->LibraryPath).ToLocalChecked();
     v8::Local<v8::String> Arguments=Nan::New<v8::String>("Arguments").ToLocalChecked();
     v8::Local<v8::String> ArgumentsValue=Nan::New(pRtnVMInfo->Arguments).ToLocalChecked();

     v8::Local<v8::Object> pRtnVMInfoJS=Nan::New<v8::Object>();
     pRtnVMInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(VmName),Local<v8::Value>(VmNameValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(VmVendor),Local<v8::Value>(VmVendorValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(VmVersion),Local<v8::Value>(VmVersionValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(BootClassPath),Local<v8::Value>(BootClassPathValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(ClassPath),Local<v8::Value>(ClassPathValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(LibraryPath),Local<v8::Value>(LibraryPathValue));
     pRtnVMInfoJS->Set(Local<v8::Value>(Arguments),Local<v8::Value>(ArgumentsValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnVMInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPropertyInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPropertyInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPropertyInfoField *pRspQryPropertyInfo =(CShfeFtdcRspQryPropertyInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryPropertyInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryPropertyInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryPropertyInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Property=Nan::New<v8::String>("Property").ToLocalChecked();
     v8::Local<v8::String> PropertyValue=Nan::New(pRspQryPropertyInfo->Property).ToLocalChecked();
     v8::Local<v8::String> ClipFlag=Nan::New<v8::String>("ClipFlag").ToLocalChecked();
     v8::Local<v8::Integer> ClipFlagValue=Nan::New<v8::Integer>(pRspQryPropertyInfo->ClipFlag);
     v8::Local<v8::String> Value=Nan::New<v8::String>("Value").ToLocalChecked();
     v8::Local<v8::String> ValueValue=Nan::New(pRspQryPropertyInfo->Value).ToLocalChecked();
     v8::Local<v8::Object> pRspQryPropertyInfoJS=Nan::New<v8::Object>();
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(Property),Local<v8::Value>(PropertyValue));
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(ClipFlag),Local<v8::Value>(ClipFlagValue));
     pRspQryPropertyInfoJS->Set(Local<v8::Value>(Value),Local<v8::Value>(ValueValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPropertyInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPropertyInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPropertyInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPropertyInfoField *pRtnPropertyInfo =(CShfeFtdcRtnPropertyInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnPropertyInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnPropertyInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnPropertyInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Property=Nan::New<v8::String>("Property").ToLocalChecked();
     v8::Local<v8::String> PropertyValue=Nan::New(pRtnPropertyInfo->Property).ToLocalChecked();
     v8::Local<v8::String> ClipFlag=Nan::New<v8::String>("ClipFlag").ToLocalChecked();
     v8::Local<v8::Integer> ClipFlagValue=Nan::New<v8::Integer>(pRtnPropertyInfo->ClipFlag);
     v8::Local<v8::String> Value=Nan::New<v8::String>("Value").ToLocalChecked();
     v8::Local<v8::String> ValueValue=Nan::New(pRtnPropertyInfo->Value).ToLocalChecked();

     v8::Local<v8::Object> pRtnPropertyInfoJS=Nan::New<v8::Object>();
     pRtnPropertyInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnPropertyInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnPropertyInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnPropertyInfoJS->Set(Local<v8::Value>(Property),Local<v8::Value>(PropertyValue));
     pRtnPropertyInfoJS->Set(Local<v8::Value>(ClipFlag),Local<v8::Value>(ClipFlagValue));
     pRtnPropertyInfoJS->Set(Local<v8::Value>(Value),Local<v8::Value>(ValueValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPropertyInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryMemPoolInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemPoolInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMemPoolInfoField *pRspQryMemPoolInfo =(CShfeFtdcRspQryMemPoolInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryMemPoolInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryMemPoolInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryMemPoolInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> PoolName=Nan::New<v8::String>("PoolName").ToLocalChecked();
     v8::Local<v8::String> PoolNameValue=Nan::New(pRspQryMemPoolInfo->PoolName).ToLocalChecked();
     v8::Local<v8::String> Usage=Nan::New<v8::String>("Usage").ToLocalChecked();
     v8::Local<v8::String> UsageValue=Nan::New(pRspQryMemPoolInfo->Usage).ToLocalChecked();
     v8::Local<v8::String> committedbytes=Nan::New<v8::String>("committedbytes").ToLocalChecked();
     v8::Local<v8::String> committedbytesValue=Nan::New(pRspQryMemPoolInfo->committedbytes).ToLocalChecked();
     v8::Local<v8::String> initbytes=Nan::New<v8::String>("initbytes").ToLocalChecked();
     v8::Local<v8::String> initbytesValue=Nan::New(pRspQryMemPoolInfo->initbytes).ToLocalChecked();
     v8::Local<v8::String> maxbytes=Nan::New<v8::String>("maxbytes").ToLocalChecked();
     v8::Local<v8::String> maxbytesValue=Nan::New(pRspQryMemPoolInfo->maxbytes).ToLocalChecked();
     v8::Local<v8::String> usedbytes=Nan::New<v8::String>("usedbytes").ToLocalChecked();
     v8::Local<v8::String> usedbytesValue=Nan::New(pRspQryMemPoolInfo->usedbytes).ToLocalChecked();
     v8::Local<v8::String> Type=Nan::New<v8::String>("Type").ToLocalChecked();
     v8::Local<v8::String> TypeValue=Nan::New(pRspQryMemPoolInfo->Type).ToLocalChecked();
     v8::Local<v8::Object> pRspQryMemPoolInfoJS=Nan::New<v8::Object>();
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(PoolName),Local<v8::Value>(PoolNameValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(Usage),Local<v8::Value>(UsageValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(committedbytes),Local<v8::Value>(committedbytesValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(initbytes),Local<v8::Value>(initbytesValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(maxbytes),Local<v8::Value>(maxbytesValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(usedbytes),Local<v8::Value>(usedbytesValue));
     pRspQryMemPoolInfoJS->Set(Local<v8::Value>(Type),Local<v8::Value>(TypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMemPoolInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMemPoolInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMemPoolInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMemPoolInfoField *pRtnMemPoolInfo =(CShfeFtdcRtnMemPoolInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnMemPoolInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnMemPoolInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnMemPoolInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> PoolName=Nan::New<v8::String>("PoolName").ToLocalChecked();
     v8::Local<v8::String> PoolNameValue=Nan::New(pRtnMemPoolInfo->PoolName).ToLocalChecked();
     v8::Local<v8::String> Usage=Nan::New<v8::String>("Usage").ToLocalChecked();
     v8::Local<v8::String> UsageValue=Nan::New(pRtnMemPoolInfo->Usage).ToLocalChecked();
     v8::Local<v8::String> committedbytes=Nan::New<v8::String>("committedbytes").ToLocalChecked();
     v8::Local<v8::String> committedbytesValue=Nan::New(pRtnMemPoolInfo->committedbytes).ToLocalChecked();
     v8::Local<v8::String> initbytes=Nan::New<v8::String>("initbytes").ToLocalChecked();
     v8::Local<v8::String> initbytesValue=Nan::New(pRtnMemPoolInfo->initbytes).ToLocalChecked();
     v8::Local<v8::String> maxbytes=Nan::New<v8::String>("maxbytes").ToLocalChecked();
     v8::Local<v8::String> maxbytesValue=Nan::New(pRtnMemPoolInfo->maxbytes).ToLocalChecked();
     v8::Local<v8::String> usedbytes=Nan::New<v8::String>("usedbytes").ToLocalChecked();
     v8::Local<v8::String> usedbytesValue=Nan::New(pRtnMemPoolInfo->usedbytes).ToLocalChecked();
     v8::Local<v8::String> Type=Nan::New<v8::String>("Type").ToLocalChecked();
     v8::Local<v8::String> TypeValue=Nan::New(pRtnMemPoolInfo->Type).ToLocalChecked();

     v8::Local<v8::Object> pRtnMemPoolInfoJS=Nan::New<v8::Object>();
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(PoolName),Local<v8::Value>(PoolNameValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(Usage),Local<v8::Value>(UsageValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(committedbytes),Local<v8::Value>(committedbytesValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(initbytes),Local<v8::Value>(initbytesValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(maxbytes),Local<v8::Value>(maxbytesValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(usedbytes),Local<v8::Value>(usedbytesValue));
     pRtnMemPoolInfoJS->Set(Local<v8::Value>(Type),Local<v8::Value>(TypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMemPoolInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFileContentInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileContentInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFileContentInfoField *pRspQryFileContentInfo =(CShfeFtdcRspQryFileContentInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryFileContentInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryFileContentInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryFileContentInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FileName=Nan::New<v8::String>("FileName").ToLocalChecked();
     v8::Local<v8::String> FileNameValue=Nan::New(pRspQryFileContentInfo->FileName).ToLocalChecked();
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRspQryFileContentInfo->FileContent).ToLocalChecked();
     v8::Local<v8::Object> pRspQryFileContentInfoJS=Nan::New<v8::Object>();
     pRspQryFileContentInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryFileContentInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryFileContentInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryFileContentInfoJS->Set(Local<v8::Value>(FileName),Local<v8::Value>(FileNameValue));
     pRspQryFileContentInfoJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFileContentInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFileContentInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFileContentInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFileContentInfoField *pRtnFileContentInfo =(CShfeFtdcRtnFileContentInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnFileContentInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnFileContentInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnFileContentInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> FileName=Nan::New<v8::String>("FileName").ToLocalChecked();
     v8::Local<v8::String> FileNameValue=Nan::New(pRtnFileContentInfo->FileName).ToLocalChecked();
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRtnFileContentInfo->FileContent).ToLocalChecked();

     v8::Local<v8::Object> pRtnFileContentInfoJS=Nan::New<v8::Object>();
     pRtnFileContentInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnFileContentInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnFileContentInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnFileContentInfoJS->Set(Local<v8::Value>(FileName),Local<v8::Value>(FileNameValue));
     pRtnFileContentInfoJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFileContentInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryConnectionInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryConnectionInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryConnectionInfoField *pRspQryConnectionInfo =(CShfeFtdcRspQryConnectionInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryConnectionInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryConnectionInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryConnectionInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ServiceName=Nan::New<v8::String>("ServiceName").ToLocalChecked();
     v8::Local<v8::String> ServiceNameValue=Nan::New(pRspQryConnectionInfo->ServiceName).ToLocalChecked();
     v8::Local<v8::String> Stage=Nan::New<v8::String>("Stage").ToLocalChecked();
     v8::Local<v8::String> StageValue=Nan::New(pRspQryConnectionInfo->Stage).ToLocalChecked();
     v8::Local<v8::String> RequestCount=Nan::New<v8::String>("RequestCount").ToLocalChecked();
     v8::Local<v8::Number> RequestCountValue=Nan::New<v8::Number>(pRspQryConnectionInfo->RequestCount);
     v8::Local<v8::String> ErrorCount=Nan::New<v8::String>("ErrorCount").ToLocalChecked();
     v8::Local<v8::Number> ErrorCountValue=Nan::New<v8::Number>(pRspQryConnectionInfo->ErrorCount);
     v8::Local<v8::String> ProcTime=Nan::New<v8::String>("ProcTime").ToLocalChecked();
     v8::Local<v8::Number> ProcTimeValue=Nan::New<v8::Number>(pRspQryConnectionInfo->ProcTime);
     v8::Local<v8::String> BytesReceived=Nan::New<v8::String>("BytesReceived").ToLocalChecked();
     v8::Local<v8::Number> BytesReceivedValue=Nan::New<v8::Number>(pRspQryConnectionInfo->BytesReceived);
     v8::Local<v8::String> BytesSent=Nan::New<v8::String>("BytesSent").ToLocalChecked();
     v8::Local<v8::Number> BytesSentValue=Nan::New<v8::Number>(pRspQryConnectionInfo->BytesSent);
     v8::Local<v8::String> RemoteIP=Nan::New<v8::String>("RemoteIP").ToLocalChecked();
     v8::Local<v8::String> RemoteIPValue=Nan::New(pRspQryConnectionInfo->RemoteIP).ToLocalChecked();
     v8::Local<v8::String> MaxAccessURI=Nan::New<v8::String>("MaxAccessURI").ToLocalChecked();
     v8::Local<v8::String> MaxAccessURIValue=Nan::New(pRspQryConnectionInfo->MaxAccessURI).ToLocalChecked();
     v8::Local<v8::Object> pRspQryConnectionInfoJS=Nan::New<v8::Object>();
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(ServiceName),Local<v8::Value>(ServiceNameValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(Stage),Local<v8::Value>(StageValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(RequestCount),Local<v8::Value>(RequestCountValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(ErrorCount),Local<v8::Value>(ErrorCountValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(ProcTime),Local<v8::Value>(ProcTimeValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(BytesReceived),Local<v8::Value>(BytesReceivedValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(BytesSent),Local<v8::Value>(BytesSentValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(RemoteIP),Local<v8::Value>(RemoteIPValue));
     pRspQryConnectionInfoJS->Set(Local<v8::Value>(MaxAccessURI),Local<v8::Value>(MaxAccessURIValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryConnectionInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnConnectionInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnConnectionInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnConnectionInfoField *pRtnConnectionInfo =(CShfeFtdcRtnConnectionInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnConnectionInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnConnectionInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnConnectionInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ServiceName=Nan::New<v8::String>("ServiceName").ToLocalChecked();
     v8::Local<v8::String> ServiceNameValue=Nan::New(pRtnConnectionInfo->ServiceName).ToLocalChecked();
     v8::Local<v8::String> Stage=Nan::New<v8::String>("Stage").ToLocalChecked();
     v8::Local<v8::String> StageValue=Nan::New(pRtnConnectionInfo->Stage).ToLocalChecked();
     v8::Local<v8::String> RequestCount=Nan::New<v8::String>("RequestCount").ToLocalChecked();
     v8::Local<v8::Number> RequestCountValue=Nan::New<v8::Number>(pRtnConnectionInfo->RequestCount);
     v8::Local<v8::String> ErrorCount=Nan::New<v8::String>("ErrorCount").ToLocalChecked();
     v8::Local<v8::Number> ErrorCountValue=Nan::New<v8::Number>(pRtnConnectionInfo->ErrorCount);
     v8::Local<v8::String> ProcTime=Nan::New<v8::String>("ProcTime").ToLocalChecked();
     v8::Local<v8::Number> ProcTimeValue=Nan::New<v8::Number>(pRtnConnectionInfo->ProcTime);
     v8::Local<v8::String> BytesReceived=Nan::New<v8::String>("BytesReceived").ToLocalChecked();
     v8::Local<v8::Number> BytesReceivedValue=Nan::New<v8::Number>(pRtnConnectionInfo->BytesReceived);
     v8::Local<v8::String> BytesSent=Nan::New<v8::String>("BytesSent").ToLocalChecked();
     v8::Local<v8::Number> BytesSentValue=Nan::New<v8::Number>(pRtnConnectionInfo->BytesSent);
     v8::Local<v8::String> RemoteIP=Nan::New<v8::String>("RemoteIP").ToLocalChecked();
     v8::Local<v8::String> RemoteIPValue=Nan::New(pRtnConnectionInfo->RemoteIP).ToLocalChecked();
     v8::Local<v8::String> MaxAccessURI=Nan::New<v8::String>("MaxAccessURI").ToLocalChecked();
     v8::Local<v8::String> MaxAccessURIValue=Nan::New(pRtnConnectionInfo->MaxAccessURI).ToLocalChecked();

     v8::Local<v8::Object> pRtnConnectionInfoJS=Nan::New<v8::Object>();
     pRtnConnectionInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(ServiceName),Local<v8::Value>(ServiceNameValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(Stage),Local<v8::Value>(StageValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(RequestCount),Local<v8::Value>(RequestCountValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(ErrorCount),Local<v8::Value>(ErrorCountValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(ProcTime),Local<v8::Value>(ProcTimeValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(BytesReceived),Local<v8::Value>(BytesReceivedValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(BytesSent),Local<v8::Value>(BytesSentValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(RemoteIP),Local<v8::Value>(RemoteIPValue));
     pRtnConnectionInfoJS->Set(Local<v8::Value>(MaxAccessURI),Local<v8::Value>(MaxAccessURIValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnConnectionInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryConnectorInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryConnectorInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryConnectorInfoField *pRspQryConnectorInfo =(CShfeFtdcRspQryConnectorInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryConnectorInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryConnectorInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryConnectorInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryConnectorInfo->Name).ToLocalChecked();
     v8::Local<v8::String> ThreadsCount=Nan::New<v8::String>("ThreadsCount").ToLocalChecked();
     v8::Local<v8::String> ThreadsCountValue=Nan::New(pRspQryConnectorInfo->ThreadsCount).ToLocalChecked();
     v8::Local<v8::String> BusyThreadsCount=Nan::New<v8::String>("BusyThreadsCount").ToLocalChecked();
     v8::Local<v8::String> BusyThreadsCountValue=Nan::New(pRspQryConnectorInfo->BusyThreadsCount).ToLocalChecked();
     v8::Local<v8::String> MaxThreads=Nan::New<v8::String>("MaxThreads").ToLocalChecked();
     v8::Local<v8::String> MaxThreadsValue=Nan::New(pRspQryConnectorInfo->MaxThreads).ToLocalChecked();
     v8::Local<v8::String> MaxSpareThreads=Nan::New<v8::String>("MaxSpareThreads").ToLocalChecked();
     v8::Local<v8::String> MaxSpareThreadsValue=Nan::New(pRspQryConnectorInfo->MaxSpareThreads).ToLocalChecked();
     v8::Local<v8::String> MinSpareThreads=Nan::New<v8::String>("MinSpareThreads").ToLocalChecked();
     v8::Local<v8::String> MinSpareThreadsValue=Nan::New(pRspQryConnectorInfo->MinSpareThreads).ToLocalChecked();
     v8::Local<v8::String> MaxTime=Nan::New<v8::String>("MaxTime").ToLocalChecked();
     v8::Local<v8::String> MaxTimeValue=Nan::New(pRspQryConnectorInfo->MaxTime).ToLocalChecked();
     v8::Local<v8::String> MaxProcTime=Nan::New<v8::String>("MaxProcTime").ToLocalChecked();
     v8::Local<v8::String> MaxProcTimeValue=Nan::New(pRspQryConnectorInfo->MaxProcTime).ToLocalChecked();
     v8::Local<v8::String> RequestCount=Nan::New<v8::String>("RequestCount").ToLocalChecked();
     v8::Local<v8::String> RequestCountValue=Nan::New(pRspQryConnectorInfo->RequestCount).ToLocalChecked();
     v8::Local<v8::String> ErrorCount=Nan::New<v8::String>("ErrorCount").ToLocalChecked();
     v8::Local<v8::String> ErrorCountValue=Nan::New(pRspQryConnectorInfo->ErrorCount).ToLocalChecked();
     v8::Local<v8::String> BytesReceived=Nan::New<v8::String>("BytesReceived").ToLocalChecked();
     v8::Local<v8::String> BytesReceivedValue=Nan::New(pRspQryConnectorInfo->BytesReceived).ToLocalChecked();
     v8::Local<v8::String> BytesSent=Nan::New<v8::String>("BytesSent").ToLocalChecked();
     v8::Local<v8::String> BytesSentValue=Nan::New(pRspQryConnectorInfo->BytesSent).ToLocalChecked();
     v8::Local<v8::Object> pRspQryConnectorInfoJS=Nan::New<v8::Object>();
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(ThreadsCount),Local<v8::Value>(ThreadsCountValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(BusyThreadsCount),Local<v8::Value>(BusyThreadsCountValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MaxThreads),Local<v8::Value>(MaxThreadsValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MaxSpareThreads),Local<v8::Value>(MaxSpareThreadsValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MinSpareThreads),Local<v8::Value>(MinSpareThreadsValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MaxTime),Local<v8::Value>(MaxTimeValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(MaxProcTime),Local<v8::Value>(MaxProcTimeValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(RequestCount),Local<v8::Value>(RequestCountValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(ErrorCount),Local<v8::Value>(ErrorCountValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(BytesReceived),Local<v8::Value>(BytesReceivedValue));
     pRspQryConnectorInfoJS->Set(Local<v8::Value>(BytesSent),Local<v8::Value>(BytesSentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryConnectorInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnConnectorInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnConnectorInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnConnectorInfoField *pRtnConnectorInfo =(CShfeFtdcRtnConnectorInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnConnectorInfo->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnConnectorInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnConnectorInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnConnectorInfo->Name).ToLocalChecked();
     v8::Local<v8::String> ThreadsCount=Nan::New<v8::String>("ThreadsCount").ToLocalChecked();
     v8::Local<v8::String> ThreadsCountValue=Nan::New(pRtnConnectorInfo->ThreadsCount).ToLocalChecked();
     v8::Local<v8::String> BusyThreadsCount=Nan::New<v8::String>("BusyThreadsCount").ToLocalChecked();
     v8::Local<v8::String> BusyThreadsCountValue=Nan::New(pRtnConnectorInfo->BusyThreadsCount).ToLocalChecked();
     v8::Local<v8::String> MaxThreads=Nan::New<v8::String>("MaxThreads").ToLocalChecked();
     v8::Local<v8::String> MaxThreadsValue=Nan::New(pRtnConnectorInfo->MaxThreads).ToLocalChecked();
     v8::Local<v8::String> MaxSpareThreads=Nan::New<v8::String>("MaxSpareThreads").ToLocalChecked();
     v8::Local<v8::String> MaxSpareThreadsValue=Nan::New(pRtnConnectorInfo->MaxSpareThreads).ToLocalChecked();
     v8::Local<v8::String> MinSpareThreads=Nan::New<v8::String>("MinSpareThreads").ToLocalChecked();
     v8::Local<v8::String> MinSpareThreadsValue=Nan::New(pRtnConnectorInfo->MinSpareThreads).ToLocalChecked();
     v8::Local<v8::String> MaxTime=Nan::New<v8::String>("MaxTime").ToLocalChecked();
     v8::Local<v8::String> MaxTimeValue=Nan::New(pRtnConnectorInfo->MaxTime).ToLocalChecked();
     v8::Local<v8::String> MaxProcTime=Nan::New<v8::String>("MaxProcTime").ToLocalChecked();
     v8::Local<v8::String> MaxProcTimeValue=Nan::New(pRtnConnectorInfo->MaxProcTime).ToLocalChecked();
     v8::Local<v8::String> RequestCount=Nan::New<v8::String>("RequestCount").ToLocalChecked();
     v8::Local<v8::String> RequestCountValue=Nan::New(pRtnConnectorInfo->RequestCount).ToLocalChecked();
     v8::Local<v8::String> ErrorCount=Nan::New<v8::String>("ErrorCount").ToLocalChecked();
     v8::Local<v8::String> ErrorCountValue=Nan::New(pRtnConnectorInfo->ErrorCount).ToLocalChecked();
     v8::Local<v8::String> BytesReceived=Nan::New<v8::String>("BytesReceived").ToLocalChecked();
     v8::Local<v8::String> BytesReceivedValue=Nan::New(pRtnConnectorInfo->BytesReceived).ToLocalChecked();
     v8::Local<v8::String> BytesSent=Nan::New<v8::String>("BytesSent").ToLocalChecked();
     v8::Local<v8::String> BytesSentValue=Nan::New(pRtnConnectorInfo->BytesSent).ToLocalChecked();

     v8::Local<v8::Object> pRtnConnectorInfoJS=Nan::New<v8::Object>();
     pRtnConnectorInfoJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(ThreadsCount),Local<v8::Value>(ThreadsCountValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(BusyThreadsCount),Local<v8::Value>(BusyThreadsCountValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MaxThreads),Local<v8::Value>(MaxThreadsValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MaxSpareThreads),Local<v8::Value>(MaxSpareThreadsValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MinSpareThreads),Local<v8::Value>(MinSpareThreadsValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MaxTime),Local<v8::Value>(MaxTimeValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(MaxProcTime),Local<v8::Value>(MaxProcTimeValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(RequestCount),Local<v8::Value>(RequestCountValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(ErrorCount),Local<v8::Value>(ErrorCountValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(BytesReceived),Local<v8::Value>(BytesReceivedValue));
     pRtnConnectorInfoJS->Set(Local<v8::Value>(BytesSent),Local<v8::Value>(BytesSentValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnConnectorInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryDBQueryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryDBQueryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryDBQueryField *pRspQryDBQuery =(CShfeFtdcRspQryDBQueryField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryDBQuery->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryDBQuery->AttrType).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryDBQuery->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryDBQuery->MonTime).ToLocalChecked();
     v8::Local<v8::String> DBQueryResult=Nan::New<v8::String>("DBQueryResult").ToLocalChecked();
     v8::Local<v8::String> DBQueryResultValue=Nan::New(pRspQryDBQuery->DBQueryResult).ToLocalChecked();
     v8::Local<v8::Object> pRspQryDBQueryJS=Nan::New<v8::Object>();
     pRspQryDBQueryJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryDBQueryJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryDBQueryJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryDBQueryJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryDBQueryJS->Set(Local<v8::Value>(DBQueryResult),Local<v8::Value>(DBQueryResultValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryDBQueryJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnDBQueryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnDBQueryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnDBQueryField *pRtnDBQuery =(CShfeFtdcRtnDBQueryField *)(paramArrayNew[0]);

     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnDBQuery->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnDBQuery->AttrType).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnDBQuery->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnDBQuery->MonTime).ToLocalChecked();
     v8::Local<v8::String> DBQueryResult=Nan::New<v8::String>("DBQueryResult").ToLocalChecked();
     v8::Local<v8::String> DBQueryResultValue=Nan::New(pRtnDBQuery->DBQueryResult).ToLocalChecked();

     v8::Local<v8::Object> pRtnDBQueryJS=Nan::New<v8::Object>();
     pRtnDBQueryJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnDBQueryJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnDBQueryJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnDBQueryJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnDBQueryJS->Set(Local<v8::Value>(DBQueryResult),Local<v8::Value>(DBQueryResultValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnDBQueryJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryGeneralFieldTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryGeneralFieldTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcSysGeneralFieldField *pSysGeneralField =(CShfeFtdcSysGeneralFieldField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pSysGeneralField->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pSysGeneralField->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pSysGeneralField->ObjectID).ToLocalChecked();
     v8::Local<v8::String> SubObjectID=Nan::New<v8::String>("SubObjectID").ToLocalChecked();
     v8::Local<v8::String> SubObjectIDValue=Nan::New(pSysGeneralField->SubObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pSysGeneralField->AttrType).ToLocalChecked();
     v8::Local<v8::String> Content=Nan::New<v8::String>("Content").ToLocalChecked();
     v8::Local<v8::String> ContentValue=Nan::New(pSysGeneralField->Content).ToLocalChecked();
     v8::Local<v8::Object> pSysGeneralFieldJS=Nan::New<v8::Object>();
     pSysGeneralFieldJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(SubObjectID),Local<v8::Value>(SubObjectIDValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(Content),Local<v8::Value>(ContentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pSysGeneralFieldJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnGeneralFieldTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnGeneralFieldTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcSysGeneralFieldField *pSysGeneralField =(CShfeFtdcSysGeneralFieldField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pSysGeneralField->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pSysGeneralField->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pSysGeneralField->ObjectID).ToLocalChecked();
     v8::Local<v8::String> SubObjectID=Nan::New<v8::String>("SubObjectID").ToLocalChecked();
     v8::Local<v8::String> SubObjectIDValue=Nan::New(pSysGeneralField->SubObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pSysGeneralField->AttrType).ToLocalChecked();
     v8::Local<v8::String> Content=Nan::New<v8::String>("Content").ToLocalChecked();
     v8::Local<v8::String> ContentValue=Nan::New(pSysGeneralField->Content).ToLocalChecked();

     v8::Local<v8::Object> pSysGeneralFieldJS=Nan::New<v8::Object>();
     pSysGeneralFieldJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(SubObjectID),Local<v8::Value>(SubObjectIDValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pSysGeneralFieldJS->Set(Local<v8::Value>(Content),Local<v8::Value>(ContentValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pSysGeneralFieldJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryGetFileTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryGetFileTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryGetFileField *pRspQryGetFile =(CShfeFtdcRspQryGetFileField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> FileName=Nan::New<v8::String>("FileName").ToLocalChecked();
     v8::Local<v8::String> FileNameValue=Nan::New(pRspQryGetFile->FileName).ToLocalChecked();
     v8::Local<v8::String> Version=Nan::New<v8::String>("Version").ToLocalChecked();
     v8::Local<v8::String> VersionValue=Nan::New(pRspQryGetFile->Version).ToLocalChecked();
     v8::Local<v8::String> Offset=Nan::New<v8::String>("Offset").ToLocalChecked();
     v8::Local<v8::Integer> OffsetValue=Nan::New<v8::Integer>(pRspQryGetFile->Offset);
     v8::Local<v8::String> Length=Nan::New<v8::String>("Length").ToLocalChecked();
     v8::Local<v8::Integer> LengthValue=Nan::New<v8::Integer>(pRspQryGetFile->Length);
     v8::Local<v8::String> Comment=Nan::New<v8::String>("Comment").ToLocalChecked();
     v8::Local<v8::String> CommentValue=Nan::New(pRspQryGetFile->Comment).ToLocalChecked();
     v8::Local<v8::Object> pRspQryGetFileJS=Nan::New<v8::Object>();
     pRspQryGetFileJS->Set(Local<v8::Value>(FileName),Local<v8::Value>(FileNameValue));
     pRspQryGetFileJS->Set(Local<v8::Value>(Version),Local<v8::Value>(VersionValue));
     pRspQryGetFileJS->Set(Local<v8::Value>(Offset),Local<v8::Value>(OffsetValue));
     pRspQryGetFileJS->Set(Local<v8::Value>(Length),Local<v8::Value>(LengthValue));
     pRspQryGetFileJS->Set(Local<v8::Value>(Comment),Local<v8::Value>(CommentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryGetFileJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryWarningQueryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryWarningQueryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryWarningQueryField *pRspQryWarningQuery =(CShfeFtdcRspQryWarningQueryField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryWarningQuery->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryWarningQuery->MonTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRspQryWarningQuery->EvendID);
     v8::Local<v8::String> DBQueryResult=Nan::New<v8::String>("DBQueryResult").ToLocalChecked();
     v8::Local<v8::String> DBQueryResultValue=Nan::New(pRspQryWarningQuery->DBQueryResult).ToLocalChecked();
     v8::Local<v8::Object> pRspQryWarningQueryJS=Nan::New<v8::Object>();
     pRspQryWarningQueryJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryWarningQueryJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryWarningQueryJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRspQryWarningQueryJS->Set(Local<v8::Value>(DBQueryResult),Local<v8::Value>(DBQueryResultValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryWarningQueryJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnWarningQueryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnWarningQueryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnWarningQueryField *pRtnWarningQuery =(CShfeFtdcRtnWarningQueryField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnWarningQuery->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnWarningQuery->MonTime).ToLocalChecked();
     v8::Local<v8::String> EvendID=Nan::New<v8::String>("EvendID").ToLocalChecked();
     v8::Local<v8::Integer> EvendIDValue=Nan::New<v8::Integer>(pRtnWarningQuery->EvendID);
     v8::Local<v8::String> DBQueryResult=Nan::New<v8::String>("DBQueryResult").ToLocalChecked();
     v8::Local<v8::String> DBQueryResultValue=Nan::New(pRtnWarningQuery->DBQueryResult).ToLocalChecked();

     v8::Local<v8::Object> pRtnWarningQueryJS=Nan::New<v8::Object>();
     pRtnWarningQueryJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnWarningQueryJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnWarningQueryJS->Set(Local<v8::Value>(EvendID),Local<v8::Value>(EvendIDValue));
     pRtnWarningQueryJS->Set(Local<v8::Value>(DBQueryResult),Local<v8::Value>(DBQueryResultValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnWarningQueryJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRtnHostConfig(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnHostConfig").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnHostConfigField *pRtnHostConfig =(CShfeFtdcRtnHostConfigField *)(paramArrayNew[0]);

     v8::Local<v8::String> CfgType=Nan::New<v8::String>("CfgType").ToLocalChecked();
     v8::Local<v8::String> CfgTypeValue=Nan::New(pRtnHostConfig->CfgType).ToLocalChecked();
     v8::Local<v8::String> CfgDataCenter=Nan::New<v8::String>("CfgDataCenter").ToLocalChecked();
     v8::Local<v8::String> CfgDataCenterValue=Nan::New(pRtnHostConfig->CfgDataCenter).ToLocalChecked();
     v8::Local<v8::String> CfgName=Nan::New<v8::String>("CfgName").ToLocalChecked();
     v8::Local<v8::String> CfgNameValue=Nan::New(pRtnHostConfig->CfgName).ToLocalChecked();
     v8::Local<v8::String> CfgLocation=Nan::New<v8::String>("CfgLocation").ToLocalChecked();
     v8::Local<v8::String> CfgLocationValue=Nan::New(pRtnHostConfig->CfgLocation).ToLocalChecked();
     v8::Local<v8::String> CfgHostName=Nan::New<v8::String>("CfgHostName").ToLocalChecked();
     v8::Local<v8::String> CfgHostNameValue=Nan::New(pRtnHostConfig->CfgHostName).ToLocalChecked();
     v8::Local<v8::String> CfgAttend=Nan::New<v8::String>("CfgAttend").ToLocalChecked();
     v8::Local<v8::String> CfgAttendValue=Nan::New(pRtnHostConfig->CfgAttend).ToLocalChecked();

     v8::Local<v8::Object> pRtnHostConfigJS=Nan::New<v8::Object>();
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgType),Local<v8::Value>(CfgTypeValue));
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgDataCenter),Local<v8::Value>(CfgDataCenterValue));
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgName),Local<v8::Value>(CfgNameValue));
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgLocation),Local<v8::Value>(CfgLocationValue));
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgHostName),Local<v8::Value>(CfgHostNameValue));
     pRtnHostConfigJS->Set(Local<v8::Value>(CfgAttend),Local<v8::Value>(CfgAttendValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnHostConfigJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryGeneralOperateTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryGeneralOperateTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryGeneralOperateField *pRspQryGeneralOperate =(CShfeFtdcRspQryGeneralOperateField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> GeneralOperateType=Nan::New<v8::String>("GeneralOperateType").ToLocalChecked();
     v8::Local<v8::Integer> GeneralOperateTypeValue=Nan::New<v8::Integer>(pRspQryGeneralOperate->GeneralOperateType);
     v8::Local<v8::String> GeneralOperateTable=Nan::New<v8::String>("GeneralOperateTable").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateTableValue=Nan::New(pRspQryGeneralOperate->GeneralOperateTable).ToLocalChecked();
     v8::Local<v8::String> GeneralOperateOption=Nan::New<v8::String>("GeneralOperateOption").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateOptionValue=Nan::New(pRspQryGeneralOperate->GeneralOperateOption).ToLocalChecked();
     v8::Local<v8::String> GeneralOperateSet=Nan::New<v8::String>("GeneralOperateSet").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateSetValue=Nan::New(pRspQryGeneralOperate->GeneralOperateSet).ToLocalChecked();
     v8::Local<v8::Object> pRspQryGeneralOperateJS=Nan::New<v8::Object>();
     pRspQryGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateType),Local<v8::Value>(GeneralOperateTypeValue));
     pRspQryGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateTable),Local<v8::Value>(GeneralOperateTableValue));
     pRspQryGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateOption),Local<v8::Value>(GeneralOperateOptionValue));
     pRspQryGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateSet),Local<v8::Value>(GeneralOperateSetValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryGeneralOperateJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnGeneralOperateTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnGeneralOperateTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnGeneralOperateField *pRtnGeneralOperate =(CShfeFtdcRtnGeneralOperateField *)(paramArrayNew[0]);

     v8::Local<v8::String> GeneralOperateType=Nan::New<v8::String>("GeneralOperateType").ToLocalChecked();
     v8::Local<v8::Integer> GeneralOperateTypeValue=Nan::New<v8::Integer>(pRtnGeneralOperate->GeneralOperateType);
     v8::Local<v8::String> GeneralOperateTable=Nan::New<v8::String>("GeneralOperateTable").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateTableValue=Nan::New(pRtnGeneralOperate->GeneralOperateTable).ToLocalChecked();
     v8::Local<v8::String> GeneralOperateOption=Nan::New<v8::String>("GeneralOperateOption").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateOptionValue=Nan::New(pRtnGeneralOperate->GeneralOperateOption).ToLocalChecked();
     v8::Local<v8::String> GeneralOperateSet=Nan::New<v8::String>("GeneralOperateSet").ToLocalChecked();
     v8::Local<v8::String> GeneralOperateSetValue=Nan::New(pRtnGeneralOperate->GeneralOperateSet).ToLocalChecked();

     v8::Local<v8::Object> pRtnGeneralOperateJS=Nan::New<v8::Object>();
     pRtnGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateType),Local<v8::Value>(GeneralOperateTypeValue));
     pRtnGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateTable),Local<v8::Value>(GeneralOperateTableValue));
     pRtnGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateOption),Local<v8::Value>(GeneralOperateOptionValue));
     pRtnGeneralOperateJS->Set(Local<v8::Value>(GeneralOperateSet),Local<v8::Value>(GeneralOperateSetValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnGeneralOperateJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceLinkedTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceLinkedTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceLinkedField *pRspQryNetDeviceLinked =(CShfeFtdcRspQryNetDeviceLinkedField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->ID);
     v8::Local<v8::String> NetDeviceID=Nan::New<v8::String>("NetDeviceID").ToLocalChecked();
     v8::Local<v8::Integer> NetDeviceIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->NetDeviceID);
     v8::Local<v8::String> NetPortID=Nan::New<v8::String>("NetPortID").ToLocalChecked();
     v8::Local<v8::Integer> NetPortIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->NetPortID);
     v8::Local<v8::String> NetObjectID=Nan::New<v8::String>("NetObjectID").ToLocalChecked();
     v8::Local<v8::String> NetObjectIDValue=Nan::New(pRspQryNetDeviceLinked->NetObjectID).ToLocalChecked();
     v8::Local<v8::String> NetPortType=Nan::New<v8::String>("NetPortType").ToLocalChecked();
     v8::Local<v8::String> NetPortTypeValue=Nan::New(pRspQryNetDeviceLinked->NetPortType).ToLocalChecked();
     v8::Local<v8::String> LinkNetDeviceID=Nan::New<v8::String>("LinkNetDeviceID").ToLocalChecked();
     v8::Local<v8::Integer> LinkNetDeviceIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->LinkNetDeviceID);
     v8::Local<v8::String> LinkNetPortID=Nan::New<v8::String>("LinkNetPortID").ToLocalChecked();
     v8::Local<v8::Integer> LinkNetPortIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->LinkNetPortID);
     v8::Local<v8::String> LinkNetObjectID=Nan::New<v8::String>("LinkNetObjectID").ToLocalChecked();
     v8::Local<v8::String> LinkNetObjectIDValue=Nan::New(pRspQryNetDeviceLinked->LinkNetObjectID).ToLocalChecked();
     v8::Local<v8::String> LinkNetPortType=Nan::New<v8::String>("LinkNetPortType").ToLocalChecked();
     v8::Local<v8::String> LinkNetPortTypeValue=Nan::New(pRspQryNetDeviceLinked->LinkNetPortType).ToLocalChecked();
     v8::Local<v8::String> LinkSource=Nan::New<v8::String>("LinkSource").ToLocalChecked();
     v8::Local<v8::Integer> LinkSourceValue=Nan::New<v8::Integer>(pRspQryNetDeviceLinked->LinkSource);
     v8::Local<v8::Object> pRspQryNetDeviceLinkedJS=Nan::New<v8::Object>();
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(NetDeviceID),Local<v8::Value>(NetDeviceIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(NetPortID),Local<v8::Value>(NetPortIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(NetObjectID),Local<v8::Value>(NetObjectIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(NetPortType),Local<v8::Value>(NetPortTypeValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetDeviceID),Local<v8::Value>(LinkNetDeviceIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetPortID),Local<v8::Value>(LinkNetPortIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetObjectID),Local<v8::Value>(LinkNetObjectIDValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetPortType),Local<v8::Value>(LinkNetPortTypeValue));
     pRspQryNetDeviceLinkedJS->Set(Local<v8::Value>(LinkSource),Local<v8::Value>(LinkSourceValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceLinkedJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDeviceLinkedTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceLinkedTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDeviceLinkedField *pRtnNetDeviceLinked =(CShfeFtdcRtnNetDeviceLinkedField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->ID);
     v8::Local<v8::String> NetDeviceID=Nan::New<v8::String>("NetDeviceID").ToLocalChecked();
     v8::Local<v8::Integer> NetDeviceIDValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->NetDeviceID);
     v8::Local<v8::String> NetPortID=Nan::New<v8::String>("NetPortID").ToLocalChecked();
     v8::Local<v8::Integer> NetPortIDValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->NetPortID);
     v8::Local<v8::String> NetObjectID=Nan::New<v8::String>("NetObjectID").ToLocalChecked();
     v8::Local<v8::String> NetObjectIDValue=Nan::New(pRtnNetDeviceLinked->NetObjectID).ToLocalChecked();
     v8::Local<v8::String> NetPortType=Nan::New<v8::String>("NetPortType").ToLocalChecked();
     v8::Local<v8::String> NetPortTypeValue=Nan::New(pRtnNetDeviceLinked->NetPortType).ToLocalChecked();
     v8::Local<v8::String> LinkNetDeviceID=Nan::New<v8::String>("LinkNetDeviceID").ToLocalChecked();
     v8::Local<v8::Integer> LinkNetDeviceIDValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->LinkNetDeviceID);
     v8::Local<v8::String> LinkNetPortID=Nan::New<v8::String>("LinkNetPortID").ToLocalChecked();
     v8::Local<v8::Integer> LinkNetPortIDValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->LinkNetPortID);
     v8::Local<v8::String> LinkNetObjectID=Nan::New<v8::String>("LinkNetObjectID").ToLocalChecked();
     v8::Local<v8::String> LinkNetObjectIDValue=Nan::New(pRtnNetDeviceLinked->LinkNetObjectID).ToLocalChecked();
     v8::Local<v8::String> LinkNetPortType=Nan::New<v8::String>("LinkNetPortType").ToLocalChecked();
     v8::Local<v8::String> LinkNetPortTypeValue=Nan::New(pRtnNetDeviceLinked->LinkNetPortType).ToLocalChecked();
     v8::Local<v8::String> LinkSource=Nan::New<v8::String>("LinkSource").ToLocalChecked();
     v8::Local<v8::Integer> LinkSourceValue=Nan::New<v8::Integer>(pRtnNetDeviceLinked->LinkSource);

     v8::Local<v8::Object> pRtnNetDeviceLinkedJS=Nan::New<v8::Object>();
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(NetDeviceID),Local<v8::Value>(NetDeviceIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(NetPortID),Local<v8::Value>(NetPortIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(NetObjectID),Local<v8::Value>(NetObjectIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(NetPortType),Local<v8::Value>(NetPortTypeValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetDeviceID),Local<v8::Value>(LinkNetDeviceIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetPortID),Local<v8::Value>(LinkNetPortIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetObjectID),Local<v8::Value>(LinkNetObjectIDValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(LinkNetPortType),Local<v8::Value>(LinkNetPortTypeValue));
     pRtnNetDeviceLinkedJS->Set(Local<v8::Value>(LinkSource),Local<v8::Value>(LinkSourceValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDeviceLinkedJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTradeUserLoginStatTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeUserLoginStatTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeUserLoginStatField *pRspQryTradeUserLoginStat =(CShfeFtdcRspQryTradeUserLoginStatField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTradeUserLoginStat->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTradeUserLoginStat->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryTradeUserLoginStat->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryTradeUserLoginStat->IPAddress).ToLocalChecked();
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryTradeUserLoginStat->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryTradeUserLoginStat->UserID).ToLocalChecked();
     v8::Local<v8::String> FrontId=Nan::New<v8::String>("FrontId").ToLocalChecked();
     v8::Local<v8::String> FrontIdValue=Nan::New(pRspQryTradeUserLoginStat->FrontId).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTradeUserLoginStatJS=Nan::New<v8::Object>();
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryTradeUserLoginStatJS->Set(Local<v8::Value>(FrontId),Local<v8::Value>(FrontIdValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeUserLoginStatJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryTradeFrontOrderRttStatTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeFrontOrderRttStatTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeFrontOrderRttStatField *pRspQryTradeFrontOrderRttStat =(CShfeFtdcRspQryTradeFrontOrderRttStatField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTradeFrontOrderRttStat->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTradeFrontOrderRttStat->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryTradeFrontOrderRttStat->ObjectID).ToLocalChecked();
     v8::Local<v8::String> OrderCount=Nan::New<v8::String>("OrderCount").ToLocalChecked();
     v8::Local<v8::Number> OrderCountValue=Nan::New<v8::Number>(pRspQryTradeFrontOrderRttStat->OrderCount);
     v8::Local<v8::String> OrderRttSum=Nan::New<v8::String>("OrderRttSum").ToLocalChecked();
     v8::Local<v8::Number> OrderRttSumValue=Nan::New<v8::Number>(pRspQryTradeFrontOrderRttStat->OrderRttSum);
     v8::Local<v8::String> OrderMaxRtt=Nan::New<v8::String>("OrderMaxRtt").ToLocalChecked();
     v8::Local<v8::Integer> OrderMaxRttValue=Nan::New<v8::Integer>(pRspQryTradeFrontOrderRttStat->OrderMaxRtt);
     v8::Local<v8::String> OrderMinRtt=Nan::New<v8::String>("OrderMinRtt").ToLocalChecked();
     v8::Local<v8::Integer> OrderMinRttValue=Nan::New<v8::Integer>(pRspQryTradeFrontOrderRttStat->OrderMinRtt);
     v8::Local<v8::String> OrderRttSqu=Nan::New<v8::String>("OrderRttSqu").ToLocalChecked();
     v8::Local<v8::Integer> OrderRttSquValue=Nan::New<v8::Integer>(pRspQryTradeFrontOrderRttStat->OrderRttSqu);
     v8::Local<v8::String> OrderRttCutDistrib=Nan::New<v8::String>("OrderRttCutDistrib").ToLocalChecked();
     v8::Local<v8::String> OrderRttCutDistribValue=Nan::New(pRspQryTradeFrontOrderRttStat->OrderRttCutDistrib).ToLocalChecked();
     v8::Local<v8::Object> pRspQryTradeFrontOrderRttStatJS=Nan::New<v8::Object>();
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderCount),Local<v8::Value>(OrderCountValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttSum),Local<v8::Value>(OrderRttSumValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderMaxRtt),Local<v8::Value>(OrderMaxRttValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderMinRtt),Local<v8::Value>(OrderMinRttValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttSqu),Local<v8::Value>(OrderRttSquValue));
     pRspQryTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttCutDistrib),Local<v8::Value>(OrderRttCutDistribValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeFrontOrderRttStatJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTradeFrontOrderRttStatTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeFrontOrderRttStatTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTradeFrontOrderRttStatField *pRtnTradeFrontOrderRttStat =(CShfeFtdcRtnTradeFrontOrderRttStatField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnTradeFrontOrderRttStat->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnTradeFrontOrderRttStat->MonTime).ToLocalChecked();
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnTradeFrontOrderRttStat->ObjectID).ToLocalChecked();
     v8::Local<v8::String> OrderCount=Nan::New<v8::String>("OrderCount").ToLocalChecked();
     v8::Local<v8::Number> OrderCountValue=Nan::New<v8::Number>(pRtnTradeFrontOrderRttStat->OrderCount);
     v8::Local<v8::String> OrderRttSum=Nan::New<v8::String>("OrderRttSum").ToLocalChecked();
     v8::Local<v8::Number> OrderRttSumValue=Nan::New<v8::Number>(pRtnTradeFrontOrderRttStat->OrderRttSum);
     v8::Local<v8::String> OrderMaxRtt=Nan::New<v8::String>("OrderMaxRtt").ToLocalChecked();
     v8::Local<v8::Integer> OrderMaxRttValue=Nan::New<v8::Integer>(pRtnTradeFrontOrderRttStat->OrderMaxRtt);
     v8::Local<v8::String> OrderMinRtt=Nan::New<v8::String>("OrderMinRtt").ToLocalChecked();
     v8::Local<v8::Integer> OrderMinRttValue=Nan::New<v8::Integer>(pRtnTradeFrontOrderRttStat->OrderMinRtt);
     v8::Local<v8::String> OrderRttSqu=Nan::New<v8::String>("OrderRttSqu").ToLocalChecked();
     v8::Local<v8::Integer> OrderRttSquValue=Nan::New<v8::Integer>(pRtnTradeFrontOrderRttStat->OrderRttSqu);
     v8::Local<v8::String> OrderRttCutDistrib=Nan::New<v8::String>("OrderRttCutDistrib").ToLocalChecked();
     v8::Local<v8::String> OrderRttCutDistribValue=Nan::New(pRtnTradeFrontOrderRttStat->OrderRttCutDistrib).ToLocalChecked();

     v8::Local<v8::Object> pRtnTradeFrontOrderRttStatJS=Nan::New<v8::Object>();
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderCount),Local<v8::Value>(OrderCountValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttSum),Local<v8::Value>(OrderRttSumValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderMaxRtt),Local<v8::Value>(OrderMaxRttValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderMinRtt),Local<v8::Value>(OrderMinRttValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttSqu),Local<v8::Value>(OrderRttSquValue));
     pRtnTradeFrontOrderRttStatJS->Set(Local<v8::Value>(OrderRttCutDistrib),Local<v8::Value>(OrderRttCutDistribValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTradeFrontOrderRttStatJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryParticTradeOrderStatesTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryParticTradeOrderStatesTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryParticTradeOrderStatesField *pRspQryParticTradeOrderStates =(CShfeFtdcRspQryParticTradeOrderStatesField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRspQryParticTradeOrderStates->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRspQryParticTradeOrderStates->UserID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryParticTradeOrderStates->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryParticTradeOrderStates->MonTime).ToLocalChecked();
     v8::Local<v8::String> StaticWidth=Nan::New<v8::String>("StaticWidth").ToLocalChecked();
     v8::Local<v8::Integer> StaticWidthValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->StaticWidth);
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->FrontID);
     v8::Local<v8::String> OrderCount=Nan::New<v8::String>("OrderCount").ToLocalChecked();
     v8::Local<v8::Integer> OrderCountValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->OrderCount);
     v8::Local<v8::String> CancleCount=Nan::New<v8::String>("CancleCount").ToLocalChecked();
     v8::Local<v8::Integer> CancleCountValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->CancleCount);
     v8::Local<v8::String> QueryCount=Nan::New<v8::String>("QueryCount").ToLocalChecked();
     v8::Local<v8::Integer> QueryCountValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->QueryCount);
     v8::Local<v8::String> TradeCount=Nan::New<v8::String>("TradeCount").ToLocalChecked();
     v8::Local<v8::Integer> TradeCountValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->TradeCount);
     v8::Local<v8::String> TradeMoney=Nan::New<v8::String>("TradeMoney").ToLocalChecked();
     v8::Local<v8::Integer> TradeMoneyValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->TradeMoney);
     v8::Local<v8::String> OrderCntMax=Nan::New<v8::String>("OrderCntMax").ToLocalChecked();
     v8::Local<v8::Integer> OrderCntMaxValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->OrderCntMax);
     v8::Local<v8::String> CancleCntMax=Nan::New<v8::String>("CancleCntMax").ToLocalChecked();
     v8::Local<v8::Integer> CancleCntMaxValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->CancleCntMax);
     v8::Local<v8::String> QueryCntMax=Nan::New<v8::String>("QueryCntMax").ToLocalChecked();
     v8::Local<v8::Integer> QueryCntMaxValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->QueryCntMax);
     v8::Local<v8::String> TradeCntMax=Nan::New<v8::String>("TradeCntMax").ToLocalChecked();
     v8::Local<v8::Integer> TradeCntMaxValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->TradeCntMax);
     v8::Local<v8::String> TradeMoneyMax=Nan::New<v8::String>("TradeMoneyMax").ToLocalChecked();
     v8::Local<v8::Integer> TradeMoneyMaxValue=Nan::New<v8::Integer>(pRspQryParticTradeOrderStates->TradeMoneyMax);
     v8::Local<v8::Object> pRspQryParticTradeOrderStatesJS=Nan::New<v8::Object>();
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(StaticWidth),Local<v8::Value>(StaticWidthValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(OrderCount),Local<v8::Value>(OrderCountValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(CancleCount),Local<v8::Value>(CancleCountValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(QueryCount),Local<v8::Value>(QueryCountValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeCount),Local<v8::Value>(TradeCountValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeMoney),Local<v8::Value>(TradeMoneyValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(OrderCntMax),Local<v8::Value>(OrderCntMaxValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(CancleCntMax),Local<v8::Value>(CancleCntMaxValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(QueryCntMax),Local<v8::Value>(QueryCntMaxValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeCntMax),Local<v8::Value>(TradeCntMaxValue));
     pRspQryParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeMoneyMax),Local<v8::Value>(TradeMoneyMaxValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryParticTradeOrderStatesJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnParticTradeOrderStatesTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnParticTradeOrderStatesTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnParticTradeOrderStatesField *pRtnParticTradeOrderStates =(CShfeFtdcRtnParticTradeOrderStatesField *)(paramArrayNew[0]);

     v8::Local<v8::String> ParticipantID=Nan::New<v8::String>("ParticipantID").ToLocalChecked();
     v8::Local<v8::String> ParticipantIDValue=Nan::New(pRtnParticTradeOrderStates->ParticipantID).ToLocalChecked();
     v8::Local<v8::String> UserID=Nan::New<v8::String>("UserID").ToLocalChecked();
     v8::Local<v8::String> UserIDValue=Nan::New(pRtnParticTradeOrderStates->UserID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnParticTradeOrderStates->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnParticTradeOrderStates->MonTime).ToLocalChecked();
     v8::Local<v8::String> StaticWidth=Nan::New<v8::String>("StaticWidth").ToLocalChecked();
     v8::Local<v8::Integer> StaticWidthValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->StaticWidth);
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->FrontID);
     v8::Local<v8::String> OrderCount=Nan::New<v8::String>("OrderCount").ToLocalChecked();
     v8::Local<v8::Integer> OrderCountValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->OrderCount);
     v8::Local<v8::String> CancleCount=Nan::New<v8::String>("CancleCount").ToLocalChecked();
     v8::Local<v8::Integer> CancleCountValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->CancleCount);
     v8::Local<v8::String> QueryCount=Nan::New<v8::String>("QueryCount").ToLocalChecked();
     v8::Local<v8::Integer> QueryCountValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->QueryCount);
     v8::Local<v8::String> TradeCount=Nan::New<v8::String>("TradeCount").ToLocalChecked();
     v8::Local<v8::Integer> TradeCountValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->TradeCount);
     v8::Local<v8::String> TradeMoney=Nan::New<v8::String>("TradeMoney").ToLocalChecked();
     v8::Local<v8::Integer> TradeMoneyValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->TradeMoney);
     v8::Local<v8::String> OrderCntMax=Nan::New<v8::String>("OrderCntMax").ToLocalChecked();
     v8::Local<v8::Integer> OrderCntMaxValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->OrderCntMax);
     v8::Local<v8::String> CancleCntMax=Nan::New<v8::String>("CancleCntMax").ToLocalChecked();
     v8::Local<v8::Integer> CancleCntMaxValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->CancleCntMax);
     v8::Local<v8::String> QueryCntMax=Nan::New<v8::String>("QueryCntMax").ToLocalChecked();
     v8::Local<v8::Integer> QueryCntMaxValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->QueryCntMax);
     v8::Local<v8::String> TradeCntMax=Nan::New<v8::String>("TradeCntMax").ToLocalChecked();
     v8::Local<v8::Integer> TradeCntMaxValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->TradeCntMax);
     v8::Local<v8::String> TradeMoneyMax=Nan::New<v8::String>("TradeMoneyMax").ToLocalChecked();
     v8::Local<v8::Integer> TradeMoneyMaxValue=Nan::New<v8::Integer>(pRtnParticTradeOrderStates->TradeMoneyMax);

     v8::Local<v8::Object> pRtnParticTradeOrderStatesJS=Nan::New<v8::Object>();
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(ParticipantID),Local<v8::Value>(ParticipantIDValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(UserID),Local<v8::Value>(UserIDValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(StaticWidth),Local<v8::Value>(StaticWidthValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(OrderCount),Local<v8::Value>(OrderCountValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(CancleCount),Local<v8::Value>(CancleCountValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(QueryCount),Local<v8::Value>(QueryCountValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeCount),Local<v8::Value>(TradeCountValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeMoney),Local<v8::Value>(TradeMoneyValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(OrderCntMax),Local<v8::Value>(OrderCntMaxValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(CancleCntMax),Local<v8::Value>(CancleCntMaxValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(QueryCntMax),Local<v8::Value>(QueryCntMaxValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeCntMax),Local<v8::Value>(TradeCntMaxValue));
     pRtnParticTradeOrderStatesJS->Set(Local<v8::Value>(TradeMoneyMax),Local<v8::Value>(TradeMoneyMaxValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnParticTradeOrderStatesJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryRouterInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryRouterInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryRouterInfoField *pRspQryRouterInfo =(CShfeFtdcRspQryRouterInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryRouterInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryRouterInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryRouterInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Dev=Nan::New<v8::String>("Dev").ToLocalChecked();
     v8::Local<v8::String> DevValue=Nan::New(pRspQryRouterInfo->Dev).ToLocalChecked();
     v8::Local<v8::String> Destination=Nan::New<v8::String>("Destination").ToLocalChecked();
     v8::Local<v8::String> DestinationValue=Nan::New(pRspQryRouterInfo->Destination).ToLocalChecked();
     v8::Local<v8::String> Gateway=Nan::New<v8::String>("Gateway").ToLocalChecked();
     v8::Local<v8::String> GatewayValue=Nan::New(pRspQryRouterInfo->Gateway).ToLocalChecked();
     v8::Local<v8::String> Mask=Nan::New<v8::String>("Mask").ToLocalChecked();
     v8::Local<v8::String> MaskValue=Nan::New(pRspQryRouterInfo->Mask).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::String> FlagValue=Nan::New(pRspQryRouterInfo->Flag).ToLocalChecked();
     v8::Local<v8::String> RefCnt=Nan::New<v8::String>("RefCnt").ToLocalChecked();
     v8::Local<v8::Integer> RefCntValue=Nan::New<v8::Integer>(pRspQryRouterInfo->RefCnt);
     v8::Local<v8::String> Use=Nan::New<v8::String>("Use").ToLocalChecked();
     v8::Local<v8::Integer> UseValue=Nan::New<v8::Integer>(pRspQryRouterInfo->Use);
     v8::Local<v8::String> Metric=Nan::New<v8::String>("Metric").ToLocalChecked();
     v8::Local<v8::Integer> MetricValue=Nan::New<v8::Integer>(pRspQryRouterInfo->Metric);
     v8::Local<v8::String> Mtu=Nan::New<v8::String>("Mtu").ToLocalChecked();
     v8::Local<v8::Integer> MtuValue=Nan::New<v8::Integer>(pRspQryRouterInfo->Mtu);
     v8::Local<v8::String> Win=Nan::New<v8::String>("Win").ToLocalChecked();
     v8::Local<v8::Integer> WinValue=Nan::New<v8::Integer>(pRspQryRouterInfo->Win);
     v8::Local<v8::String> Rtt=Nan::New<v8::String>("Rtt").ToLocalChecked();
     v8::Local<v8::Integer> RttValue=Nan::New<v8::Integer>(pRspQryRouterInfo->Rtt);
     v8::Local<v8::Object> pRspQryRouterInfoJS=Nan::New<v8::Object>();
     pRspQryRouterInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Dev),Local<v8::Value>(DevValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Destination),Local<v8::Value>(DestinationValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Gateway),Local<v8::Value>(GatewayValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Mask),Local<v8::Value>(MaskValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(RefCnt),Local<v8::Value>(RefCntValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Use),Local<v8::Value>(UseValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Metric),Local<v8::Value>(MetricValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Mtu),Local<v8::Value>(MtuValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Win),Local<v8::Value>(WinValue));
     pRspQryRouterInfoJS->Set(Local<v8::Value>(Rtt),Local<v8::Value>(RttValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryRouterInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnRouterInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnRouterInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnRouterInfoField *pRtnRouterInfo =(CShfeFtdcRtnRouterInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnRouterInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnRouterInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnRouterInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> Dev=Nan::New<v8::String>("Dev").ToLocalChecked();
     v8::Local<v8::String> DevValue=Nan::New(pRtnRouterInfo->Dev).ToLocalChecked();
     v8::Local<v8::String> Destination=Nan::New<v8::String>("Destination").ToLocalChecked();
     v8::Local<v8::String> DestinationValue=Nan::New(pRtnRouterInfo->Destination).ToLocalChecked();
     v8::Local<v8::String> Gateway=Nan::New<v8::String>("Gateway").ToLocalChecked();
     v8::Local<v8::String> GatewayValue=Nan::New(pRtnRouterInfo->Gateway).ToLocalChecked();
     v8::Local<v8::String> Mask=Nan::New<v8::String>("Mask").ToLocalChecked();
     v8::Local<v8::String> MaskValue=Nan::New(pRtnRouterInfo->Mask).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::String> FlagValue=Nan::New(pRtnRouterInfo->Flag).ToLocalChecked();
     v8::Local<v8::String> RefCnt=Nan::New<v8::String>("RefCnt").ToLocalChecked();
     v8::Local<v8::Integer> RefCntValue=Nan::New<v8::Integer>(pRtnRouterInfo->RefCnt);
     v8::Local<v8::String> Use=Nan::New<v8::String>("Use").ToLocalChecked();
     v8::Local<v8::Integer> UseValue=Nan::New<v8::Integer>(pRtnRouterInfo->Use);
     v8::Local<v8::String> Metric=Nan::New<v8::String>("Metric").ToLocalChecked();
     v8::Local<v8::Integer> MetricValue=Nan::New<v8::Integer>(pRtnRouterInfo->Metric);
     v8::Local<v8::String> Mtu=Nan::New<v8::String>("Mtu").ToLocalChecked();
     v8::Local<v8::Integer> MtuValue=Nan::New<v8::Integer>(pRtnRouterInfo->Mtu);
     v8::Local<v8::String> Win=Nan::New<v8::String>("Win").ToLocalChecked();
     v8::Local<v8::Integer> WinValue=Nan::New<v8::Integer>(pRtnRouterInfo->Win);
     v8::Local<v8::String> Rtt=Nan::New<v8::String>("Rtt").ToLocalChecked();
     v8::Local<v8::Integer> RttValue=Nan::New<v8::Integer>(pRtnRouterInfo->Rtt);

     v8::Local<v8::Object> pRtnRouterInfoJS=Nan::New<v8::Object>();
     pRtnRouterInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Dev),Local<v8::Value>(DevValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Destination),Local<v8::Value>(DestinationValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Gateway),Local<v8::Value>(GatewayValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Mask),Local<v8::Value>(MaskValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(RefCnt),Local<v8::Value>(RefCntValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Use),Local<v8::Value>(UseValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Metric),Local<v8::Value>(MetricValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Mtu),Local<v8::Value>(MtuValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Win),Local<v8::Value>(WinValue));
     pRtnRouterInfoJS->Set(Local<v8::Value>(Rtt),Local<v8::Value>(RttValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnRouterInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryDiskIOTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryDiskIOTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryDiskIOField *pRspQryDiskIO =(CShfeFtdcRspQryDiskIOField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryDiskIO->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryDiskIO->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryDiskIO->MonTime).ToLocalChecked();
     v8::Local<v8::String> PartName=Nan::New<v8::String>("PartName").ToLocalChecked();
     v8::Local<v8::String> PartNameValue=Nan::New(pRspQryDiskIO->PartName).ToLocalChecked();
     v8::Local<v8::String> ReadMerges=Nan::New<v8::String>("ReadMerges").ToLocalChecked();
     v8::Local<v8::Number> ReadMergesValue=Nan::New<v8::Number>(pRspQryDiskIO->ReadMerges);
     v8::Local<v8::String> WriteMerges=Nan::New<v8::String>("WriteMerges").ToLocalChecked();
     v8::Local<v8::Number> WriteMergesValue=Nan::New<v8::Number>(pRspQryDiskIO->WriteMerges);
     v8::Local<v8::String> ReadIOs=Nan::New<v8::String>("ReadIOs").ToLocalChecked();
     v8::Local<v8::Number> ReadIOsValue=Nan::New<v8::Number>(pRspQryDiskIO->ReadIOs);
     v8::Local<v8::String> WriteIOs=Nan::New<v8::String>("WriteIOs").ToLocalChecked();
     v8::Local<v8::Number> WriteIOsValue=Nan::New<v8::Number>(pRspQryDiskIO->WriteIOs);
     v8::Local<v8::String> ReadKBs=Nan::New<v8::String>("ReadKBs").ToLocalChecked();
     v8::Local<v8::Number> ReadKBsValue=Nan::New<v8::Number>(pRspQryDiskIO->ReadKBs);
     v8::Local<v8::String> WriteKBs=Nan::New<v8::String>("WriteKBs").ToLocalChecked();
     v8::Local<v8::Number> WriteKBsValue=Nan::New<v8::Number>(pRspQryDiskIO->WriteKBs);
     v8::Local<v8::String> SizeVal=Nan::New<v8::String>("SizeVal").ToLocalChecked();
     v8::Local<v8::Number> SizeValValue=Nan::New<v8::Number>(pRspQryDiskIO->SizeVal);
     v8::Local<v8::String> QueueVal=Nan::New<v8::String>("QueueVal").ToLocalChecked();
     v8::Local<v8::Number> QueueValValue=Nan::New<v8::Number>(pRspQryDiskIO->QueueVal);
     v8::Local<v8::String> Svc_t=Nan::New<v8::String>("Svc_t").ToLocalChecked();
     v8::Local<v8::Number> Svc_tValue=Nan::New<v8::Number>(pRspQryDiskIO->Svc_t);
     v8::Local<v8::String> Busy=Nan::New<v8::String>("Busy").ToLocalChecked();
     v8::Local<v8::Number> BusyValue=Nan::New<v8::Number>(pRspQryDiskIO->Busy);
     v8::Local<v8::Object> pRspQryDiskIOJS=Nan::New<v8::Object>();
     pRspQryDiskIOJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(PartName),Local<v8::Value>(PartNameValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(ReadMerges),Local<v8::Value>(ReadMergesValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(WriteMerges),Local<v8::Value>(WriteMergesValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(ReadIOs),Local<v8::Value>(ReadIOsValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(WriteIOs),Local<v8::Value>(WriteIOsValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(ReadKBs),Local<v8::Value>(ReadKBsValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(WriteKBs),Local<v8::Value>(WriteKBsValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(SizeVal),Local<v8::Value>(SizeValValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(QueueVal),Local<v8::Value>(QueueValValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(Svc_t),Local<v8::Value>(Svc_tValue));
     pRspQryDiskIOJS->Set(Local<v8::Value>(Busy),Local<v8::Value>(BusyValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryDiskIOJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnDiskIOTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnDiskIOTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnDiskIOField *pRtnDiskIO =(CShfeFtdcRtnDiskIOField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnDiskIO->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnDiskIO->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnDiskIO->MonTime).ToLocalChecked();
     v8::Local<v8::String> PartName=Nan::New<v8::String>("PartName").ToLocalChecked();
     v8::Local<v8::String> PartNameValue=Nan::New(pRtnDiskIO->PartName).ToLocalChecked();
     v8::Local<v8::String> ReadMerges=Nan::New<v8::String>("ReadMerges").ToLocalChecked();
     v8::Local<v8::Number> ReadMergesValue=Nan::New<v8::Number>(pRtnDiskIO->ReadMerges);
     v8::Local<v8::String> WriteMerges=Nan::New<v8::String>("WriteMerges").ToLocalChecked();
     v8::Local<v8::Number> WriteMergesValue=Nan::New<v8::Number>(pRtnDiskIO->WriteMerges);
     v8::Local<v8::String> ReadIOs=Nan::New<v8::String>("ReadIOs").ToLocalChecked();
     v8::Local<v8::Number> ReadIOsValue=Nan::New<v8::Number>(pRtnDiskIO->ReadIOs);
     v8::Local<v8::String> WriteIOs=Nan::New<v8::String>("WriteIOs").ToLocalChecked();
     v8::Local<v8::Number> WriteIOsValue=Nan::New<v8::Number>(pRtnDiskIO->WriteIOs);
     v8::Local<v8::String> ReadKBs=Nan::New<v8::String>("ReadKBs").ToLocalChecked();
     v8::Local<v8::Number> ReadKBsValue=Nan::New<v8::Number>(pRtnDiskIO->ReadKBs);
     v8::Local<v8::String> WriteKBs=Nan::New<v8::String>("WriteKBs").ToLocalChecked();
     v8::Local<v8::Number> WriteKBsValue=Nan::New<v8::Number>(pRtnDiskIO->WriteKBs);
     v8::Local<v8::String> SizeVal=Nan::New<v8::String>("SizeVal").ToLocalChecked();
     v8::Local<v8::Number> SizeValValue=Nan::New<v8::Number>(pRtnDiskIO->SizeVal);
     v8::Local<v8::String> QueueVal=Nan::New<v8::String>("QueueVal").ToLocalChecked();
     v8::Local<v8::Number> QueueValValue=Nan::New<v8::Number>(pRtnDiskIO->QueueVal);
     v8::Local<v8::String> Svc_t=Nan::New<v8::String>("Svc_t").ToLocalChecked();
     v8::Local<v8::Number> Svc_tValue=Nan::New<v8::Number>(pRtnDiskIO->Svc_t);
     v8::Local<v8::String> Busy=Nan::New<v8::String>("Busy").ToLocalChecked();
     v8::Local<v8::Number> BusyValue=Nan::New<v8::Number>(pRtnDiskIO->Busy);

     v8::Local<v8::Object> pRtnDiskIOJS=Nan::New<v8::Object>();
     pRtnDiskIOJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(PartName),Local<v8::Value>(PartNameValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(ReadMerges),Local<v8::Value>(ReadMergesValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(WriteMerges),Local<v8::Value>(WriteMergesValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(ReadIOs),Local<v8::Value>(ReadIOsValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(WriteIOs),Local<v8::Value>(WriteIOsValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(ReadKBs),Local<v8::Value>(ReadKBsValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(WriteKBs),Local<v8::Value>(WriteKBsValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(SizeVal),Local<v8::Value>(SizeValValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(QueueVal),Local<v8::Value>(QueueValValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(Svc_t),Local<v8::Value>(Svc_tValue));
     pRtnDiskIOJS->Set(Local<v8::Value>(Busy),Local<v8::Value>(BusyValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnDiskIOJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryStatInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryStatInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryStatInfoField *pRspQryStatInfo =(CShfeFtdcRspQryStatInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRspQryStatInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryStatInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryStatInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ProcRun=Nan::New<v8::String>("ProcRun").ToLocalChecked();
     v8::Local<v8::Integer> ProcRunValue=Nan::New<v8::Integer>(pRspQryStatInfo->ProcRun);
     v8::Local<v8::String> ProcBlk=Nan::New<v8::String>("ProcBlk").ToLocalChecked();
     v8::Local<v8::Integer> ProcBlkValue=Nan::New<v8::Integer>(pRspQryStatInfo->ProcBlk);
     v8::Local<v8::String> SwapIn=Nan::New<v8::String>("SwapIn").ToLocalChecked();
     v8::Local<v8::Integer> SwapInValue=Nan::New<v8::Integer>(pRspQryStatInfo->SwapIn);
     v8::Local<v8::String> SwapOut=Nan::New<v8::String>("SwapOut").ToLocalChecked();
     v8::Local<v8::Integer> SwapOutValue=Nan::New<v8::Integer>(pRspQryStatInfo->SwapOut);
     v8::Local<v8::String> BlockIn=Nan::New<v8::String>("BlockIn").ToLocalChecked();
     v8::Local<v8::Integer> BlockInValue=Nan::New<v8::Integer>(pRspQryStatInfo->BlockIn);
     v8::Local<v8::String> BlockOut=Nan::New<v8::String>("BlockOut").ToLocalChecked();
     v8::Local<v8::Integer> BlockOutValue=Nan::New<v8::Integer>(pRspQryStatInfo->BlockOut);
     v8::Local<v8::String> Inter=Nan::New<v8::String>("Inter").ToLocalChecked();
     v8::Local<v8::Integer> InterValue=Nan::New<v8::Integer>(pRspQryStatInfo->Inter);
     v8::Local<v8::String> Context=Nan::New<v8::String>("Context").ToLocalChecked();
     v8::Local<v8::Integer> ContextValue=Nan::New<v8::Integer>(pRspQryStatInfo->Context);
     v8::Local<v8::String> CPUUser=Nan::New<v8::String>("CPUUser").ToLocalChecked();
     v8::Local<v8::Number> CPUUserValue=Nan::New<v8::Number>(pRspQryStatInfo->CPUUser);
     v8::Local<v8::String> CPUSys=Nan::New<v8::String>("CPUSys").ToLocalChecked();
     v8::Local<v8::Number> CPUSysValue=Nan::New<v8::Number>(pRspQryStatInfo->CPUSys);
     v8::Local<v8::String> CPUIdle=Nan::New<v8::String>("CPUIdle").ToLocalChecked();
     v8::Local<v8::Number> CPUIdleValue=Nan::New<v8::Number>(pRspQryStatInfo->CPUIdle);
     v8::Local<v8::String> CPUIOWait=Nan::New<v8::String>("CPUIOWait").ToLocalChecked();
     v8::Local<v8::Number> CPUIOWaitValue=Nan::New<v8::Number>(pRspQryStatInfo->CPUIOWait);
     v8::Local<v8::String> CPUSteal=Nan::New<v8::String>("CPUSteal").ToLocalChecked();
     v8::Local<v8::Number> CPUStealValue=Nan::New<v8::Number>(pRspQryStatInfo->CPUSteal);
     v8::Local<v8::Object> pRspQryStatInfoJS=Nan::New<v8::Object>();
     pRspQryStatInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(ProcRun),Local<v8::Value>(ProcRunValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(ProcBlk),Local<v8::Value>(ProcBlkValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(SwapIn),Local<v8::Value>(SwapInValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(SwapOut),Local<v8::Value>(SwapOutValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(BlockIn),Local<v8::Value>(BlockInValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(BlockOut),Local<v8::Value>(BlockOutValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(Inter),Local<v8::Value>(InterValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(Context),Local<v8::Value>(ContextValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(CPUUser),Local<v8::Value>(CPUUserValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(CPUSys),Local<v8::Value>(CPUSysValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(CPUIdle),Local<v8::Value>(CPUIdleValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(CPUIOWait),Local<v8::Value>(CPUIOWaitValue));
     pRspQryStatInfoJS->Set(Local<v8::Value>(CPUSteal),Local<v8::Value>(CPUStealValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryStatInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnStatInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnStatInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnStatInfoField *pRtnStatInfo =(CShfeFtdcRtnStatInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnStatInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnStatInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnStatInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> ProcRun=Nan::New<v8::String>("ProcRun").ToLocalChecked();
     v8::Local<v8::Integer> ProcRunValue=Nan::New<v8::Integer>(pRtnStatInfo->ProcRun);
     v8::Local<v8::String> ProcBlk=Nan::New<v8::String>("ProcBlk").ToLocalChecked();
     v8::Local<v8::Integer> ProcBlkValue=Nan::New<v8::Integer>(pRtnStatInfo->ProcBlk);
     v8::Local<v8::String> SwapIn=Nan::New<v8::String>("SwapIn").ToLocalChecked();
     v8::Local<v8::Integer> SwapInValue=Nan::New<v8::Integer>(pRtnStatInfo->SwapIn);
     v8::Local<v8::String> SwapOut=Nan::New<v8::String>("SwapOut").ToLocalChecked();
     v8::Local<v8::Integer> SwapOutValue=Nan::New<v8::Integer>(pRtnStatInfo->SwapOut);
     v8::Local<v8::String> BlockIn=Nan::New<v8::String>("BlockIn").ToLocalChecked();
     v8::Local<v8::Integer> BlockInValue=Nan::New<v8::Integer>(pRtnStatInfo->BlockIn);
     v8::Local<v8::String> BlockOut=Nan::New<v8::String>("BlockOut").ToLocalChecked();
     v8::Local<v8::Integer> BlockOutValue=Nan::New<v8::Integer>(pRtnStatInfo->BlockOut);
     v8::Local<v8::String> Inter=Nan::New<v8::String>("Inter").ToLocalChecked();
     v8::Local<v8::Integer> InterValue=Nan::New<v8::Integer>(pRtnStatInfo->Inter);
     v8::Local<v8::String> Context=Nan::New<v8::String>("Context").ToLocalChecked();
     v8::Local<v8::Integer> ContextValue=Nan::New<v8::Integer>(pRtnStatInfo->Context);
     v8::Local<v8::String> CPUUser=Nan::New<v8::String>("CPUUser").ToLocalChecked();
     v8::Local<v8::Number> CPUUserValue=Nan::New<v8::Number>(pRtnStatInfo->CPUUser);
     v8::Local<v8::String> CPUSys=Nan::New<v8::String>("CPUSys").ToLocalChecked();
     v8::Local<v8::Number> CPUSysValue=Nan::New<v8::Number>(pRtnStatInfo->CPUSys);
     v8::Local<v8::String> CPUIdle=Nan::New<v8::String>("CPUIdle").ToLocalChecked();
     v8::Local<v8::Number> CPUIdleValue=Nan::New<v8::Number>(pRtnStatInfo->CPUIdle);
     v8::Local<v8::String> CPUIOWait=Nan::New<v8::String>("CPUIOWait").ToLocalChecked();
     v8::Local<v8::Number> CPUIOWaitValue=Nan::New<v8::Number>(pRtnStatInfo->CPUIOWait);
     v8::Local<v8::String> CPUSteal=Nan::New<v8::String>("CPUSteal").ToLocalChecked();
     v8::Local<v8::Number> CPUStealValue=Nan::New<v8::Number>(pRtnStatInfo->CPUSteal);

     v8::Local<v8::Object> pRtnStatInfoJS=Nan::New<v8::Object>();
     pRtnStatInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(ProcRun),Local<v8::Value>(ProcRunValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(ProcBlk),Local<v8::Value>(ProcBlkValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(SwapIn),Local<v8::Value>(SwapInValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(SwapOut),Local<v8::Value>(SwapOutValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(BlockIn),Local<v8::Value>(BlockInValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(BlockOut),Local<v8::Value>(BlockOutValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(Inter),Local<v8::Value>(InterValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(Context),Local<v8::Value>(ContextValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(CPUUser),Local<v8::Value>(CPUUserValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(CPUSys),Local<v8::Value>(CPUSysValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(CPUIdle),Local<v8::Value>(CPUIdleValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(CPUIOWait),Local<v8::Value>(CPUIOWaitValue));
     pRtnStatInfoJS->Set(Local<v8::Value>(CPUSteal),Local<v8::Value>(CPUStealValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnStatInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryTradeOrderRttCutLineTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryTradeOrderRttCutLineTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryTradeOrderRttCutLineField *pRspQryTradeOrderRttCutLine =(CShfeFtdcRspQryTradeOrderRttCutLineField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryTradeOrderRttCutLine->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryTradeOrderRttCutLine->MonTime).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRspQryTradeOrderRttCutLine->UserName).ToLocalChecked();
     v8::Local<v8::String> OrderRttCutLine=Nan::New<v8::String>("OrderRttCutLine").ToLocalChecked();
     v8::Local<v8::String> OrderRttCutLineValue=Nan::New(pRspQryTradeOrderRttCutLine->OrderRttCutLine).ToLocalChecked();
     v8::Local<v8::String> OrderRttWidth=Nan::New<v8::String>("OrderRttWidth").ToLocalChecked();
     v8::Local<v8::Integer> OrderRttWidthValue=Nan::New<v8::Integer>(pRspQryTradeOrderRttCutLine->OrderRttWidth);
     v8::Local<v8::Object> pRspQryTradeOrderRttCutLineJS=Nan::New<v8::Object>();
     pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value>(OrderRttCutLine),Local<v8::Value>(OrderRttCutLineValue));
     pRspQryTradeOrderRttCutLineJS->Set(Local<v8::Value>(OrderRttWidth),Local<v8::Value>(OrderRttWidthValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryTradeOrderRttCutLineJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnTradeOrderRttCutLineTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnTradeOrderRttCutLineTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnTradeOrderRttCutLineField *pRtnTradeOrderRttCutLine =(CShfeFtdcRtnTradeOrderRttCutLineField *)(paramArrayNew[0]);

     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnTradeOrderRttCutLine->MonDate).ToLocalChecked();
     v8::Local<v8::String> OrderRttCutLine=Nan::New<v8::String>("OrderRttCutLine").ToLocalChecked();
     v8::Local<v8::String> OrderRttCutLineValue=Nan::New(pRtnTradeOrderRttCutLine->OrderRttCutLine).ToLocalChecked();

     v8::Local<v8::Object> pRtnTradeOrderRttCutLineJS=Nan::New<v8::Object>();
     pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnTradeOrderRttCutLineJS->Set(Local<v8::Value>(OrderRttCutLine),Local<v8::Value>(OrderRttCutLineValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnTradeOrderRttCutLineJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryClientInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryClientInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryClientInfoField *pRspQryClientInfo =(CShfeFtdcRspQryClientInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRspQryClientInfo->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRspQryClientInfo->ClientName).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRspQryClientInfo->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRspQryClientInfo->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRspQryClientInfo->TradingRole);
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRspQryClientInfo->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRspQryClientInfo->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryClientInfo->OperationType);
     v8::Local<v8::Object> pRspQryClientInfoJS=Nan::New<v8::Object>();
     pRspQryClientInfoJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRspQryClientInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryClientInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnClientInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnClientInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnClientInfoField *pRtnClientInfo =(CShfeFtdcRtnClientInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> ClientID=Nan::New<v8::String>("ClientID").ToLocalChecked();
     v8::Local<v8::String> ClientIDValue=Nan::New(pRtnClientInfo->ClientID).ToLocalChecked();
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRtnClientInfo->ClientName).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardType=Nan::New<v8::String>("IdentifiedCardType").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardTypeValue=Nan::New(pRtnClientInfo->IdentifiedCardType).ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNo=Nan::New<v8::String>("IdentifiedCardNo").ToLocalChecked();
     v8::Local<v8::String> IdentifiedCardNoValue=Nan::New(pRtnClientInfo->IdentifiedCardNo).ToLocalChecked();
     v8::Local<v8::String> TradingRole=Nan::New<v8::String>("TradingRole").ToLocalChecked();
     v8::Local<v8::Integer> TradingRoleValue=Nan::New<v8::Integer>(pRtnClientInfo->TradingRole);
     v8::Local<v8::String> ClientType=Nan::New<v8::String>("ClientType").ToLocalChecked();
     v8::Local<v8::Integer> ClientTypeValue=Nan::New<v8::Integer>(pRtnClientInfo->ClientType);
     v8::Local<v8::String> IsActive=Nan::New<v8::String>("IsActive").ToLocalChecked();
     v8::Local<v8::Integer> IsActiveValue=Nan::New<v8::Integer>(pRtnClientInfo->IsActive);
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnClientInfo->OperationType);

     v8::Local<v8::Object> pRtnClientInfoJS=Nan::New<v8::Object>();
     pRtnClientInfoJS->Set(Local<v8::Value>(ClientID),Local<v8::Value>(ClientIDValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(IdentifiedCardType),Local<v8::Value>(IdentifiedCardTypeValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(IdentifiedCardNo),Local<v8::Value>(IdentifiedCardNoValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(TradingRole),Local<v8::Value>(TradingRoleValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(ClientType),Local<v8::Value>(ClientTypeValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(IsActive),Local<v8::Value>(IsActiveValue));
     pRtnClientInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnClientInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryEventDescriptionTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryEventDescriptionTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryEventDescriptionField *pRspQryEventDescription =(CShfeFtdcRspQryEventDescriptionField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> EventDesID=Nan::New<v8::String>("EventDesID").ToLocalChecked();
     v8::Local<v8::String> EventDesIDValue=Nan::New(pRspQryEventDescription->EventDesID).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRspQryEventDescription->UserName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryEventDescription->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryEventDescription->MonTime).ToLocalChecked();
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRspQryEventDescription->EventDes).ToLocalChecked();
     v8::Local<v8::Object> pRspQryEventDescriptionJS=Nan::New<v8::Object>();
     pRspQryEventDescriptionJS->Set(Local<v8::Value>(EventDesID),Local<v8::Value>(EventDesIDValue));
     pRspQryEventDescriptionJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRspQryEventDescriptionJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryEventDescriptionJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryEventDescriptionJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryEventDescriptionJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnEventDescriptionTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnEventDescriptionTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnEventDescriptionField *pRtnEventDescription =(CShfeFtdcRtnEventDescriptionField *)(paramArrayNew[0]);

     v8::Local<v8::String> EventDesID=Nan::New<v8::String>("EventDesID").ToLocalChecked();
     v8::Local<v8::String> EventDesIDValue=Nan::New(pRtnEventDescription->EventDesID).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRtnEventDescription->UserName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnEventDescription->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnEventDescription->MonTime).ToLocalChecked();
     v8::Local<v8::String> EventDes=Nan::New<v8::String>("EventDes").ToLocalChecked();
     v8::Local<v8::String> EventDesValue=Nan::New(pRtnEventDescription->EventDes).ToLocalChecked();

     v8::Local<v8::Object> pRtnEventDescriptionJS=Nan::New<v8::Object>();
     pRtnEventDescriptionJS->Set(Local<v8::Value>(EventDesID),Local<v8::Value>(EventDesIDValue));
     pRtnEventDescriptionJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRtnEventDescriptionJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnEventDescriptionJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnEventDescriptionJS->Set(Local<v8::Value>(EventDes),Local<v8::Value>(EventDesValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnEventDescriptionJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFrontUniqueIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFrontUniqueIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFrontUniqueIDField *pRspQryFrontUniqueID =(CShfeFtdcRspQryFrontUniqueIDField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRspQryFrontUniqueID->FrontID);
     v8::Local<v8::String> FrontName=Nan::New<v8::String>("FrontName").ToLocalChecked();
     v8::Local<v8::String> FrontNameValue=Nan::New(pRspQryFrontUniqueID->FrontName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryFrontUniqueIDJS=Nan::New<v8::Object>();
     pRspQryFrontUniqueIDJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRspQryFrontUniqueIDJS->Set(Local<v8::Value>(FrontName),Local<v8::Value>(FrontNameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFrontUniqueIDJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFrontUniqueIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFrontUniqueIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFrontUniqueIDField *pRtnFrontUniqueID =(CShfeFtdcRtnFrontUniqueIDField *)(paramArrayNew[0]);

     v8::Local<v8::String> FrontID=Nan::New<v8::String>("FrontID").ToLocalChecked();
     v8::Local<v8::Integer> FrontIDValue=Nan::New<v8::Integer>(pRtnFrontUniqueID->FrontID);
     v8::Local<v8::String> FrontName=Nan::New<v8::String>("FrontName").ToLocalChecked();
     v8::Local<v8::String> FrontNameValue=Nan::New(pRtnFrontUniqueID->FrontName).ToLocalChecked();

     v8::Local<v8::Object> pRtnFrontUniqueIDJS=Nan::New<v8::Object>();
     pRtnFrontUniqueIDJS->Set(Local<v8::Value>(FrontID),Local<v8::Value>(FrontIDValue));
     pRtnFrontUniqueIDJS->Set(Local<v8::Value>(FrontName),Local<v8::Value>(FrontNameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFrontUniqueIDJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPartyLinkAddrChangeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkAddrChangeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPartyLinkAddrChangeField *pRspQryNetPartyLinkAddrChange =(CShfeFtdcRspQryNetPartyLinkAddrChangeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkAddrChange->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkAddrChange->ID);
     v8::Local<v8::String> RelationID=Nan::New<v8::String>("RelationID").ToLocalChecked();
     v8::Local<v8::Integer> RelationIDValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkAddrChange->RelationID);
     v8::Local<v8::String> OLDADDRESS=Nan::New<v8::String>("OLDADDRESS").ToLocalChecked();
     v8::Local<v8::String> OLDADDRESSValue=Nan::New(pRspQryNetPartyLinkAddrChange->OLDADDRESS).ToLocalChecked();
     v8::Local<v8::String> NEWADDRESS=Nan::New<v8::String>("NEWADDRESS").ToLocalChecked();
     v8::Local<v8::String> NEWADDRESSValue=Nan::New(pRspQryNetPartyLinkAddrChange->NEWADDRESS).ToLocalChecked();
     v8::Local<v8::String> OPERATOR=Nan::New<v8::String>("OPERATOR").ToLocalChecked();
     v8::Local<v8::String> OPERATORValue=Nan::New(pRspQryNetPartyLinkAddrChange->OPERATOR).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetPartyLinkAddrChange->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetPartyLinkAddrChange->MonTime).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPartyLinkAddrChangeJS=Nan::New<v8::Object>();
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(RelationID),Local<v8::Value>(RelationIDValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OLDADDRESS),Local<v8::Value>(OLDADDRESSValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(NEWADDRESS),Local<v8::Value>(NEWADDRESSValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OPERATOR),Local<v8::Value>(OPERATORValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPartyLinkAddrChangeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPartyLinkAddrChangeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkAddrChangeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPartyLinkAddrChangeField *pRtnNetPartyLinkAddrChange =(CShfeFtdcRtnNetPartyLinkAddrChangeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPartyLinkAddrChange->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPartyLinkAddrChange->ID);
     v8::Local<v8::String> RelationID=Nan::New<v8::String>("RelationID").ToLocalChecked();
     v8::Local<v8::Integer> RelationIDValue=Nan::New<v8::Integer>(pRtnNetPartyLinkAddrChange->RelationID);
     v8::Local<v8::String> OLDADDRESS=Nan::New<v8::String>("OLDADDRESS").ToLocalChecked();
     v8::Local<v8::String> OLDADDRESSValue=Nan::New(pRtnNetPartyLinkAddrChange->OLDADDRESS).ToLocalChecked();
     v8::Local<v8::String> NEWADDRESS=Nan::New<v8::String>("NEWADDRESS").ToLocalChecked();
     v8::Local<v8::String> NEWADDRESSValue=Nan::New(pRtnNetPartyLinkAddrChange->NEWADDRESS).ToLocalChecked();
     v8::Local<v8::String> OPERATOR=Nan::New<v8::String>("OPERATOR").ToLocalChecked();
     v8::Local<v8::String> OPERATORValue=Nan::New(pRtnNetPartyLinkAddrChange->OPERATOR).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetPartyLinkAddrChange->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetPartyLinkAddrChange->MonTime).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPartyLinkAddrChangeJS=Nan::New<v8::Object>();
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(RelationID),Local<v8::Value>(RelationIDValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OLDADDRESS),Local<v8::Value>(OLDADDRESSValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(NEWADDRESS),Local<v8::Value>(NEWADDRESSValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(OPERATOR),Local<v8::Value>(OPERATORValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetPartyLinkAddrChangeJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPartyLinkAddrChangeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDelPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDelPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDelPartyLinkInfoField *pRspQryNetDelPartyLinkInfo =(CShfeFtdcRspQryNetDelPartyLinkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDelPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDelPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRspQryNetDelPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRspQryNetDelPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRspQryNetDelPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRspQryNetDelPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRspQryNetDelPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRspQryNetDelPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRspQryNetDelPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRspQryNetDelPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRspQryNetDelPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRspQryNetDelPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRspQryNetDelPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRspQryNetDelPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryNetDelPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRspQryNetDelPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRspQryNetDelPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRspQryNetDelPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetDelPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRspQryNetDelPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRspQryNetDelPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRspQryNetDelPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRspQryNetDelPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRspQryNetDelPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRspQryNetDelPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRspQryNetDelPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRspQryNetDelPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRspQryNetDelPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRspQryNetDelPartyLinkInfo->PRO).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDelPartyLinkInfoJS=Nan::New<v8::Object>();
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRspQryNetDelPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDelPartyLinkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDelPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDelPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDelPartyLinkInfoField *pRtnNetDelPartyLinkInfo =(CShfeFtdcRtnNetDelPartyLinkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDelPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDelPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRtnNetDelPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRtnNetDelPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRtnNetDelPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRtnNetDelPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRtnNetDelPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRtnNetDelPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRtnNetDelPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRtnNetDelPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRtnNetDelPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRtnNetDelPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRtnNetDelPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRtnNetDelPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnNetDelPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRtnNetDelPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRtnNetDelPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRtnNetDelPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetDelPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRtnNetDelPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRtnNetDelPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRtnNetDelPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRtnNetDelPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRtnNetDelPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRtnNetDelPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRtnNetDelPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRtnNetDelPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRtnNetDelPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRtnNetDelPartyLinkInfo->PRO).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetDelPartyLinkInfoJS=Nan::New<v8::Object>();
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRtnNetDelPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDelPartyLinkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryPerformanceTopTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryPerformanceTopTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryPerformanceTopField *pRspQryPerformanceTop =(CShfeFtdcRspQryPerformanceTopField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->OperationType);
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryPerformanceTop->AttrType).ToLocalChecked();
     v8::Local<v8::String> NetArea=Nan::New<v8::String>("NetArea").ToLocalChecked();
     v8::Local<v8::Integer> NetAreaValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->NetArea);
     v8::Local<v8::String> NetSubArea=Nan::New<v8::String>("NetSubArea").ToLocalChecked();
     v8::Local<v8::String> NetSubAreaValue=Nan::New(pRspQryPerformanceTop->NetSubArea).ToLocalChecked();
     v8::Local<v8::String> KeyWord=Nan::New<v8::String>("KeyWord").ToLocalChecked();
     v8::Local<v8::String> KeyWordValue=Nan::New(pRspQryPerformanceTop->KeyWord).ToLocalChecked();
     v8::Local<v8::String> SortValue=Nan::New<v8::String>("SortValue").ToLocalChecked();
     v8::Local<v8::Integer> SortValueValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->SortValue);
     v8::Local<v8::String> SortType=Nan::New<v8::String>("SortType").ToLocalChecked();
     v8::Local<v8::Integer> SortTypeValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->SortType);
     v8::Local<v8::String> DuringTimeType=Nan::New<v8::String>("DuringTimeType").ToLocalChecked();
     v8::Local<v8::Integer> DuringTimeTypeValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->DuringTimeType);
     v8::Local<v8::String> DuringTimeValue=Nan::New<v8::String>("DuringTimeValue").ToLocalChecked();
     v8::Local<v8::Integer> DuringTimeValueValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->DuringTimeValue);
     v8::Local<v8::String> TopN=Nan::New<v8::String>("TopN").ToLocalChecked();
     v8::Local<v8::Integer> TopNValue=Nan::New<v8::Integer>(pRspQryPerformanceTop->TopN);
     v8::Local<v8::String> TopResult=Nan::New<v8::String>("TopResult").ToLocalChecked();
     v8::Local<v8::String> TopResultValue=Nan::New(pRspQryPerformanceTop->TopResult).ToLocalChecked();
     v8::Local<v8::Object> pRspQryPerformanceTopJS=Nan::New<v8::Object>();
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(NetArea),Local<v8::Value>(NetAreaValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(NetSubArea),Local<v8::Value>(NetSubAreaValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(KeyWord),Local<v8::Value>(KeyWordValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(SortValue),Local<v8::Value>(SortValueValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(SortType),Local<v8::Value>(SortTypeValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(DuringTimeType),Local<v8::Value>(DuringTimeTypeValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(DuringTimeValue),Local<v8::Value>(DuringTimeValueValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(TopN),Local<v8::Value>(TopNValue));
     pRspQryPerformanceTopJS->Set(Local<v8::Value>(TopResult),Local<v8::Value>(TopResultValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryPerformanceTopJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnPerformanceTopTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnPerformanceTopTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnPerformanceTopField *pRtnPerformanceTop =(CShfeFtdcRtnPerformanceTopField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnPerformanceTop->OperationType);
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnPerformanceTop->AttrType).ToLocalChecked();
     v8::Local<v8::String> NetArea=Nan::New<v8::String>("NetArea").ToLocalChecked();
     v8::Local<v8::Integer> NetAreaValue=Nan::New<v8::Integer>(pRtnPerformanceTop->NetArea);
     v8::Local<v8::String> NetSubArea=Nan::New<v8::String>("NetSubArea").ToLocalChecked();
     v8::Local<v8::String> NetSubAreaValue=Nan::New(pRtnPerformanceTop->NetSubArea).ToLocalChecked();
     v8::Local<v8::String> KeyWord=Nan::New<v8::String>("KeyWord").ToLocalChecked();
     v8::Local<v8::String> KeyWordValue=Nan::New(pRtnPerformanceTop->KeyWord).ToLocalChecked();
     v8::Local<v8::String> SortValue=Nan::New<v8::String>("SortValue").ToLocalChecked();
     v8::Local<v8::Integer> SortValueValue=Nan::New<v8::Integer>(pRtnPerformanceTop->SortValue);
     v8::Local<v8::String> SortType=Nan::New<v8::String>("SortType").ToLocalChecked();
     v8::Local<v8::Integer> SortTypeValue=Nan::New<v8::Integer>(pRtnPerformanceTop->SortType);
     v8::Local<v8::String> DuringTimeType=Nan::New<v8::String>("DuringTimeType").ToLocalChecked();
     v8::Local<v8::Integer> DuringTimeTypeValue=Nan::New<v8::Integer>(pRtnPerformanceTop->DuringTimeType);
     v8::Local<v8::String> DuringTimeValue=Nan::New<v8::String>("DuringTimeValue").ToLocalChecked();
     v8::Local<v8::Integer> DuringTimeValueValue=Nan::New<v8::Integer>(pRtnPerformanceTop->DuringTimeValue);
     v8::Local<v8::String> TopN=Nan::New<v8::String>("TopN").ToLocalChecked();
     v8::Local<v8::Integer> TopNValue=Nan::New<v8::Integer>(pRtnPerformanceTop->TopN);
     v8::Local<v8::String> TopResult=Nan::New<v8::String>("TopResult").ToLocalChecked();
     v8::Local<v8::String> TopResultValue=Nan::New(pRtnPerformanceTop->TopResult).ToLocalChecked();

     v8::Local<v8::Object> pRtnPerformanceTopJS=Nan::New<v8::Object>();
     pRtnPerformanceTopJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(NetArea),Local<v8::Value>(NetAreaValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(NetSubArea),Local<v8::Value>(NetSubAreaValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(KeyWord),Local<v8::Value>(KeyWordValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(SortValue),Local<v8::Value>(SortValueValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(SortType),Local<v8::Value>(SortTypeValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(DuringTimeType),Local<v8::Value>(DuringTimeTypeValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(DuringTimeValue),Local<v8::Value>(DuringTimeValueValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(TopN),Local<v8::Value>(TopNValue));
     pRtnPerformanceTopJS->Set(Local<v8::Value>(TopResult),Local<v8::Value>(TopResultValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnPerformanceTopJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryInstrumentStatusTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryInstrumentStatusTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryInstrumentStatusField *pRspQryInstrumentStatus =(CShfeFtdcRspQryInstrumentStatusField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRspQryInstrumentStatus->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryInstrumentStatus->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> InstrumentStatus=Nan::New<v8::String>("InstrumentStatus").ToLocalChecked();
     v8::Local<v8::Integer> InstrumentStatusValue=Nan::New<v8::Integer>(pRspQryInstrumentStatus->InstrumentStatus);
     v8::Local<v8::String> TradingSegmentSN=Nan::New<v8::String>("TradingSegmentSN").ToLocalChecked();
     v8::Local<v8::Integer> TradingSegmentSNValue=Nan::New<v8::Integer>(pRspQryInstrumentStatus->TradingSegmentSN);
     v8::Local<v8::String> EnterTime=Nan::New<v8::String>("EnterTime").ToLocalChecked();
     v8::Local<v8::String> EnterTimeValue=Nan::New(pRspQryInstrumentStatus->EnterTime).ToLocalChecked();
     v8::Local<v8::String> EnterReason=Nan::New<v8::String>("EnterReason").ToLocalChecked();
     v8::Local<v8::Integer> EnterReasonValue=Nan::New<v8::Integer>(pRspQryInstrumentStatus->EnterReason);
     v8::Local<v8::String> EnterDate=Nan::New<v8::String>("EnterDate").ToLocalChecked();
     v8::Local<v8::String> EnterDateValue=Nan::New(pRspQryInstrumentStatus->EnterDate).ToLocalChecked();
     v8::Local<v8::Object> pRspQryInstrumentStatusJS=Nan::New<v8::Object>();
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(InstrumentStatus),Local<v8::Value>(InstrumentStatusValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(TradingSegmentSN),Local<v8::Value>(TradingSegmentSNValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(EnterTime),Local<v8::Value>(EnterTimeValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(EnterReason),Local<v8::Value>(EnterReasonValue));
     pRspQryInstrumentStatusJS->Set(Local<v8::Value>(EnterDate),Local<v8::Value>(EnterDateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryInstrumentStatusJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnInstrumentStatusTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnInstrumentStatusTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnInstrumentStatusField *pRtnInstrumentStatus =(CShfeFtdcRtnInstrumentStatusField *)(paramArrayNew[0]);

     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRtnInstrumentStatus->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnInstrumentStatus->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> InstrumentStatus=Nan::New<v8::String>("InstrumentStatus").ToLocalChecked();
     v8::Local<v8::Integer> InstrumentStatusValue=Nan::New<v8::Integer>(pRtnInstrumentStatus->InstrumentStatus);
     v8::Local<v8::String> TradingSegmentSN=Nan::New<v8::String>("TradingSegmentSN").ToLocalChecked();
     v8::Local<v8::Integer> TradingSegmentSNValue=Nan::New<v8::Integer>(pRtnInstrumentStatus->TradingSegmentSN);
     v8::Local<v8::String> EnterTime=Nan::New<v8::String>("EnterTime").ToLocalChecked();
     v8::Local<v8::String> EnterTimeValue=Nan::New(pRtnInstrumentStatus->EnterTime).ToLocalChecked();
     v8::Local<v8::String> EnterReason=Nan::New<v8::String>("EnterReason").ToLocalChecked();
     v8::Local<v8::Integer> EnterReasonValue=Nan::New<v8::Integer>(pRtnInstrumentStatus->EnterReason);
     v8::Local<v8::String> EnterDate=Nan::New<v8::String>("EnterDate").ToLocalChecked();
     v8::Local<v8::String> EnterDateValue=Nan::New(pRtnInstrumentStatus->EnterDate).ToLocalChecked();

     v8::Local<v8::Object> pRtnInstrumentStatusJS=Nan::New<v8::Object>();
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(InstrumentStatus),Local<v8::Value>(InstrumentStatusValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(TradingSegmentSN),Local<v8::Value>(TradingSegmentSNValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(EnterTime),Local<v8::Value>(EnterTimeValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(EnterReason),Local<v8::Value>(EnterReasonValue));
     pRtnInstrumentStatusJS->Set(Local<v8::Value>(EnterDate),Local<v8::Value>(EnterDateValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnInstrumentStatusJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryCurrTradingSegmentAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryCurrTradingSegmentAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryCurrTradingSegmentAttrField *pRspQryCurrTradingSegmentAttr =(CShfeFtdcRspQryCurrTradingSegmentAttrField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRspQryCurrTradingSegmentAttr->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> TradingSegmentSN=Nan::New<v8::String>("TradingSegmentSN").ToLocalChecked();
     v8::Local<v8::Integer> TradingSegmentSNValue=Nan::New<v8::Integer>(pRspQryCurrTradingSegmentAttr->TradingSegmentSN);
     v8::Local<v8::String> TradingSegmentName=Nan::New<v8::String>("TradingSegmentName").ToLocalChecked();
     v8::Local<v8::String> TradingSegmentNameValue=Nan::New(pRspQryCurrTradingSegmentAttr->TradingSegmentName).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRspQryCurrTradingSegmentAttr->StartTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentStatus=Nan::New<v8::String>("InstrumentStatus").ToLocalChecked();
     v8::Local<v8::Integer> InstrumentStatusValue=Nan::New<v8::Integer>(pRspQryCurrTradingSegmentAttr->InstrumentStatus);
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRspQryCurrTradingSegmentAttr->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> AdvanceDays=Nan::New<v8::String>("AdvanceDays").ToLocalChecked();
     v8::Local<v8::Integer> AdvanceDaysValue=Nan::New<v8::Integer>(pRspQryCurrTradingSegmentAttr->AdvanceDays);
     v8::Local<v8::Object> pRspQryCurrTradingSegmentAttrJS=Nan::New<v8::Object>();
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(TradingSegmentSN),Local<v8::Value>(TradingSegmentSNValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(TradingSegmentName),Local<v8::Value>(TradingSegmentNameValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(InstrumentStatus),Local<v8::Value>(InstrumentStatusValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRspQryCurrTradingSegmentAttrJS->Set(Local<v8::Value>(AdvanceDays),Local<v8::Value>(AdvanceDaysValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryCurrTradingSegmentAttrJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnCurrTradingSegmentAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnCurrTradingSegmentAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnCurrTradingSegmentAttrField *pRtnCurrTradingSegmentAttr =(CShfeFtdcRtnCurrTradingSegmentAttrField *)(paramArrayNew[0]);

     v8::Local<v8::String> SettlementGroupID=Nan::New<v8::String>("SettlementGroupID").ToLocalChecked();
     v8::Local<v8::String> SettlementGroupIDValue=Nan::New(pRtnCurrTradingSegmentAttr->SettlementGroupID).ToLocalChecked();
     v8::Local<v8::String> TradingSegmentSN=Nan::New<v8::String>("TradingSegmentSN").ToLocalChecked();
     v8::Local<v8::Integer> TradingSegmentSNValue=Nan::New<v8::Integer>(pRtnCurrTradingSegmentAttr->TradingSegmentSN);
     v8::Local<v8::String> TradingSegmentName=Nan::New<v8::String>("TradingSegmentName").ToLocalChecked();
     v8::Local<v8::String> TradingSegmentNameValue=Nan::New(pRtnCurrTradingSegmentAttr->TradingSegmentName).ToLocalChecked();
     v8::Local<v8::String> StartTime=Nan::New<v8::String>("StartTime").ToLocalChecked();
     v8::Local<v8::String> StartTimeValue=Nan::New(pRtnCurrTradingSegmentAttr->StartTime).ToLocalChecked();
     v8::Local<v8::String> InstrumentStatus=Nan::New<v8::String>("InstrumentStatus").ToLocalChecked();
     v8::Local<v8::Integer> InstrumentStatusValue=Nan::New<v8::Integer>(pRtnCurrTradingSegmentAttr->InstrumentStatus);
     v8::Local<v8::String> InstrumentID=Nan::New<v8::String>("InstrumentID").ToLocalChecked();
     v8::Local<v8::String> InstrumentIDValue=Nan::New(pRtnCurrTradingSegmentAttr->InstrumentID).ToLocalChecked();
     v8::Local<v8::String> AdvanceDays=Nan::New<v8::String>("AdvanceDays").ToLocalChecked();
     v8::Local<v8::Integer> AdvanceDaysValue=Nan::New<v8::Integer>(pRtnCurrTradingSegmentAttr->AdvanceDays);

     v8::Local<v8::Object> pRtnCurrTradingSegmentAttrJS=Nan::New<v8::Object>();
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(SettlementGroupID),Local<v8::Value>(SettlementGroupIDValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(TradingSegmentSN),Local<v8::Value>(TradingSegmentSNValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(TradingSegmentName),Local<v8::Value>(TradingSegmentNameValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(StartTime),Local<v8::Value>(StartTimeValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(InstrumentStatus),Local<v8::Value>(InstrumentStatusValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(InstrumentID),Local<v8::Value>(InstrumentIDValue));
     pRtnCurrTradingSegmentAttrJS->Set(Local<v8::Value>(AdvanceDays),Local<v8::Value>(AdvanceDaysValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnCurrTradingSegmentAttrJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetAreaField *pRspQryNetArea =(CShfeFtdcRspQryNetAreaField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetArea->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetArea->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetAreaJS=Nan::New<v8::Object>();
     pRspQryNetAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetAreaJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetAreaField *pRtnNetArea =(CShfeFtdcRtnNetAreaField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetArea->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetArea->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetAreaJS=Nan::New<v8::Object>();
     pRtnNetAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetAreaJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetSubAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetSubAreaField *pRspQryNetSubArea =(CShfeFtdcRspQryNetSubAreaField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetSubArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetSubArea->ID);
     v8::Local<v8::String> SysNetAreaID=Nan::New<v8::String>("SysNetAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetAreaIDValue=Nan::New<v8::Integer>(pRspQryNetSubArea->SysNetAreaID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetSubArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetSubArea->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetSubAreaJS=Nan::New<v8::Object>();
     pRspQryNetSubAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetSubAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetSubAreaJS->Set(Local<v8::Value>(SysNetAreaID),Local<v8::Value>(SysNetAreaIDValue));
     pRspQryNetSubAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetSubAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetSubAreaJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetSubAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetSubAreaField *pRtnNetSubArea =(CShfeFtdcRtnNetSubAreaField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetSubArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetSubArea->ID);
     v8::Local<v8::String> SysNetAreaID=Nan::New<v8::String>("SysNetAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetAreaIDValue=Nan::New<v8::Integer>(pRtnNetSubArea->SysNetAreaID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetSubArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetSubArea->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetSubAreaJS=Nan::New<v8::Object>();
     pRtnNetSubAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetSubAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetSubAreaJS->Set(Local<v8::Value>(SysNetAreaID),Local<v8::Value>(SysNetAreaIDValue));
     pRtnNetSubAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetSubAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetSubAreaJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetSubAreaIPTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubAreaIPTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetSubAreaIPField *pRspQryNetSubAreaIP =(CShfeFtdcRspQryNetSubAreaIPField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetSubAreaIP->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetSubAreaIP->ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRspQryNetSubAreaIP->SysNetSubAreaID);
     v8::Local<v8::String> IP=Nan::New<v8::String>("IP").ToLocalChecked();
     v8::Local<v8::String> IPValue=Nan::New(pRspQryNetSubAreaIP->IP).ToLocalChecked();
     v8::Local<v8::String> Mask=Nan::New<v8::String>("Mask").ToLocalChecked();
     v8::Local<v8::String> MaskValue=Nan::New(pRspQryNetSubAreaIP->Mask).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetSubAreaIPJS=Nan::New<v8::Object>();
     pRspQryNetSubAreaIPJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetSubAreaIPJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetSubAreaIPJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRspQryNetSubAreaIPJS->Set(Local<v8::Value>(IP),Local<v8::Value>(IPValue));
     pRspQryNetSubAreaIPJS->Set(Local<v8::Value>(Mask),Local<v8::Value>(MaskValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetSubAreaIPJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetSubAreaIPTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubAreaIPTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetSubAreaIPField *pRtnNetSubAreaIP =(CShfeFtdcRtnNetSubAreaIPField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetSubAreaIP->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetSubAreaIP->ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRtnNetSubAreaIP->SysNetSubAreaID);
     v8::Local<v8::String> IP=Nan::New<v8::String>("IP").ToLocalChecked();
     v8::Local<v8::String> IPValue=Nan::New(pRtnNetSubAreaIP->IP).ToLocalChecked();
     v8::Local<v8::String> Mask=Nan::New<v8::String>("Mask").ToLocalChecked();
     v8::Local<v8::String> MaskValue=Nan::New(pRtnNetSubAreaIP->Mask).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetSubAreaIPJS=Nan::New<v8::Object>();
     pRtnNetSubAreaIPJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetSubAreaIPJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetSubAreaIPJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRtnNetSubAreaIPJS->Set(Local<v8::Value>(IP),Local<v8::Value>(IPValue));
     pRtnNetSubAreaIPJS->Set(Local<v8::Value>(Mask),Local<v8::Value>(MaskValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetSubAreaIPJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceField *pRspQryNetDevice =(CShfeFtdcRspQryNetDeviceField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDevice->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetDevice->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->MonitorType_ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRspQryNetDevice->SysNetSubAreaID);
     v8::Local<v8::String> CATEGORY_ID=Nan::New<v8::String>("CATEGORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> CATEGORY_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->CATEGORY_ID);
     v8::Local<v8::String> FuctionArea=Nan::New<v8::String>("FuctionArea").ToLocalChecked();
     v8::Local<v8::String> FuctionAreaValue=Nan::New(pRspQryNetDevice->FuctionArea).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetDevice->IPADDR).ToLocalChecked();
     v8::Local<v8::String> IPDECODE=Nan::New<v8::String>("IPDECODE").ToLocalChecked();
     v8::Local<v8::Integer> IPDECODEValue=Nan::New<v8::Integer>(pRspQryNetDevice->IPDECODE);
     v8::Local<v8::String> NAME=Nan::New<v8::String>("NAME").ToLocalChecked();
     v8::Local<v8::String> NAMEValue=Nan::New(pRspQryNetDevice->NAME).ToLocalChecked();
     v8::Local<v8::String> PORTNUMBER=Nan::New<v8::String>("PORTNUMBER").ToLocalChecked();
     v8::Local<v8::Integer> PORTNUMBERValue=Nan::New<v8::Integer>(pRspQryNetDevice->PORTNUMBER);
     v8::Local<v8::String> CONFIGFILE=Nan::New<v8::String>("CONFIGFILE").ToLocalChecked();
     v8::Local<v8::String> CONFIGFILEValue=Nan::New(pRspQryNetDevice->CONFIGFILE).ToLocalChecked();
     v8::Local<v8::String> RCOMMUNITY=Nan::New<v8::String>("RCOMMUNITY").ToLocalChecked();
     v8::Local<v8::String> RCOMMUNITYValue=Nan::New(pRspQryNetDevice->RCOMMUNITY).ToLocalChecked();
     v8::Local<v8::String> SNMPVERSION=Nan::New<v8::String>("SNMPVERSION").ToLocalChecked();
     v8::Local<v8::Integer> SNMPVERSIONValue=Nan::New<v8::Integer>(pRspQryNetDevice->SNMPVERSION);
     v8::Local<v8::String> RAMSIZE=Nan::New<v8::String>("RAMSIZE").ToLocalChecked();
     v8::Local<v8::Integer> RAMSIZEValue=Nan::New<v8::Integer>(pRspQryNetDevice->RAMSIZE);
     v8::Local<v8::String> FLASHSIZE=Nan::New<v8::String>("FLASHSIZE").ToLocalChecked();
     v8::Local<v8::Integer> FLASHSIZEValue=Nan::New<v8::Integer>(pRspQryNetDevice->FLASHSIZE);
     v8::Local<v8::String> NVRAMSIZE=Nan::New<v8::String>("NVRAMSIZE").ToLocalChecked();
     v8::Local<v8::Integer> NVRAMSIZEValue=Nan::New<v8::Integer>(pRspQryNetDevice->NVRAMSIZE);
     v8::Local<v8::String> CABINET_ID=Nan::New<v8::String>("CABINET_ID").ToLocalChecked();
     v8::Local<v8::Integer> CABINET_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->CABINET_ID);
     v8::Local<v8::String> ROOM_ID=Nan::New<v8::String>("ROOM_ID").ToLocalChecked();
     v8::Local<v8::Integer> ROOM_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->ROOM_ID);
     v8::Local<v8::String> IOSVERSION_ID=Nan::New<v8::String>("IOSVERSION_ID").ToLocalChecked();
     v8::Local<v8::Integer> IOSVERSION_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->IOSVERSION_ID);
     v8::Local<v8::String> DESCRIPTION=Nan::New<v8::String>("DESCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DESCRIPTIONValue=Nan::New(pRspQryNetDevice->DESCRIPTION).ToLocalChecked();
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRspQryNetDevice->USERNAME).ToLocalChecked();
     v8::Local<v8::String> PASSWD=Nan::New<v8::String>("PASSWD").ToLocalChecked();
     v8::Local<v8::String> PASSWDValue=Nan::New(pRspQryNetDevice->PASSWD).ToLocalChecked();
     v8::Local<v8::String> ENPASSWD=Nan::New<v8::String>("ENPASSWD").ToLocalChecked();
     v8::Local<v8::String> ENPASSWDValue=Nan::New(pRspQryNetDevice->ENPASSWD).ToLocalChecked();
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->MANUFACTORY_ID);
     v8::Local<v8::String> CFGSAVETYPE=Nan::New<v8::String>("CFGSAVETYPE").ToLocalChecked();
     v8::Local<v8::Integer> CFGSAVETYPEValue=Nan::New<v8::Integer>(pRspQryNetDevice->CFGSAVETYPE);
     v8::Local<v8::String> DEVICETYPE=Nan::New<v8::String>("DEVICETYPE").ToLocalChecked();
     v8::Local<v8::String> DEVICETYPEValue=Nan::New(pRspQryNetDevice->DEVICETYPE).ToLocalChecked();
     v8::Local<v8::String> SENDSMS=Nan::New<v8::String>("SENDSMS").ToLocalChecked();
     v8::Local<v8::Integer> SENDSMSValue=Nan::New<v8::Integer>(pRspQryNetDevice->SENDSMS);
     v8::Local<v8::String> ISSNMP=Nan::New<v8::String>("ISSNMP").ToLocalChecked();
     v8::Local<v8::Integer> ISSNMPValue=Nan::New<v8::Integer>(pRspQryNetDevice->ISSNMP);
     v8::Local<v8::String> SLOTNUM=Nan::New<v8::String>("SLOTNUM").ToLocalChecked();
     v8::Local<v8::Integer> SLOTNUMValue=Nan::New<v8::Integer>(pRspQryNetDevice->SLOTNUM);
     v8::Local<v8::String> ISPING=Nan::New<v8::String>("ISPING").ToLocalChecked();
     v8::Local<v8::Integer> ISPINGValue=Nan::New<v8::Integer>(pRspQryNetDevice->ISPING);
     v8::Local<v8::String> IFNUM=Nan::New<v8::String>("IFNUM").ToLocalChecked();
     v8::Local<v8::Integer> IFNUMValue=Nan::New<v8::Integer>(pRspQryNetDevice->IFNUM);
     v8::Local<v8::String> APPLICATION_ID=Nan::New<v8::String>("APPLICATION_ID").ToLocalChecked();
     v8::Local<v8::Integer> APPLICATION_IDValue=Nan::New<v8::Integer>(pRspQryNetDevice->APPLICATION_ID);
     v8::Local<v8::Object> pRspQryNetDeviceJS=Nan::New<v8::Object>();
     pRspQryNetDeviceJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(CATEGORY_ID),Local<v8::Value>(CATEGORY_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(FuctionArea),Local<v8::Value>(FuctionAreaValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(IPDECODE),Local<v8::Value>(IPDECODEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(NAME),Local<v8::Value>(NAMEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(PORTNUMBER),Local<v8::Value>(PORTNUMBERValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(CONFIGFILE),Local<v8::Value>(CONFIGFILEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(RCOMMUNITY),Local<v8::Value>(RCOMMUNITYValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(SNMPVERSION),Local<v8::Value>(SNMPVERSIONValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(RAMSIZE),Local<v8::Value>(RAMSIZEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(FLASHSIZE),Local<v8::Value>(FLASHSIZEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(NVRAMSIZE),Local<v8::Value>(NVRAMSIZEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(CABINET_ID),Local<v8::Value>(CABINET_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ROOM_ID),Local<v8::Value>(ROOM_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(IOSVERSION_ID),Local<v8::Value>(IOSVERSION_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(DESCRIPTION),Local<v8::Value>(DESCRIPTIONValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(PASSWD),Local<v8::Value>(PASSWDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ENPASSWD),Local<v8::Value>(ENPASSWDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(CFGSAVETYPE),Local<v8::Value>(CFGSAVETYPEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(DEVICETYPE),Local<v8::Value>(DEVICETYPEValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(SENDSMS),Local<v8::Value>(SENDSMSValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ISSNMP),Local<v8::Value>(ISSNMPValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(SLOTNUM),Local<v8::Value>(SLOTNUMValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(ISPING),Local<v8::Value>(ISPINGValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(IFNUM),Local<v8::Value>(IFNUMValue));
     pRspQryNetDeviceJS->Set(Local<v8::Value>(APPLICATION_ID),Local<v8::Value>(APPLICATION_IDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDeviceTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDeviceField *pRtnNetDevice =(CShfeFtdcRtnNetDeviceField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDevice->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDevice->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetDevice->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->MonitorType_ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRtnNetDevice->SysNetSubAreaID);
     v8::Local<v8::String> CATEGORY_ID=Nan::New<v8::String>("CATEGORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> CATEGORY_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->CATEGORY_ID);
     v8::Local<v8::String> FuctionArea=Nan::New<v8::String>("FuctionArea").ToLocalChecked();
     v8::Local<v8::String> FuctionAreaValue=Nan::New(pRtnNetDevice->FuctionArea).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetDevice->IPADDR).ToLocalChecked();
     v8::Local<v8::String> IPDECODE=Nan::New<v8::String>("IPDECODE").ToLocalChecked();
     v8::Local<v8::Integer> IPDECODEValue=Nan::New<v8::Integer>(pRtnNetDevice->IPDECODE);
     v8::Local<v8::String> NAME=Nan::New<v8::String>("NAME").ToLocalChecked();
     v8::Local<v8::String> NAMEValue=Nan::New(pRtnNetDevice->NAME).ToLocalChecked();
     v8::Local<v8::String> PORTNUMBER=Nan::New<v8::String>("PORTNUMBER").ToLocalChecked();
     v8::Local<v8::Integer> PORTNUMBERValue=Nan::New<v8::Integer>(pRtnNetDevice->PORTNUMBER);
     v8::Local<v8::String> CONFIGFILE=Nan::New<v8::String>("CONFIGFILE").ToLocalChecked();
     v8::Local<v8::String> CONFIGFILEValue=Nan::New(pRtnNetDevice->CONFIGFILE).ToLocalChecked();
     v8::Local<v8::String> RCOMMUNITY=Nan::New<v8::String>("RCOMMUNITY").ToLocalChecked();
     v8::Local<v8::String> RCOMMUNITYValue=Nan::New(pRtnNetDevice->RCOMMUNITY).ToLocalChecked();
     v8::Local<v8::String> SNMPVERSION=Nan::New<v8::String>("SNMPVERSION").ToLocalChecked();
     v8::Local<v8::Integer> SNMPVERSIONValue=Nan::New<v8::Integer>(pRtnNetDevice->SNMPVERSION);
     v8::Local<v8::String> RAMSIZE=Nan::New<v8::String>("RAMSIZE").ToLocalChecked();
     v8::Local<v8::Integer> RAMSIZEValue=Nan::New<v8::Integer>(pRtnNetDevice->RAMSIZE);
     v8::Local<v8::String> FLASHSIZE=Nan::New<v8::String>("FLASHSIZE").ToLocalChecked();
     v8::Local<v8::Integer> FLASHSIZEValue=Nan::New<v8::Integer>(pRtnNetDevice->FLASHSIZE);
     v8::Local<v8::String> NVRAMSIZE=Nan::New<v8::String>("NVRAMSIZE").ToLocalChecked();
     v8::Local<v8::Integer> NVRAMSIZEValue=Nan::New<v8::Integer>(pRtnNetDevice->NVRAMSIZE);
     v8::Local<v8::String> CABINET_ID=Nan::New<v8::String>("CABINET_ID").ToLocalChecked();
     v8::Local<v8::Integer> CABINET_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->CABINET_ID);
     v8::Local<v8::String> ROOM_ID=Nan::New<v8::String>("ROOM_ID").ToLocalChecked();
     v8::Local<v8::Integer> ROOM_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->ROOM_ID);
     v8::Local<v8::String> IOSVERSION_ID=Nan::New<v8::String>("IOSVERSION_ID").ToLocalChecked();
     v8::Local<v8::Integer> IOSVERSION_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->IOSVERSION_ID);
     v8::Local<v8::String> DESCRIPTION=Nan::New<v8::String>("DESCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DESCRIPTIONValue=Nan::New(pRtnNetDevice->DESCRIPTION).ToLocalChecked();
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRtnNetDevice->USERNAME).ToLocalChecked();
     v8::Local<v8::String> PASSWD=Nan::New<v8::String>("PASSWD").ToLocalChecked();
     v8::Local<v8::String> PASSWDValue=Nan::New(pRtnNetDevice->PASSWD).ToLocalChecked();
     v8::Local<v8::String> ENPASSWD=Nan::New<v8::String>("ENPASSWD").ToLocalChecked();
     v8::Local<v8::String> ENPASSWDValue=Nan::New(pRtnNetDevice->ENPASSWD).ToLocalChecked();
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->MANUFACTORY_ID);
     v8::Local<v8::String> CFGSAVETYPE=Nan::New<v8::String>("CFGSAVETYPE").ToLocalChecked();
     v8::Local<v8::Integer> CFGSAVETYPEValue=Nan::New<v8::Integer>(pRtnNetDevice->CFGSAVETYPE);
     v8::Local<v8::String> DEVICETYPE=Nan::New<v8::String>("DEVICETYPE").ToLocalChecked();
     v8::Local<v8::String> DEVICETYPEValue=Nan::New(pRtnNetDevice->DEVICETYPE).ToLocalChecked();
     v8::Local<v8::String> SENDSMS=Nan::New<v8::String>("SENDSMS").ToLocalChecked();
     v8::Local<v8::Integer> SENDSMSValue=Nan::New<v8::Integer>(pRtnNetDevice->SENDSMS);
     v8::Local<v8::String> ISSNMP=Nan::New<v8::String>("ISSNMP").ToLocalChecked();
     v8::Local<v8::Integer> ISSNMPValue=Nan::New<v8::Integer>(pRtnNetDevice->ISSNMP);
     v8::Local<v8::String> SLOTNUM=Nan::New<v8::String>("SLOTNUM").ToLocalChecked();
     v8::Local<v8::Integer> SLOTNUMValue=Nan::New<v8::Integer>(pRtnNetDevice->SLOTNUM);
     v8::Local<v8::String> ISPING=Nan::New<v8::String>("ISPING").ToLocalChecked();
     v8::Local<v8::Integer> ISPINGValue=Nan::New<v8::Integer>(pRtnNetDevice->ISPING);
     v8::Local<v8::String> IFNUM=Nan::New<v8::String>("IFNUM").ToLocalChecked();
     v8::Local<v8::Integer> IFNUMValue=Nan::New<v8::Integer>(pRtnNetDevice->IFNUM);
     v8::Local<v8::String> APPLICATION_ID=Nan::New<v8::String>("APPLICATION_ID").ToLocalChecked();
     v8::Local<v8::Integer> APPLICATION_IDValue=Nan::New<v8::Integer>(pRtnNetDevice->APPLICATION_ID);

     v8::Local<v8::Object> pRtnNetDeviceJS=Nan::New<v8::Object>();
     pRtnNetDeviceJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(CATEGORY_ID),Local<v8::Value>(CATEGORY_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(FuctionArea),Local<v8::Value>(FuctionAreaValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(IPDECODE),Local<v8::Value>(IPDECODEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(NAME),Local<v8::Value>(NAMEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(PORTNUMBER),Local<v8::Value>(PORTNUMBERValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(CONFIGFILE),Local<v8::Value>(CONFIGFILEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(RCOMMUNITY),Local<v8::Value>(RCOMMUNITYValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(SNMPVERSION),Local<v8::Value>(SNMPVERSIONValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(RAMSIZE),Local<v8::Value>(RAMSIZEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(FLASHSIZE),Local<v8::Value>(FLASHSIZEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(NVRAMSIZE),Local<v8::Value>(NVRAMSIZEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(CABINET_ID),Local<v8::Value>(CABINET_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ROOM_ID),Local<v8::Value>(ROOM_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(IOSVERSION_ID),Local<v8::Value>(IOSVERSION_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(DESCRIPTION),Local<v8::Value>(DESCRIPTIONValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(PASSWD),Local<v8::Value>(PASSWDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ENPASSWD),Local<v8::Value>(ENPASSWDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(CFGSAVETYPE),Local<v8::Value>(CFGSAVETYPEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(DEVICETYPE),Local<v8::Value>(DEVICETYPEValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(SENDSMS),Local<v8::Value>(SENDSMSValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ISSNMP),Local<v8::Value>(ISSNMPValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(SLOTNUM),Local<v8::Value>(SLOTNUMValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(ISPING),Local<v8::Value>(ISPINGValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(IFNUM),Local<v8::Value>(IFNUMValue));
     pRtnNetDeviceJS->Set(Local<v8::Value>(APPLICATION_ID),Local<v8::Value>(APPLICATION_IDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDeviceJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceDetectTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceDetectTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceDetectField *pRspQryNetDeviceDetect =(CShfeFtdcRspQryNetDeviceDetectField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> SysNetAreaID=Nan::New<v8::String>("SysNetAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetAreaIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceDetect->SysNetAreaID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceDetect->SysNetSubAreaID);
     v8::Local<v8::String> IP=Nan::New<v8::String>("IP").ToLocalChecked();
     v8::Local<v8::String> IPValue=Nan::New(pRspQryNetDeviceDetect->IP).ToLocalChecked();
     v8::Local<v8::String> Mask=Nan::New<v8::String>("Mask").ToLocalChecked();
     v8::Local<v8::String> MaskValue=Nan::New(pRspQryNetDeviceDetect->Mask).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDeviceDetectJS=Nan::New<v8::Object>();
     pRspQryNetDeviceDetectJS->Set(Local<v8::Value>(SysNetAreaID),Local<v8::Value>(SysNetAreaIDValue));
     pRspQryNetDeviceDetectJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRspQryNetDeviceDetectJS->Set(Local<v8::Value>(IP),Local<v8::Value>(IPValue));
     pRspQryNetDeviceDetectJS->Set(Local<v8::Value>(Mask),Local<v8::Value>(MaskValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceDetectJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRspQryNetBuildingTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBuildingTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetBuildingField *pRspQryNetBuilding =(CShfeFtdcRspQryNetBuildingField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetBuilding->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetBuilding->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetBuilding->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetBuilding->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetBuildingJS=Nan::New<v8::Object>();
     pRspQryNetBuildingJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetBuildingJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetBuildingJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetBuildingJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetBuildingJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetBuildingTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBuildingTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetBuildingField *pRtnNetBuilding =(CShfeFtdcRtnNetBuildingField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetBuilding->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetBuilding->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetBuilding->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetBuilding->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetBuildingJS=Nan::New<v8::Object>();
     pRtnNetBuildingJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetBuildingJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetBuildingJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetBuildingJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetBuildingJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetRoomTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetRoomTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetRoomField *pRspQryNetRoom =(CShfeFtdcRspQryNetRoomField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetRoom->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetRoom->ID);
     v8::Local<v8::String> SysNetBuildingID=Nan::New<v8::String>("SysNetBuildingID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetBuildingIDValue=Nan::New<v8::Integer>(pRspQryNetRoom->SysNetBuildingID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetRoom->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetRoom->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetRoomJS=Nan::New<v8::Object>();
     pRspQryNetRoomJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetRoomJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetRoomJS->Set(Local<v8::Value>(SysNetBuildingID),Local<v8::Value>(SysNetBuildingIDValue));
     pRspQryNetRoomJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetRoomJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetRoomJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetRoomTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetRoomTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetRoomField *pRtnNetRoom =(CShfeFtdcRtnNetRoomField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetRoom->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetRoom->ID);
     v8::Local<v8::String> SysNetBuildingID=Nan::New<v8::String>("SysNetBuildingID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetBuildingIDValue=Nan::New<v8::Integer>(pRtnNetRoom->SysNetBuildingID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetRoom->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetRoom->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetRoomJS=Nan::New<v8::Object>();
     pRtnNetRoomJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetRoomJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetRoomJS->Set(Local<v8::Value>(SysNetBuildingID),Local<v8::Value>(SysNetBuildingIDValue));
     pRtnNetRoomJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetRoomJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetRoomJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetCabinetsTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCabinetsTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetCabinetsField *pRspQryNetCabinets =(CShfeFtdcRspQryNetCabinetsField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetCabinets->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetCabinets->ID);
     v8::Local<v8::String> SysNetRoomID=Nan::New<v8::String>("SysNetRoomID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetRoomIDValue=Nan::New<v8::Integer>(pRspQryNetCabinets->SysNetRoomID);
     v8::Local<v8::String> SysNetBuildingID=Nan::New<v8::String>("SysNetBuildingID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetBuildingIDValue=Nan::New<v8::Integer>(pRspQryNetCabinets->SysNetBuildingID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetCabinets->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetCabinets->EName).ToLocalChecked();
     v8::Local<v8::String> CabinetsType=Nan::New<v8::String>("CabinetsType").ToLocalChecked();
     v8::Local<v8::String> CabinetsTypeValue=Nan::New(pRspQryNetCabinets->CabinetsType).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetCabinetsJS=Nan::New<v8::Object>();
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(SysNetRoomID),Local<v8::Value>(SysNetRoomIDValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(SysNetBuildingID),Local<v8::Value>(SysNetBuildingIDValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetCabinetsJS->Set(Local<v8::Value>(CabinetsType),Local<v8::Value>(CabinetsTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetCabinetsJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetCabinetsTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCabinetsTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetCabinetsField *pRtnNetCabinets =(CShfeFtdcRtnNetCabinetsField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetCabinets->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetCabinets->ID);
     v8::Local<v8::String> SysNetRoomID=Nan::New<v8::String>("SysNetRoomID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetRoomIDValue=Nan::New<v8::Integer>(pRtnNetCabinets->SysNetRoomID);
     v8::Local<v8::String> SysNetBuildingID=Nan::New<v8::String>("SysNetBuildingID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetBuildingIDValue=Nan::New<v8::Integer>(pRtnNetCabinets->SysNetBuildingID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetCabinets->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetCabinets->EName).ToLocalChecked();
     v8::Local<v8::String> CabinetsType=Nan::New<v8::String>("CabinetsType").ToLocalChecked();
     v8::Local<v8::String> CabinetsTypeValue=Nan::New(pRtnNetCabinets->CabinetsType).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetCabinetsJS=Nan::New<v8::Object>();
     pRtnNetCabinetsJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(SysNetRoomID),Local<v8::Value>(SysNetRoomIDValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(SysNetBuildingID),Local<v8::Value>(SysNetBuildingIDValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetCabinetsJS->Set(Local<v8::Value>(CabinetsType),Local<v8::Value>(CabinetsTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetCabinetsJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetOIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetOIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetOIDField *pRspQryNetOID =(CShfeFtdcRspQryNetOIDField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetOID->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetOID->ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRspQryNetOID->Manufactory).ToLocalChecked();
     v8::Local<v8::String> DeviceType=Nan::New<v8::String>("DeviceType").ToLocalChecked();
     v8::Local<v8::String> DeviceTypeValue=Nan::New(pRspQryNetOID->DeviceType).ToLocalChecked();
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetOID->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetOID->EName).ToLocalChecked();
     v8::Local<v8::String> OID=Nan::New<v8::String>("OID").ToLocalChecked();
     v8::Local<v8::String> OIDValue=Nan::New(pRspQryNetOID->OID).ToLocalChecked();
     v8::Local<v8::String> Unit=Nan::New<v8::String>("Unit").ToLocalChecked();
     v8::Local<v8::String> UnitValue=Nan::New(pRspQryNetOID->Unit).ToLocalChecked();
     v8::Local<v8::String> isTheTable=Nan::New<v8::String>("isTheTable").ToLocalChecked();
     v8::Local<v8::Integer> isTheTableValue=Nan::New<v8::Integer>(pRspQryNetOID->isTheTable);
     v8::Local<v8::Object> pRspQryNetOIDJS=Nan::New<v8::Object>();
     pRspQryNetOIDJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(DeviceType),Local<v8::Value>(DeviceTypeValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(OID),Local<v8::Value>(OIDValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(Unit),Local<v8::Value>(UnitValue));
     pRspQryNetOIDJS->Set(Local<v8::Value>(isTheTable),Local<v8::Value>(isTheTableValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetOIDJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetOIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetOIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetOIDField *pRtnNetOID =(CShfeFtdcRtnNetOIDField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetOID->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetOID->ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRtnNetOID->Manufactory).ToLocalChecked();
     v8::Local<v8::String> DeviceType=Nan::New<v8::String>("DeviceType").ToLocalChecked();
     v8::Local<v8::String> DeviceTypeValue=Nan::New(pRtnNetOID->DeviceType).ToLocalChecked();
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetOID->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetOID->EName).ToLocalChecked();
     v8::Local<v8::String> OID=Nan::New<v8::String>("OID").ToLocalChecked();
     v8::Local<v8::String> OIDValue=Nan::New(pRtnNetOID->OID).ToLocalChecked();
     v8::Local<v8::String> Unit=Nan::New<v8::String>("Unit").ToLocalChecked();
     v8::Local<v8::String> UnitValue=Nan::New(pRtnNetOID->Unit).ToLocalChecked();
     v8::Local<v8::String> isTheTable=Nan::New<v8::String>("isTheTable").ToLocalChecked();
     v8::Local<v8::Integer> isTheTableValue=Nan::New<v8::Integer>(pRtnNetOID->isTheTable);

     v8::Local<v8::Object> pRtnNetOIDJS=Nan::New<v8::Object>();
     pRtnNetOIDJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(DeviceType),Local<v8::Value>(DeviceTypeValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(OID),Local<v8::Value>(OIDValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(Unit),Local<v8::Value>(UnitValue));
     pRtnNetOIDJS->Set(Local<v8::Value>(isTheTable),Local<v8::Value>(isTheTableValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetOIDJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetTimePolicyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetTimePolicyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetTimePolicyField *pRspQryNetTimePolicy =(CShfeFtdcRspQryNetTimePolicyField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetTimePolicy->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetTimePolicy->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetTimePolicy->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetTimePolicy->EName).ToLocalChecked();
     v8::Local<v8::String> PolicyType=Nan::New<v8::String>("PolicyType").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeValue=Nan::New<v8::Integer>(pRspQryNetTimePolicy->PolicyType);
     v8::Local<v8::String> PolicyString=Nan::New<v8::String>("PolicyString").ToLocalChecked();
     v8::Local<v8::String> PolicyStringValue=Nan::New(pRspQryNetTimePolicy->PolicyString).ToLocalChecked();
     v8::Local<v8::String> TradingDay=Nan::New<v8::String>("TradingDay").ToLocalChecked();
     v8::Local<v8::Integer> TradingDayValue=Nan::New<v8::Integer>(pRspQryNetTimePolicy->TradingDay);
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRspQryNetTimePolicy->Description).ToLocalChecked();
     v8::Local<v8::String> Operation=Nan::New<v8::String>("Operation").ToLocalChecked();
     v8::Local<v8::Integer> OperationValue=Nan::New<v8::Integer>(pRspQryNetTimePolicy->Operation);
     v8::Local<v8::Object> pRspQryNetTimePolicyJS=Nan::New<v8::Object>();
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(PolicyType),Local<v8::Value>(PolicyTypeValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(PolicyString),Local<v8::Value>(PolicyStringValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(TradingDay),Local<v8::Value>(TradingDayValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));
     pRspQryNetTimePolicyJS->Set(Local<v8::Value>(Operation),Local<v8::Value>(OperationValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetTimePolicyJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetTimePolicyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetTimePolicyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetTimePolicyField *pRtnNetTimePolicy =(CShfeFtdcRtnNetTimePolicyField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetTimePolicy->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetTimePolicy->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetTimePolicy->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetTimePolicy->EName).ToLocalChecked();
     v8::Local<v8::String> PolicyType=Nan::New<v8::String>("PolicyType").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeValue=Nan::New<v8::Integer>(pRtnNetTimePolicy->PolicyType);
     v8::Local<v8::String> PolicyString=Nan::New<v8::String>("PolicyString").ToLocalChecked();
     v8::Local<v8::String> PolicyStringValue=Nan::New(pRtnNetTimePolicy->PolicyString).ToLocalChecked();
     v8::Local<v8::String> TradingDay=Nan::New<v8::String>("TradingDay").ToLocalChecked();
     v8::Local<v8::Integer> TradingDayValue=Nan::New<v8::Integer>(pRtnNetTimePolicy->TradingDay);
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRtnNetTimePolicy->Description).ToLocalChecked();
     v8::Local<v8::String> Operation=Nan::New<v8::String>("Operation").ToLocalChecked();
     v8::Local<v8::Integer> OperationValue=Nan::New<v8::Integer>(pRtnNetTimePolicy->Operation);

     v8::Local<v8::Object> pRtnNetTimePolicyJS=Nan::New<v8::Object>();
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(PolicyType),Local<v8::Value>(PolicyTypeValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(PolicyString),Local<v8::Value>(PolicyStringValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(TradingDay),Local<v8::Value>(TradingDayValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));
     pRtnNetTimePolicyJS->Set(Local<v8::Value>(Operation),Local<v8::Value>(OperationValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetTimePolicyJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetGatherTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetGatherTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetGatherTaskField *pRspQryNetGatherTask =(CShfeFtdcRspQryNetGatherTaskField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetGatherTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetGatherTask->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetGatherTask->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryNetGatherTask->AttrType).ToLocalChecked();
     v8::Local<v8::String> PolicyTypeID=Nan::New<v8::String>("PolicyTypeID").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeIDValue=Nan::New<v8::Integer>(pRspQryNetGatherTask->PolicyTypeID);
     v8::Local<v8::String> DataType=Nan::New<v8::String>("DataType").ToLocalChecked();
     v8::Local<v8::Integer> DataTypeValue=Nan::New<v8::Integer>(pRspQryNetGatherTask->DataType);
     v8::Local<v8::String> TypeFlag=Nan::New<v8::String>("TypeFlag").ToLocalChecked();
     v8::Local<v8::Integer> TypeFlagValue=Nan::New<v8::Integer>(pRspQryNetGatherTask->TypeFlag);
     v8::Local<v8::Object> pRspQryNetGatherTaskJS=Nan::New<v8::Object>();
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(PolicyTypeID),Local<v8::Value>(PolicyTypeIDValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(DataType),Local<v8::Value>(DataTypeValue));
     pRspQryNetGatherTaskJS->Set(Local<v8::Value>(TypeFlag),Local<v8::Value>(TypeFlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetGatherTaskJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetGatherTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetGatherTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetGatherTaskField *pRtnNetGatherTask =(CShfeFtdcRtnNetGatherTaskField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetGatherTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetGatherTask->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetGatherTask->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnNetGatherTask->AttrType).ToLocalChecked();
     v8::Local<v8::String> PolicyTypeID=Nan::New<v8::String>("PolicyTypeID").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeIDValue=Nan::New<v8::Integer>(pRtnNetGatherTask->PolicyTypeID);
     v8::Local<v8::String> DataType=Nan::New<v8::String>("DataType").ToLocalChecked();
     v8::Local<v8::Integer> DataTypeValue=Nan::New<v8::Integer>(pRtnNetGatherTask->DataType);
     v8::Local<v8::String> TypeFlag=Nan::New<v8::String>("TypeFlag").ToLocalChecked();
     v8::Local<v8::Integer> TypeFlagValue=Nan::New<v8::Integer>(pRtnNetGatherTask->TypeFlag);

     v8::Local<v8::Object> pRtnNetGatherTaskJS=Nan::New<v8::Object>();
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(PolicyTypeID),Local<v8::Value>(PolicyTypeIDValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(DataType),Local<v8::Value>(DataTypeValue));
     pRtnNetGatherTaskJS->Set(Local<v8::Value>(TypeFlag),Local<v8::Value>(TypeFlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetGatherTaskJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceChgField *pRspQryNetDeviceChg =(CShfeFtdcRspQryNetDeviceChgField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceChg->DeviceID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRspQryNetDeviceChg->SysNetSubAreaID);
     v8::Local<v8::String> OldObjectID=Nan::New<v8::String>("OldObjectID").ToLocalChecked();
     v8::Local<v8::String> OldObjectIDValue=Nan::New(pRspQryNetDeviceChg->OldObjectID).ToLocalChecked();
     v8::Local<v8::String> NewObjectID=Nan::New<v8::String>("NewObjectID").ToLocalChecked();
     v8::Local<v8::String> NewObjectIDValue=Nan::New(pRspQryNetDeviceChg->NewObjectID).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDeviceChgJS=Nan::New<v8::Object>();
     pRspQryNetDeviceChgJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRspQryNetDeviceChgJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRspQryNetDeviceChgJS->Set(Local<v8::Value>(OldObjectID),Local<v8::Value>(OldObjectIDValue));
     pRspQryNetDeviceChgJS->Set(Local<v8::Value>(NewObjectID),Local<v8::Value>(NewObjectIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceChgJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDeviceChgTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceChgTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDeviceChgField *pRtnNetDeviceChg =(CShfeFtdcRtnNetDeviceChgField *)(paramArrayNew[0]);

     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRtnNetDeviceChg->DeviceID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRtnNetDeviceChg->SysNetSubAreaID);
     v8::Local<v8::String> OldObjectID=Nan::New<v8::String>("OldObjectID").ToLocalChecked();
     v8::Local<v8::String> OldObjectIDValue=Nan::New(pRtnNetDeviceChg->OldObjectID).ToLocalChecked();
     v8::Local<v8::String> NewObjectID=Nan::New<v8::String>("NewObjectID").ToLocalChecked();
     v8::Local<v8::String> NewObjectIDValue=Nan::New(pRtnNetDeviceChg->NewObjectID).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetDeviceChgJS=Nan::New<v8::Object>();
     pRtnNetDeviceChgJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRtnNetDeviceChgJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRtnNetDeviceChgJS->Set(Local<v8::Value>(OldObjectID),Local<v8::Value>(OldObjectIDValue));
     pRtnNetDeviceChgJS->Set(Local<v8::Value>(NewObjectID),Local<v8::Value>(NewObjectIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDeviceChgJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceTypeField *pRspQryNetDeviceType =(CShfeFtdcRspQryNetDeviceTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDeviceType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDeviceType->ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRspQryNetDeviceType->Manufactory).ToLocalChecked();
     v8::Local<v8::String> DeviceType=Nan::New<v8::String>("DeviceType").ToLocalChecked();
     v8::Local<v8::String> DeviceTypeValue=Nan::New(pRspQryNetDeviceType->DeviceType).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDeviceTypeJS=Nan::New<v8::Object>();
     pRspQryNetDeviceTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDeviceTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDeviceTypeJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRspQryNetDeviceTypeJS->Set(Local<v8::Value>(DeviceType),Local<v8::Value>(DeviceTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDeviceTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDeviceTypeField *pRtnNetDeviceType =(CShfeFtdcRtnNetDeviceTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDeviceType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDeviceType->ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRtnNetDeviceType->Manufactory).ToLocalChecked();
     v8::Local<v8::String> DeviceType=Nan::New<v8::String>("DeviceType").ToLocalChecked();
     v8::Local<v8::String> DeviceTypeValue=Nan::New(pRtnNetDeviceType->DeviceType).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetDeviceTypeJS=Nan::New<v8::Object>();
     pRtnNetDeviceTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDeviceTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDeviceTypeJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRtnNetDeviceTypeJS->Set(Local<v8::Value>(DeviceType),Local<v8::Value>(DeviceTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDeviceTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDeviceCategoryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDeviceCategoryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDeviceCategoryField *pRspQryNetDeviceCategory =(CShfeFtdcRspQryNetDeviceCategoryField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDeviceCategory->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDeviceCategory->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetDeviceCategory->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetDeviceCategory->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDeviceCategoryJS=Nan::New<v8::Object>();
     pRspQryNetDeviceCategoryJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDeviceCategoryJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDeviceCategoryJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetDeviceCategoryJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDeviceCategoryJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDeviceCategoryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDeviceCategoryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDeviceCategoryField *pRtnNetDeviceCategory =(CShfeFtdcRtnNetDeviceCategoryField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDeviceCategory->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDeviceCategory->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetDeviceCategory->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetDeviceCategory->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetDeviceCategoryJS=Nan::New<v8::Object>();
     pRtnNetDeviceCategoryJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDeviceCategoryJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDeviceCategoryJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetDeviceCategoryJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDeviceCategoryJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetManufactoryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetManufactoryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetManufactoryField *pRspQryNetManufactory =(CShfeFtdcRspQryNetManufactoryField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetManufactory->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetManufactory->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetManufactory->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetManufactory->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetManufactoryJS=Nan::New<v8::Object>();
     pRspQryNetManufactoryJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetManufactoryJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetManufactoryJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetManufactoryJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetManufactoryJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetManufactoryTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetManufactoryTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetManufactoryField *pRtnNetManufactory =(CShfeFtdcRtnNetManufactoryField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetManufactory->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetManufactory->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetManufactory->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetManufactory->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetManufactoryJS=Nan::New<v8::Object>();
     pRtnNetManufactoryJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetManufactoryJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetManufactoryJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetManufactoryJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetManufactoryJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetCommunityTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCommunityTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetCommunityField *pRspQryNetCommunity =(CShfeFtdcRspQryNetCommunityField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetCommunity->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetCommunity->ID);
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetCommunity->IPADDR).ToLocalChecked();
     v8::Local<v8::String> COMMUNITY=Nan::New<v8::String>("COMMUNITY").ToLocalChecked();
     v8::Local<v8::String> COMMUNITYValue=Nan::New(pRspQryNetCommunity->COMMUNITY).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetCommunityJS=Nan::New<v8::Object>();
     pRspQryNetCommunityJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetCommunityJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetCommunityJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetCommunityJS->Set(Local<v8::Value>(COMMUNITY),Local<v8::Value>(COMMUNITYValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetCommunityJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetCommunityTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCommunityTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetCommunityField *pRtnNetCommunity =(CShfeFtdcRtnNetCommunityField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetCommunity->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetCommunity->ID);
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetCommunity->IPADDR).ToLocalChecked();
     v8::Local<v8::String> COMMUNITY=Nan::New<v8::String>("COMMUNITY").ToLocalChecked();
     v8::Local<v8::String> COMMUNITYValue=Nan::New(pRtnNetCommunity->COMMUNITY).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetCommunityJS=Nan::New<v8::Object>();
     pRtnNetCommunityJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetCommunityJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetCommunityJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetCommunityJS->Set(Local<v8::Value>(COMMUNITY),Local<v8::Value>(COMMUNITYValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetCommunityJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPortTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPortTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPortTypeField *pRspQryNetPortType =(CShfeFtdcRspQryNetPortTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPortType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPortType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetPortType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetPortType->EName).ToLocalChecked();
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRspQryNetPortType->Description).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPortTypeJS=Nan::New<v8::Object>();
     pRspQryNetPortTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPortTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPortTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetPortTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetPortTypeJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPortTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPortTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPortTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPortTypeField *pRtnNetPortType =(CShfeFtdcRtnNetPortTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPortType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPortType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetPortType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetPortType->EName).ToLocalChecked();
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRtnNetPortType->Description).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPortTypeJS=Nan::New<v8::Object>();
     pRtnNetPortTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPortTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPortTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetPortTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetPortTypeJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPortTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPartAccessSpotTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartAccessSpotTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPartAccessSpotField *pRspQryNetPartAccessSpot =(CShfeFtdcRspQryNetPartAccessSpotField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPartAccessSpot->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPartAccessSpot->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetPartAccessSpot->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetPartAccessSpot->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPartAccessSpotJS=Nan::New<v8::Object>();
     pRspQryNetPartAccessSpotJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPartAccessSpotJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPartAccessSpotJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetPartAccessSpotJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPartAccessSpotJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPartAccessSpotTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartAccessSpotTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPartAccessSpotField *pRtnNetPartAccessSpot =(CShfeFtdcRtnNetPartAccessSpotField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPartAccessSpot->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPartAccessSpot->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetPartAccessSpot->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetPartAccessSpot->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPartAccessSpotJS=Nan::New<v8::Object>();
     pRtnNetPartAccessSpotJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPartAccessSpotJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPartAccessSpotJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetPartAccessSpotJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPartAccessSpotJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetInterfaceTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetInterfaceTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetInterfaceField *pRspQryNetInterface =(CShfeFtdcRspQryNetInterfaceField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetInterface->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetInterface->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetInterface->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRspQryNetInterface->MonitorType_ID);
     v8::Local<v8::String> IfType=Nan::New<v8::String>("IfType").ToLocalChecked();
     v8::Local<v8::Integer> IfTypeValue=Nan::New<v8::Integer>(pRspQryNetInterface->IfType);
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetInterface->EName).ToLocalChecked();
     v8::Local<v8::String> IpAddress=Nan::New<v8::String>("IpAddress").ToLocalChecked();
     v8::Local<v8::String> IpAddressValue=Nan::New(pRspQryNetInterface->IpAddress).ToLocalChecked();
     v8::Local<v8::String> IpMask=Nan::New<v8::String>("IpMask").ToLocalChecked();
     v8::Local<v8::String> IpMaskValue=Nan::New(pRspQryNetInterface->IpMask).ToLocalChecked();
     v8::Local<v8::String> IfStatus=Nan::New<v8::String>("IfStatus").ToLocalChecked();
     v8::Local<v8::Integer> IfStatusValue=Nan::New<v8::Integer>(pRspQryNetInterface->IfStatus);
     v8::Local<v8::String> MAC=Nan::New<v8::String>("MAC").ToLocalChecked();
     v8::Local<v8::String> MACValue=Nan::New(pRspQryNetInterface->MAC).ToLocalChecked();
     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRspQryNetInterface->DeviceID);
     v8::Local<v8::String> DeviceObjectID=Nan::New<v8::String>("DeviceObjectID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjectIDValue=Nan::New(pRspQryNetInterface->DeviceObjectID).ToLocalChecked();
     v8::Local<v8::String> DeviceIndex=Nan::New<v8::String>("DeviceIndex").ToLocalChecked();
     v8::Local<v8::String> DeviceIndexValue=Nan::New(pRspQryNetInterface->DeviceIndex).ToLocalChecked();
     v8::Local<v8::String> isPolling=Nan::New<v8::String>("isPolling").ToLocalChecked();
     v8::Local<v8::Integer> isPollingValue=Nan::New<v8::Integer>(pRspQryNetInterface->isPolling);
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRspQryNetInterface->Description).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetInterfaceJS=Nan::New<v8::Object>();
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(IfType),Local<v8::Value>(IfTypeValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(IpAddress),Local<v8::Value>(IpAddressValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(IpMask),Local<v8::Value>(IpMaskValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(IfStatus),Local<v8::Value>(IfStatusValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(MAC),Local<v8::Value>(MACValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(DeviceObjectID),Local<v8::Value>(DeviceObjectIDValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(DeviceIndex),Local<v8::Value>(DeviceIndexValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(isPolling),Local<v8::Value>(isPollingValue));
     pRspQryNetInterfaceJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetInterfaceJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetInterfaceTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetInterfaceTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetInterfaceField *pRtnNetInterface =(CShfeFtdcRtnNetInterfaceField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetInterface->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetInterface->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetInterface->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRtnNetInterface->MonitorType_ID);
     v8::Local<v8::String> IfType=Nan::New<v8::String>("IfType").ToLocalChecked();
     v8::Local<v8::Integer> IfTypeValue=Nan::New<v8::Integer>(pRtnNetInterface->IfType);
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetInterface->EName).ToLocalChecked();
     v8::Local<v8::String> IpAddress=Nan::New<v8::String>("IpAddress").ToLocalChecked();
     v8::Local<v8::String> IpAddressValue=Nan::New(pRtnNetInterface->IpAddress).ToLocalChecked();
     v8::Local<v8::String> IpMask=Nan::New<v8::String>("IpMask").ToLocalChecked();
     v8::Local<v8::String> IpMaskValue=Nan::New(pRtnNetInterface->IpMask).ToLocalChecked();
     v8::Local<v8::String> IfStatus=Nan::New<v8::String>("IfStatus").ToLocalChecked();
     v8::Local<v8::Integer> IfStatusValue=Nan::New<v8::Integer>(pRtnNetInterface->IfStatus);
     v8::Local<v8::String> MAC=Nan::New<v8::String>("MAC").ToLocalChecked();
     v8::Local<v8::String> MACValue=Nan::New(pRtnNetInterface->MAC).ToLocalChecked();
     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRtnNetInterface->DeviceID);
     v8::Local<v8::String> DeviceObjectID=Nan::New<v8::String>("DeviceObjectID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjectIDValue=Nan::New(pRtnNetInterface->DeviceObjectID).ToLocalChecked();
     v8::Local<v8::String> DeviceIndex=Nan::New<v8::String>("DeviceIndex").ToLocalChecked();
     v8::Local<v8::String> DeviceIndexValue=Nan::New(pRtnNetInterface->DeviceIndex).ToLocalChecked();
     v8::Local<v8::String> isPolling=Nan::New<v8::String>("isPolling").ToLocalChecked();
     v8::Local<v8::Integer> isPollingValue=Nan::New<v8::Integer>(pRtnNetInterface->isPolling);
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRtnNetInterface->Description).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetInterfaceJS=Nan::New<v8::Object>();
     pRtnNetInterfaceJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(IfType),Local<v8::Value>(IfTypeValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(IpAddress),Local<v8::Value>(IpAddressValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(IpMask),Local<v8::Value>(IpMaskValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(IfStatus),Local<v8::Value>(IfStatusValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(MAC),Local<v8::Value>(MACValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(DeviceObjectID),Local<v8::Value>(DeviceObjectIDValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(DeviceIndex),Local<v8::Value>(DeviceIndexValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(isPolling),Local<v8::Value>(isPollingValue));
     pRtnNetInterfaceJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetInterfaceJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetGeneralOIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetGeneralOIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetGeneralOIDField *pRspQryNetGeneralOID =(CShfeFtdcRspQryNetGeneralOIDField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetGeneralOID->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetGeneralOID->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetGeneralOID->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetGeneralOID->EName).ToLocalChecked();
     v8::Local<v8::String> OID=Nan::New<v8::String>("OID").ToLocalChecked();
     v8::Local<v8::String> OIDValue=Nan::New(pRspQryNetGeneralOID->OID).ToLocalChecked();
     v8::Local<v8::String> Unit=Nan::New<v8::String>("Unit").ToLocalChecked();
     v8::Local<v8::String> UnitValue=Nan::New(pRspQryNetGeneralOID->Unit).ToLocalChecked();
     v8::Local<v8::String> isTheTable=Nan::New<v8::String>("isTheTable").ToLocalChecked();
     v8::Local<v8::Integer> isTheTableValue=Nan::New<v8::Integer>(pRspQryNetGeneralOID->isTheTable);
     v8::Local<v8::Object> pRspQryNetGeneralOIDJS=Nan::New<v8::Object>();
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(OID),Local<v8::Value>(OIDValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(Unit),Local<v8::Value>(UnitValue));
     pRspQryNetGeneralOIDJS->Set(Local<v8::Value>(isTheTable),Local<v8::Value>(isTheTableValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetGeneralOIDJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetGeneralOIDTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetGeneralOIDTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetGeneralOIDField *pRtnNetGeneralOID =(CShfeFtdcRtnNetGeneralOIDField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetGeneralOID->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetGeneralOID->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetGeneralOID->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetGeneralOID->EName).ToLocalChecked();
     v8::Local<v8::String> OID=Nan::New<v8::String>("OID").ToLocalChecked();
     v8::Local<v8::String> OIDValue=Nan::New(pRtnNetGeneralOID->OID).ToLocalChecked();
     v8::Local<v8::String> Unit=Nan::New<v8::String>("Unit").ToLocalChecked();
     v8::Local<v8::String> UnitValue=Nan::New(pRtnNetGeneralOID->Unit).ToLocalChecked();
     v8::Local<v8::String> isTheTable=Nan::New<v8::String>("isTheTable").ToLocalChecked();
     v8::Local<v8::Integer> isTheTableValue=Nan::New<v8::Integer>(pRtnNetGeneralOID->isTheTable);

     v8::Local<v8::Object> pRtnNetGeneralOIDJS=Nan::New<v8::Object>();
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(OID),Local<v8::Value>(OIDValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(Unit),Local<v8::Value>(UnitValue));
     pRtnNetGeneralOIDJS->Set(Local<v8::Value>(isTheTable),Local<v8::Value>(isTheTableValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetGeneralOIDJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTypeField *pRspQryNetMonitorType =(CShfeFtdcRspQryNetMonitorTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetMonitorType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetMonitorType->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorTypeJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetMonitorTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTypeField *pRtnNetMonitorType =(CShfeFtdcRtnNetMonitorTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetMonitorType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetMonitorType->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorTypeJS=Nan::New<v8::Object>();
     pRtnNetMonitorTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetMonitorTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorAttrScopeTopic(uv_async_t *handle)
{
    std::cout<<"\n*********** CFunc::OnRspQryNetMonitorAttrScopeTopic: START! **********"<<std::endl;
    cout << "****** g_OnRspQryNetMonitorAttrScopeTopic_Fun_index " 
         << g_OnRspQryNetMonitorAttrScopeTopic_Fun_index++ << " ******" << endl;
          
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorAttrScopeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorAttrScopeField *pRspQryNetMonitorAttrScope =(CShfeFtdcRspQryNetMonitorAttrScopeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrScope->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrScope->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetMonitorAttrScope->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetMonitorAttrScope->EName).ToLocalChecked();
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRspQryNetMonitorAttrScope->Comments).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorAttrScopeJS=Nan::New<v8::Object>();
     pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetMonitorAttrScopeJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorAttrScopeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }    
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
          
  std::cout<<"*********** CFunc::OnRspQryNetMonitorAttrScopeTopic: END! **********\n"<<std::endl;    
  uv_sem_post(&g_OnRspQryNetMonitorAttrScopeTopicc_sem);    
}
void OnRtnNetMonitorAttrScopeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorAttrScopeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorAttrScopeField *pRtnNetMonitorAttrScope =(CShfeFtdcRtnNetMonitorAttrScopeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrScope->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrScope->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetMonitorAttrScope->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetMonitorAttrScope->EName).ToLocalChecked();
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRtnNetMonitorAttrScope->Comments).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorAttrScopeJS=Nan::New<v8::Object>();
     pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetMonitorAttrScopeJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorAttrScopeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorAttrTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorAttrTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorAttrTypeField *pRspQryNetMonitorAttrType =(CShfeFtdcRspQryNetMonitorAttrTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrType->ID);
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrType->MANUFACTORY_ID);
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrType->MonitorType_ID);
     v8::Local<v8::String> AttrType_ID=Nan::New<v8::String>("AttrType_ID").ToLocalChecked();
     v8::Local<v8::Integer> AttrType_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorAttrType->AttrType_ID);
     v8::Local<v8::String> MANUFACTORY=Nan::New<v8::String>("MANUFACTORY").ToLocalChecked();
     v8::Local<v8::String> MANUFACTORYValue=Nan::New(pRspQryNetMonitorAttrType->MANUFACTORY).ToLocalChecked();
     v8::Local<v8::String> MonitorType=Nan::New<v8::String>("MonitorType").ToLocalChecked();
     v8::Local<v8::String> MonitorTypeValue=Nan::New(pRspQryNetMonitorAttrType->MonitorType).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryNetMonitorAttrType->AttrType).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorAttrTypeJS=Nan::New<v8::Object>();
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(AttrType_ID),Local<v8::Value>(AttrType_IDValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(MANUFACTORY),Local<v8::Value>(MANUFACTORYValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(MonitorType),Local<v8::Value>(MonitorTypeValue));
     pRspQryNetMonitorAttrTypeJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorAttrTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorAttrTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorAttrTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorAttrTypeField *pRtnNetMonitorAttrType =(CShfeFtdcRtnNetMonitorAttrTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrType->ID);
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrType->MANUFACTORY_ID);
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrType->MonitorType_ID);
     v8::Local<v8::String> AttrType_ID=Nan::New<v8::String>("AttrType_ID").ToLocalChecked();
     v8::Local<v8::Integer> AttrType_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorAttrType->AttrType_ID);
     v8::Local<v8::String> MANUFACTORY=Nan::New<v8::String>("MANUFACTORY").ToLocalChecked();
     v8::Local<v8::String> MANUFACTORYValue=Nan::New(pRtnNetMonitorAttrType->MANUFACTORY).ToLocalChecked();
     v8::Local<v8::String> MonitorType=Nan::New<v8::String>("MonitorType").ToLocalChecked();
     v8::Local<v8::String> MonitorTypeValue=Nan::New(pRtnNetMonitorAttrType->MonitorType).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnNetMonitorAttrType->AttrType).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorAttrTypeJS=Nan::New<v8::Object>();
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(AttrType_ID),Local<v8::Value>(AttrType_IDValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(MANUFACTORY),Local<v8::Value>(MANUFACTORYValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(MonitorType),Local<v8::Value>(MonitorTypeValue));
     pRtnNetMonitorAttrTypeJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorAttrTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorObjectAttrField *pRspQryNetMonitorObjectAttr =(CShfeFtdcRspQryNetMonitorObjectAttrField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorObjectAttr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorObjectAttr->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetMonitorObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRspQryNetMonitorObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> PolicyTypeID=Nan::New<v8::String>("PolicyTypeID").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeIDValue=Nan::New<v8::Integer>(pRspQryNetMonitorObjectAttr->PolicyTypeID);
     v8::Local<v8::Object> pRspQryNetMonitorObjectAttrJS=Nan::New<v8::Object>();
     pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRspQryNetMonitorObjectAttrJS->Set(Local<v8::Value>(PolicyTypeID),Local<v8::Value>(PolicyTypeIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorObjectAttrJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorObjectAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorObjectAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorObjectAttrField *pRtnNetMonitorObjectAttr =(CShfeFtdcRtnNetMonitorObjectAttrField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorObjectAttr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorObjectAttr->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetMonitorObjectAttr->ObjectID).ToLocalChecked();
     v8::Local<v8::String> AttrType=Nan::New<v8::String>("AttrType").ToLocalChecked();
     v8::Local<v8::String> AttrTypeValue=Nan::New(pRtnNetMonitorObjectAttr->AttrType).ToLocalChecked();
     v8::Local<v8::String> PolicyTypeID=Nan::New<v8::String>("PolicyTypeID").ToLocalChecked();
     v8::Local<v8::Integer> PolicyTypeIDValue=Nan::New<v8::Integer>(pRtnNetMonitorObjectAttr->PolicyTypeID);

     v8::Local<v8::Object> pRtnNetMonitorObjectAttrJS=Nan::New<v8::Object>();
     pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value>(AttrType),Local<v8::Value>(AttrTypeValue));
     pRtnNetMonitorObjectAttrJS->Set(Local<v8::Value>(PolicyTypeID),Local<v8::Value>(PolicyTypeIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorObjectAttrJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetFuncAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetFuncAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetFuncAreaField *pRspQryNetFuncArea =(CShfeFtdcRspQryNetFuncAreaField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetFuncArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetFuncArea->ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRspQryNetFuncArea->SysNetSubAreaID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetFuncArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetFuncArea->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetFuncAreaJS=Nan::New<v8::Object>();
     pRspQryNetFuncAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetFuncAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetFuncAreaJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRspQryNetFuncAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetFuncAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetFuncAreaJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetFuncAreaTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetFuncAreaTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetFuncAreaField *pRtnNetFuncArea =(CShfeFtdcRtnNetFuncAreaField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetFuncArea->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetFuncArea->ID);
     v8::Local<v8::String> SysNetSubAreaID=Nan::New<v8::String>("SysNetSubAreaID").ToLocalChecked();
     v8::Local<v8::Integer> SysNetSubAreaIDValue=Nan::New<v8::Integer>(pRtnNetFuncArea->SysNetSubAreaID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetFuncArea->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetFuncArea->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetFuncAreaJS=Nan::New<v8::Object>();
     pRtnNetFuncAreaJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetFuncAreaJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetFuncAreaJS->Set(Local<v8::Value>(SysNetSubAreaID),Local<v8::Value>(SysNetSubAreaIDValue));
     pRtnNetFuncAreaJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetFuncAreaJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetFuncAreaJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorCommandTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorCommandTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorCommandTypeField *pRspQryNetMonitorCommandType =(CShfeFtdcRspQryNetMonitorCommandTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->ID);
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->Manufactory_ID);
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->MonitorType_ID);
     v8::Local<v8::String> DeviceModle_ID=Nan::New<v8::String>("DeviceModle_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceModle_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->DeviceModle_ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorCommandType->ActionGroup_ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRspQryNetMonitorCommandType->Manufactory).ToLocalChecked();
     v8::Local<v8::String> MonitorType=Nan::New<v8::String>("MonitorType").ToLocalChecked();
     v8::Local<v8::String> MonitorTypeValue=Nan::New(pRspQryNetMonitorCommandType->MonitorType).ToLocalChecked();
     v8::Local<v8::String> DeviceModle=Nan::New<v8::String>("DeviceModle").ToLocalChecked();
     v8::Local<v8::String> DeviceModleValue=Nan::New(pRspQryNetMonitorCommandType->DeviceModle).ToLocalChecked();
     v8::Local<v8::String> ActionGroup=Nan::New<v8::String>("ActionGroup").ToLocalChecked();
     v8::Local<v8::String> ActionGroupValue=Nan::New(pRspQryNetMonitorCommandType->ActionGroup).ToLocalChecked();
     v8::Local<v8::String> Command=Nan::New<v8::String>("Command").ToLocalChecked();
     v8::Local<v8::String> CommandValue=Nan::New(pRspQryNetMonitorCommandType->Command).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorCommandTypeJS=Nan::New<v8::Object>();
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(DeviceModle_ID),Local<v8::Value>(DeviceModle_IDValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(MonitorType),Local<v8::Value>(MonitorTypeValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(DeviceModle),Local<v8::Value>(DeviceModleValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(ActionGroup),Local<v8::Value>(ActionGroupValue));
     pRspQryNetMonitorCommandTypeJS->Set(Local<v8::Value>(Command),Local<v8::Value>(CommandValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorCommandTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorCommandTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorCommandTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorCommandTypeField *pRtnNetMonitorCommandType =(CShfeFtdcRtnNetMonitorCommandTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->ID);
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->Manufactory_ID);
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->MonitorType_ID);
     v8::Local<v8::String> DeviceModle_ID=Nan::New<v8::String>("DeviceModle_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceModle_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->DeviceModle_ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorCommandType->ActionGroup_ID);
     v8::Local<v8::String> Manufactory=Nan::New<v8::String>("Manufactory").ToLocalChecked();
     v8::Local<v8::String> ManufactoryValue=Nan::New(pRtnNetMonitorCommandType->Manufactory).ToLocalChecked();
     v8::Local<v8::String> MonitorType=Nan::New<v8::String>("MonitorType").ToLocalChecked();
     v8::Local<v8::String> MonitorTypeValue=Nan::New(pRtnNetMonitorCommandType->MonitorType).ToLocalChecked();
     v8::Local<v8::String> DeviceModle=Nan::New<v8::String>("DeviceModle").ToLocalChecked();
     v8::Local<v8::String> DeviceModleValue=Nan::New(pRtnNetMonitorCommandType->DeviceModle).ToLocalChecked();
     v8::Local<v8::String> ActionGroup=Nan::New<v8::String>("ActionGroup").ToLocalChecked();
     v8::Local<v8::String> ActionGroupValue=Nan::New(pRtnNetMonitorCommandType->ActionGroup).ToLocalChecked();
     v8::Local<v8::String> Command=Nan::New<v8::String>("Command").ToLocalChecked();
     v8::Local<v8::String> CommandValue=Nan::New(pRtnNetMonitorCommandType->Command).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorCommandTypeJS=Nan::New<v8::Object>();
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(DeviceModle_ID),Local<v8::Value>(DeviceModle_IDValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(Manufactory),Local<v8::Value>(ManufactoryValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(MonitorType),Local<v8::Value>(MonitorTypeValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(DeviceModle),Local<v8::Value>(DeviceModleValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(ActionGroup),Local<v8::Value>(ActionGroupValue));
     pRtnNetMonitorCommandTypeJS->Set(Local<v8::Value>(Command),Local<v8::Value>(CommandValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorCommandTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorActionGroupTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorActionGroupTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorActionGroupField *pRspQryNetMonitorActionGroup =(CShfeFtdcRspQryNetMonitorActionGroupField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionGroup->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionGroup->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetMonitorActionGroup->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetMonitorActionGroup->EName).ToLocalChecked();
     v8::Local<v8::String> ActionType=Nan::New<v8::String>("ActionType").ToLocalChecked();
     v8::Local<v8::Integer> ActionTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionGroup->ActionType);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRspQryNetMonitorActionGroup->Comments).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorActionGroupJS=Nan::New<v8::Object>();
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(ActionType),Local<v8::Value>(ActionTypeValue));
     pRspQryNetMonitorActionGroupJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorActionGroupJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorActionGroupTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorActionGroupTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorActionGroupField *pRtnNetMonitorActionGroup =(CShfeFtdcRtnNetMonitorActionGroupField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorActionGroup->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorActionGroup->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetMonitorActionGroup->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetMonitorActionGroup->EName).ToLocalChecked();
     v8::Local<v8::String> ActionType=Nan::New<v8::String>("ActionType").ToLocalChecked();
     v8::Local<v8::Integer> ActionTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorActionGroup->ActionType);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRtnNetMonitorActionGroup->Comments).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorActionGroupJS=Nan::New<v8::Object>();
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(ActionType),Local<v8::Value>(ActionTypeValue));
     pRtnNetMonitorActionGroupJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorActionGroupJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorDeviceGroupTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorDeviceGroupTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorDeviceGroupField *pRspQryNetMonitorDeviceGroup =(CShfeFtdcRspQryNetMonitorDeviceGroupField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceGroup->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceGroup->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetMonitorDeviceGroup->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetMonitorDeviceGroup->EName).ToLocalChecked();
     v8::Local<v8::String> Condition=Nan::New<v8::String>("Condition").ToLocalChecked();
     v8::Local<v8::String> ConditionValue=Nan::New(pRspQryNetMonitorDeviceGroup->Condition).ToLocalChecked();
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRspQryNetMonitorDeviceGroup->Comments).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorDeviceGroupJS=Nan::New<v8::Object>();
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(Condition),Local<v8::Value>(ConditionValue));
     pRspQryNetMonitorDeviceGroupJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorDeviceGroupJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorDeviceGroupTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorDeviceGroupTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorDeviceGroupField *pRtnNetMonitorDeviceGroup =(CShfeFtdcRtnNetMonitorDeviceGroupField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceGroup->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceGroup->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetMonitorDeviceGroup->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetMonitorDeviceGroup->EName).ToLocalChecked();
     v8::Local<v8::String> Condition=Nan::New<v8::String>("Condition").ToLocalChecked();
     v8::Local<v8::String> ConditionValue=Nan::New(pRtnNetMonitorDeviceGroup->Condition).ToLocalChecked();
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRtnNetMonitorDeviceGroup->Comments).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorDeviceGroupJS=Nan::New<v8::Object>();
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(Condition),Local<v8::Value>(ConditionValue));
     pRtnNetMonitorDeviceGroupJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorDeviceGroupJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTaskInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTaskInfoField *pRspQryNetMonitorTaskInfo =(CShfeFtdcRspQryNetMonitorTaskInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetMonitorTaskInfo->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetMonitorTaskInfo->EName).ToLocalChecked();
     v8::Local<v8::String> DeviceGroup_ID=Nan::New<v8::String>("DeviceGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->DeviceGroup_ID);
     v8::Local<v8::String> ManagerGroup_ID=Nan::New<v8::String>("ManagerGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ManagerGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->ManagerGroup_ID);
     v8::Local<v8::String> TimePolicy_ID=Nan::New<v8::String>("TimePolicy_ID").ToLocalChecked();
     v8::Local<v8::Integer> TimePolicy_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->TimePolicy_ID);
     v8::Local<v8::String> TaskPriority_ID=Nan::New<v8::String>("TaskPriority_ID").ToLocalChecked();
     v8::Local<v8::Integer> TaskPriority_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->TaskPriority_ID);
     v8::Local<v8::String> OutputPolicy_ID=Nan::New<v8::String>("OutputPolicy_ID").ToLocalChecked();
     v8::Local<v8::Integer> OutputPolicy_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->OutputPolicy_ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->ActionGroup_ID);
     v8::Local<v8::String> EventExprStr=Nan::New<v8::String>("EventExprStr").ToLocalChecked();
     v8::Local<v8::String> EventExprStrValue=Nan::New(pRspQryNetMonitorTaskInfo->EventExprStr).ToLocalChecked();
     v8::Local<v8::String> DeviceGroup=Nan::New<v8::String>("DeviceGroup").ToLocalChecked();
     v8::Local<v8::String> DeviceGroupValue=Nan::New(pRspQryNetMonitorTaskInfo->DeviceGroup).ToLocalChecked();
     v8::Local<v8::String> ManagerGroup=Nan::New<v8::String>("ManagerGroup").ToLocalChecked();
     v8::Local<v8::String> ManagerGroupValue=Nan::New(pRspQryNetMonitorTaskInfo->ManagerGroup).ToLocalChecked();
     v8::Local<v8::String> TimePolicy=Nan::New<v8::String>("TimePolicy").ToLocalChecked();
     v8::Local<v8::String> TimePolicyValue=Nan::New(pRspQryNetMonitorTaskInfo->TimePolicy).ToLocalChecked();
     v8::Local<v8::String> TaskPriority=Nan::New<v8::String>("TaskPriority").ToLocalChecked();
     v8::Local<v8::String> TaskPriorityValue=Nan::New(pRspQryNetMonitorTaskInfo->TaskPriority).ToLocalChecked();
     v8::Local<v8::String> OutputPolicy=Nan::New<v8::String>("OutputPolicy").ToLocalChecked();
     v8::Local<v8::String> OutputPolicyValue=Nan::New(pRspQryNetMonitorTaskInfo->OutputPolicy).ToLocalChecked();
     v8::Local<v8::String> ActionGroup=Nan::New<v8::String>("ActionGroup").ToLocalChecked();
     v8::Local<v8::String> ActionGroupValue=Nan::New(pRspQryNetMonitorTaskInfo->ActionGroup).ToLocalChecked();
     v8::Local<v8::String> ValidFlag=Nan::New<v8::String>("ValidFlag").ToLocalChecked();
     v8::Local<v8::Integer> ValidFlagValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->ValidFlag);
     v8::Local<v8::String> TaskStatus=Nan::New<v8::String>("TaskStatus").ToLocalChecked();
     v8::Local<v8::Integer> TaskStatusValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInfo->TaskStatus);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRspQryNetMonitorTaskInfo->Comments).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorTaskInfoJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(DeviceGroup_ID),Local<v8::Value>(DeviceGroup_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ManagerGroup_ID),Local<v8::Value>(ManagerGroup_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(TimePolicy_ID),Local<v8::Value>(TimePolicy_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskPriority_ID),Local<v8::Value>(TaskPriority_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(OutputPolicy_ID),Local<v8::Value>(OutputPolicy_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(EventExprStr),Local<v8::Value>(EventExprStrValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(DeviceGroup),Local<v8::Value>(DeviceGroupValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ManagerGroup),Local<v8::Value>(ManagerGroupValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(TimePolicy),Local<v8::Value>(TimePolicyValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskPriority),Local<v8::Value>(TaskPriorityValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(OutputPolicy),Local<v8::Value>(OutputPolicyValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ActionGroup),Local<v8::Value>(ActionGroupValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(ValidFlag),Local<v8::Value>(ValidFlagValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskStatus),Local<v8::Value>(TaskStatusValue));
     pRspQryNetMonitorTaskInfoJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTaskInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTaskInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTaskInfoField *pRtnNetMonitorTaskInfo =(CShfeFtdcRtnNetMonitorTaskInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetMonitorTaskInfo->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetMonitorTaskInfo->EName).ToLocalChecked();
     v8::Local<v8::String> DeviceGroup_ID=Nan::New<v8::String>("DeviceGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->DeviceGroup_ID);
     v8::Local<v8::String> ManagerGroup_ID=Nan::New<v8::String>("ManagerGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ManagerGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->ManagerGroup_ID);
     v8::Local<v8::String> TimePolicy_ID=Nan::New<v8::String>("TimePolicy_ID").ToLocalChecked();
     v8::Local<v8::Integer> TimePolicy_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->TimePolicy_ID);
     v8::Local<v8::String> TaskPriority_ID=Nan::New<v8::String>("TaskPriority_ID").ToLocalChecked();
     v8::Local<v8::Integer> TaskPriority_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->TaskPriority_ID);
     v8::Local<v8::String> OutputPolicy_ID=Nan::New<v8::String>("OutputPolicy_ID").ToLocalChecked();
     v8::Local<v8::Integer> OutputPolicy_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->OutputPolicy_ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->ActionGroup_ID);
     v8::Local<v8::String> EventExprStr=Nan::New<v8::String>("EventExprStr").ToLocalChecked();
     v8::Local<v8::String> EventExprStrValue=Nan::New(pRtnNetMonitorTaskInfo->EventExprStr).ToLocalChecked();
     v8::Local<v8::String> DeviceGroup=Nan::New<v8::String>("DeviceGroup").ToLocalChecked();
     v8::Local<v8::String> DeviceGroupValue=Nan::New(pRtnNetMonitorTaskInfo->DeviceGroup).ToLocalChecked();
     v8::Local<v8::String> ManagerGroup=Nan::New<v8::String>("ManagerGroup").ToLocalChecked();
     v8::Local<v8::String> ManagerGroupValue=Nan::New(pRtnNetMonitorTaskInfo->ManagerGroup).ToLocalChecked();
     v8::Local<v8::String> TimePolicy=Nan::New<v8::String>("TimePolicy").ToLocalChecked();
     v8::Local<v8::String> TimePolicyValue=Nan::New(pRtnNetMonitorTaskInfo->TimePolicy).ToLocalChecked();
     v8::Local<v8::String> TaskPriority=Nan::New<v8::String>("TaskPriority").ToLocalChecked();
     v8::Local<v8::String> TaskPriorityValue=Nan::New(pRtnNetMonitorTaskInfo->TaskPriority).ToLocalChecked();
     v8::Local<v8::String> OutputPolicy=Nan::New<v8::String>("OutputPolicy").ToLocalChecked();
     v8::Local<v8::String> OutputPolicyValue=Nan::New(pRtnNetMonitorTaskInfo->OutputPolicy).ToLocalChecked();
     v8::Local<v8::String> ActionGroup=Nan::New<v8::String>("ActionGroup").ToLocalChecked();
     v8::Local<v8::String> ActionGroupValue=Nan::New(pRtnNetMonitorTaskInfo->ActionGroup).ToLocalChecked();
     v8::Local<v8::String> ValidFlag=Nan::New<v8::String>("ValidFlag").ToLocalChecked();
     v8::Local<v8::Integer> ValidFlagValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->ValidFlag);
     v8::Local<v8::String> TaskStatus=Nan::New<v8::String>("TaskStatus").ToLocalChecked();
     v8::Local<v8::Integer> TaskStatusValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInfo->TaskStatus);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRtnNetMonitorTaskInfo->Comments).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorTaskInfoJS=Nan::New<v8::Object>();
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(DeviceGroup_ID),Local<v8::Value>(DeviceGroup_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ManagerGroup_ID),Local<v8::Value>(ManagerGroup_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(TimePolicy_ID),Local<v8::Value>(TimePolicy_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskPriority_ID),Local<v8::Value>(TaskPriority_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(OutputPolicy_ID),Local<v8::Value>(OutputPolicy_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(EventExprStr),Local<v8::Value>(EventExprStrValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(DeviceGroup),Local<v8::Value>(DeviceGroupValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ManagerGroup),Local<v8::Value>(ManagerGroupValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(TimePolicy),Local<v8::Value>(TimePolicyValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskPriority),Local<v8::Value>(TaskPriorityValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(OutputPolicy),Local<v8::Value>(OutputPolicyValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ActionGroup),Local<v8::Value>(ActionGroupValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(ValidFlag),Local<v8::Value>(ValidFlagValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(TaskStatus),Local<v8::Value>(TaskStatusValue));
     pRtnNetMonitorTaskInfoJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTaskInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTaskResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTaskResultField *pRspQryNetMonitorTaskResult =(CShfeFtdcRspQryNetMonitorTaskResultField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskResult->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetMonitorTaskResult->ObjectID).ToLocalChecked();
     v8::Local<v8::String> Task_ID=Nan::New<v8::String>("Task_ID").ToLocalChecked();
     v8::Local<v8::Integer> Task_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskResult->Task_ID);
     v8::Local<v8::String> OperateTime=Nan::New<v8::String>("OperateTime").ToLocalChecked();
     v8::Local<v8::Integer> OperateTimeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskResult->OperateTime);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetMonitorTaskResult->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetMonitorTaskResult->MonTime).ToLocalChecked();
     v8::Local<v8::String> InstructChain=Nan::New<v8::String>("InstructChain").ToLocalChecked();
     v8::Local<v8::String> InstructChainValue=Nan::New(pRspQryNetMonitorTaskResult->InstructChain).ToLocalChecked();
     v8::Local<v8::String> ResultChain=Nan::New<v8::String>("ResultChain").ToLocalChecked();
     v8::Local<v8::String> ResultChainValue=Nan::New(pRspQryNetMonitorTaskResult->ResultChain).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskResult->Flag);
     v8::Local<v8::Object> pRspQryNetMonitorTaskResultJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(Task_ID),Local<v8::Value>(Task_IDValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(OperateTime),Local<v8::Value>(OperateTimeValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(InstructChain),Local<v8::Value>(InstructChainValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(ResultChain),Local<v8::Value>(ResultChainValue));
     pRspQryNetMonitorTaskResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTaskResultJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTaskResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTaskResultField *pRtnNetMonitorTaskResult =(CShfeFtdcRtnNetMonitorTaskResultField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskResult->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetMonitorTaskResult->ObjectID).ToLocalChecked();
     v8::Local<v8::String> Task_ID=Nan::New<v8::String>("Task_ID").ToLocalChecked();
     v8::Local<v8::Integer> Task_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskResult->Task_ID);
     v8::Local<v8::String> OperateTime=Nan::New<v8::String>("OperateTime").ToLocalChecked();
     v8::Local<v8::Integer> OperateTimeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskResult->OperateTime);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetMonitorTaskResult->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetMonitorTaskResult->MonTime).ToLocalChecked();
     v8::Local<v8::String> InstructChain=Nan::New<v8::String>("InstructChain").ToLocalChecked();
     v8::Local<v8::String> InstructChainValue=Nan::New(pRtnNetMonitorTaskResult->InstructChain).ToLocalChecked();
     v8::Local<v8::String> ResultChain=Nan::New<v8::String>("ResultChain").ToLocalChecked();
     v8::Local<v8::String> ResultChainValue=Nan::New(pRtnNetMonitorTaskResult->ResultChain).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskResult->Flag);

     v8::Local<v8::Object> pRtnNetMonitorTaskResultJS=Nan::New<v8::Object>();
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(Task_ID),Local<v8::Value>(Task_IDValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(OperateTime),Local<v8::Value>(OperateTimeValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(InstructChain),Local<v8::Value>(InstructChainValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(ResultChain),Local<v8::Value>(ResultChainValue));
     pRtnNetMonitorTaskResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTaskResultJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTaskObjectSetTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskObjectSetTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTaskObjectSetField *pRspQryNetMonitorTaskObjectSet =(CShfeFtdcRspQryNetMonitorTaskObjectSetField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskObjectSet->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskObjectSet->ID);
     v8::Local<v8::String> DeviceGroup_ID=Nan::New<v8::String>("DeviceGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskObjectSet->DeviceGroup_ID);
     v8::Local<v8::String> Device_ID=Nan::New<v8::String>("Device_ID").ToLocalChecked();
     v8::Local<v8::Integer> Device_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskObjectSet->Device_ID);
     v8::Local<v8::String> DataCenter=Nan::New<v8::String>("DataCenter").ToLocalChecked();
     v8::Local<v8::Integer> DataCenterValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskObjectSet->DataCenter);
     v8::Local<v8::Object> pRspQryNetMonitorTaskObjectSetJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(DeviceGroup_ID),Local<v8::Value>(DeviceGroup_IDValue));
     pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(Device_ID),Local<v8::Value>(Device_IDValue));
     pRspQryNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(DataCenter),Local<v8::Value>(DataCenterValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTaskObjectSetJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTaskObjectSetTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskObjectSetTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTaskObjectSetField *pRtnNetMonitorTaskObjectSet =(CShfeFtdcRtnNetMonitorTaskObjectSetField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskObjectSet->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskObjectSet->ID);
     v8::Local<v8::String> DeviceGroup_ID=Nan::New<v8::String>("DeviceGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskObjectSet->DeviceGroup_ID);
     v8::Local<v8::String> Device_ID=Nan::New<v8::String>("Device_ID").ToLocalChecked();
     v8::Local<v8::Integer> Device_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskObjectSet->Device_ID);
     v8::Local<v8::String> DataCenter=Nan::New<v8::String>("DataCenter").ToLocalChecked();
     v8::Local<v8::Integer> DataCenterValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskObjectSet->DataCenter);

     v8::Local<v8::Object> pRtnNetMonitorTaskObjectSetJS=Nan::New<v8::Object>();
     pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(DeviceGroup_ID),Local<v8::Value>(DeviceGroup_IDValue));
     pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(Device_ID),Local<v8::Value>(Device_IDValue));
     pRtnNetMonitorTaskObjectSetJS->Set(Local<v8::Value>(DataCenter),Local<v8::Value>(DataCenterValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTaskObjectSetJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPartyLinkInfoField *pRspQryNetPartyLinkInfo =(CShfeFtdcRspQryNetPartyLinkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRspQryNetPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRspQryNetPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRspQryNetPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRspQryNetPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRspQryNetPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRspQryNetPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRspQryNetPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRspQryNetPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRspQryNetPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRspQryNetPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRspQryNetPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRspQryNetPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryNetPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRspQryNetPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRspQryNetPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRspQryNetPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRspQryNetPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRspQryNetPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRspQryNetPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRspQryNetPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRspQryNetPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRspQryNetPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRspQryNetPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRspQryNetPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRspQryNetPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRspQryNetPartyLinkInfo->PRO).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPartyLinkInfoJS=Nan::New<v8::Object>();
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRspQryNetPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPartyLinkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPartyLinkInfoField *pRtnNetPartyLinkInfo =(CShfeFtdcRtnNetPartyLinkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRtnNetPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRtnNetPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRtnNetPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRtnNetPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRtnNetPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRtnNetPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRtnNetPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRtnNetPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRtnNetPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRtnNetPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRtnNetPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRtnNetPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnNetPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRtnNetPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRtnNetPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRtnNetPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRtnNetPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRtnNetPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRtnNetPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRtnNetPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRtnNetPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRtnNetPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRtnNetPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRtnNetPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRtnNetPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRtnNetPartyLinkInfo->PRO).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPartyLinkInfoJS=Nan::New<v8::Object>();
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRtnNetPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPartyLinkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorActionAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorActionAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorActionAttrField *pRspQryNetMonitorActionAttr =(CShfeFtdcRspQryNetMonitorActionAttrField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionAttr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionAttr->ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionAttr->ActionGroup_ID);
     v8::Local<v8::String> MonitorAttr_ID=Nan::New<v8::String>("MonitorAttr_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorAttr_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorActionAttr->MonitorAttr_ID);
     v8::Local<v8::String> MonitorAttrName=Nan::New<v8::String>("MonitorAttrName").ToLocalChecked();
     v8::Local<v8::String> MonitorAttrNameValue=Nan::New(pRspQryNetMonitorActionAttr->MonitorAttrName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorActionAttrJS=Nan::New<v8::Object>();
     pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value>(MonitorAttr_ID),Local<v8::Value>(MonitorAttr_IDValue));
     pRspQryNetMonitorActionAttrJS->Set(Local<v8::Value>(MonitorAttrName),Local<v8::Value>(MonitorAttrNameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorActionAttrJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorActionAttrTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorActionAttrTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorActionAttrField *pRtnNetMonitorActionAttr =(CShfeFtdcRtnNetMonitorActionAttrField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorActionAttr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorActionAttr->ID);
     v8::Local<v8::String> ActionGroup_ID=Nan::New<v8::String>("ActionGroup_ID").ToLocalChecked();
     v8::Local<v8::Integer> ActionGroup_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorActionAttr->ActionGroup_ID);
     v8::Local<v8::String> MonitorAttr_ID=Nan::New<v8::String>("MonitorAttr_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorAttr_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorActionAttr->MonitorAttr_ID);
     v8::Local<v8::String> MonitorAttrName=Nan::New<v8::String>("MonitorAttrName").ToLocalChecked();
     v8::Local<v8::String> MonitorAttrNameValue=Nan::New(pRtnNetMonitorActionAttr->MonitorAttrName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorActionAttrJS=Nan::New<v8::Object>();
     pRtnNetMonitorActionAttrJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorActionAttrJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorActionAttrJS->Set(Local<v8::Value>(ActionGroup_ID),Local<v8::Value>(ActionGroup_IDValue));
     pRtnNetMonitorActionAttrJS->Set(Local<v8::Value>(MonitorAttr_ID),Local<v8::Value>(MonitorAttr_IDValue));
     pRtnNetMonitorActionAttrJS->Set(Local<v8::Value>(MonitorAttrName),Local<v8::Value>(MonitorAttrNameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorActionAttrJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetModuleTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetModuleTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetModuleField *pRspQryNetModule =(CShfeFtdcRspQryNetModuleField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetModule->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetModule->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetModule->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRspQryNetModule->MonitorType_ID);
     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRspQryNetModule->DeviceID);
     v8::Local<v8::String> DeviceObjectID=Nan::New<v8::String>("DeviceObjectID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjectIDValue=Nan::New(pRspQryNetModule->DeviceObjectID).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryNetModule->Name).ToLocalChecked();
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRspQryNetModule->Description).ToLocalChecked();
     v8::Local<v8::String> ModuleIndex=Nan::New<v8::String>("ModuleIndex").ToLocalChecked();
     v8::Local<v8::Integer> ModuleIndexValue=Nan::New<v8::Integer>(pRspQryNetModule->ModuleIndex);
     v8::Local<v8::String> EntPhyIndex=Nan::New<v8::String>("EntPhyIndex").ToLocalChecked();
     v8::Local<v8::Integer> EntPhyIndexValue=Nan::New<v8::Integer>(pRspQryNetModule->EntPhyIndex);
     v8::Local<v8::Object> pRspQryNetModuleJS=Nan::New<v8::Object>();
     pRspQryNetModuleJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(DeviceObjectID),Local<v8::Value>(DeviceObjectIDValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(ModuleIndex),Local<v8::Value>(ModuleIndexValue));
     pRspQryNetModuleJS->Set(Local<v8::Value>(EntPhyIndex),Local<v8::Value>(EntPhyIndexValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetModuleJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetModuleTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetModuleTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetModuleField *pRtnNetModule =(CShfeFtdcRtnNetModuleField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetModule->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetModule->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetModule->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonitorType_ID=Nan::New<v8::String>("MonitorType_ID").ToLocalChecked();
     v8::Local<v8::Integer> MonitorType_IDValue=Nan::New<v8::Integer>(pRtnNetModule->MonitorType_ID);
     v8::Local<v8::String> DeviceID=Nan::New<v8::String>("DeviceID").ToLocalChecked();
     v8::Local<v8::Integer> DeviceIDValue=Nan::New<v8::Integer>(pRtnNetModule->DeviceID);
     v8::Local<v8::String> DeviceObjectID=Nan::New<v8::String>("DeviceObjectID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjectIDValue=Nan::New(pRtnNetModule->DeviceObjectID).ToLocalChecked();
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnNetModule->Name).ToLocalChecked();
     v8::Local<v8::String> Description=Nan::New<v8::String>("Description").ToLocalChecked();
     v8::Local<v8::String> DescriptionValue=Nan::New(pRtnNetModule->Description).ToLocalChecked();
     v8::Local<v8::String> ModuleIndex=Nan::New<v8::String>("ModuleIndex").ToLocalChecked();
     v8::Local<v8::Integer> ModuleIndexValue=Nan::New<v8::Integer>(pRtnNetModule->ModuleIndex);
     v8::Local<v8::String> EntPhyIndex=Nan::New<v8::String>("EntPhyIndex").ToLocalChecked();
     v8::Local<v8::Integer> EntPhyIndexValue=Nan::New<v8::Integer>(pRtnNetModule->EntPhyIndex);

     v8::Local<v8::Object> pRtnNetModuleJS=Nan::New<v8::Object>();
     pRtnNetModuleJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(MonitorType_ID),Local<v8::Value>(MonitorType_IDValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(DeviceID),Local<v8::Value>(DeviceIDValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(DeviceObjectID),Local<v8::Value>(DeviceObjectIDValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(Description),Local<v8::Value>(DescriptionValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(ModuleIndex),Local<v8::Value>(ModuleIndexValue));
     pRtnNetModuleJS->Set(Local<v8::Value>(EntPhyIndex),Local<v8::Value>(EntPhyIndexValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetModuleJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetEventExprTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventExprTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetEventExprField *pRspQryNetEventExpr =(CShfeFtdcRspQryNetEventExprField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->ID);
     v8::Local<v8::String> CNAME=Nan::New<v8::String>("CNAME").ToLocalChecked();
     v8::Local<v8::String> CNAMEValue=Nan::New(pRspQryNetEventExpr->CNAME).ToLocalChecked();
     v8::Local<v8::String> ENAME=Nan::New<v8::String>("ENAME").ToLocalChecked();
     v8::Local<v8::String> ENAMEValue=Nan::New(pRspQryNetEventExpr->ENAME).ToLocalChecked();
     v8::Local<v8::String> WarningLEVEL=Nan::New<v8::String>("WarningLEVEL").ToLocalChecked();
     v8::Local<v8::String> WarningLEVELValue=Nan::New(pRspQryNetEventExpr->WarningLEVEL).ToLocalChecked();
     v8::Local<v8::String> EventTypeID=Nan::New<v8::String>("EventTypeID").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeIDValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->EventTypeID);
     v8::Local<v8::String> SubEventTypeID=Nan::New<v8::String>("SubEventTypeID").ToLocalChecked();
     v8::Local<v8::Integer> SubEventTypeIDValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->SubEventTypeID);
     v8::Local<v8::String> GIVEUPTIME=Nan::New<v8::String>("GIVEUPTIME").ToLocalChecked();
     v8::Local<v8::Integer> GIVEUPTIMEValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->GIVEUPTIME);
     v8::Local<v8::String> CONTROL=Nan::New<v8::String>("CONTROL").ToLocalChecked();
     v8::Local<v8::String> CONTROLValue=Nan::New(pRspQryNetEventExpr->CONTROL).ToLocalChecked();
     v8::Local<v8::String> EXPR=Nan::New<v8::String>("EXPR").ToLocalChecked();
     v8::Local<v8::String> EXPRValue=Nan::New(pRspQryNetEventExpr->EXPR).ToLocalChecked();
     v8::Local<v8::String> BRIEF=Nan::New<v8::String>("BRIEF").ToLocalChecked();
     v8::Local<v8::String> BRIEFValue=Nan::New(pRspQryNetEventExpr->BRIEF).ToLocalChecked();
     v8::Local<v8::String> DISCRIPTION=Nan::New<v8::String>("DISCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DISCRIPTIONValue=Nan::New(pRspQryNetEventExpr->DISCRIPTION).ToLocalChecked();
     v8::Local<v8::String> MSGGROUP_ID=Nan::New<v8::String>("MSGGROUP_ID").ToLocalChecked();
     v8::Local<v8::Integer> MSGGROUP_IDValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->MSGGROUP_ID);
     v8::Local<v8::String> ADMINGROUP_ID=Nan::New<v8::String>("ADMINGROUP_ID").ToLocalChecked();
     v8::Local<v8::Integer> ADMINGROUP_IDValue=Nan::New<v8::Integer>(pRspQryNetEventExpr->ADMINGROUP_ID);
     v8::Local<v8::Object> pRspQryNetEventExprJS=Nan::New<v8::Object>();
     pRspQryNetEventExprJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(CNAME),Local<v8::Value>(CNAMEValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(ENAME),Local<v8::Value>(ENAMEValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(WarningLEVEL),Local<v8::Value>(WarningLEVELValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(EventTypeID),Local<v8::Value>(EventTypeIDValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(SubEventTypeID),Local<v8::Value>(SubEventTypeIDValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(GIVEUPTIME),Local<v8::Value>(GIVEUPTIMEValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(CONTROL),Local<v8::Value>(CONTROLValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(EXPR),Local<v8::Value>(EXPRValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(BRIEF),Local<v8::Value>(BRIEFValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(DISCRIPTION),Local<v8::Value>(DISCRIPTIONValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(MSGGROUP_ID),Local<v8::Value>(MSGGROUP_IDValue));
     pRspQryNetEventExprJS->Set(Local<v8::Value>(ADMINGROUP_ID),Local<v8::Value>(ADMINGROUP_IDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetEventExprJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetEventExprTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventExprTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetEventExprField *pRtnNetEventExpr =(CShfeFtdcRtnNetEventExprField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetEventExpr->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetEventExpr->ID);
     v8::Local<v8::String> CNAME=Nan::New<v8::String>("CNAME").ToLocalChecked();
     v8::Local<v8::String> CNAMEValue=Nan::New(pRtnNetEventExpr->CNAME).ToLocalChecked();
     v8::Local<v8::String> ENAME=Nan::New<v8::String>("ENAME").ToLocalChecked();
     v8::Local<v8::String> ENAMEValue=Nan::New(pRtnNetEventExpr->ENAME).ToLocalChecked();
     v8::Local<v8::String> WarningLEVEL=Nan::New<v8::String>("WarningLEVEL").ToLocalChecked();
     v8::Local<v8::String> WarningLEVELValue=Nan::New(pRtnNetEventExpr->WarningLEVEL).ToLocalChecked();
     v8::Local<v8::String> EventTypeID=Nan::New<v8::String>("EventTypeID").ToLocalChecked();
     v8::Local<v8::Integer> EventTypeIDValue=Nan::New<v8::Integer>(pRtnNetEventExpr->EventTypeID);
     v8::Local<v8::String> SubEventTypeID=Nan::New<v8::String>("SubEventTypeID").ToLocalChecked();
     v8::Local<v8::Integer> SubEventTypeIDValue=Nan::New<v8::Integer>(pRtnNetEventExpr->SubEventTypeID);
     v8::Local<v8::String> GIVEUPTIME=Nan::New<v8::String>("GIVEUPTIME").ToLocalChecked();
     v8::Local<v8::Integer> GIVEUPTIMEValue=Nan::New<v8::Integer>(pRtnNetEventExpr->GIVEUPTIME);
     v8::Local<v8::String> CONTROL=Nan::New<v8::String>("CONTROL").ToLocalChecked();
     v8::Local<v8::String> CONTROLValue=Nan::New(pRtnNetEventExpr->CONTROL).ToLocalChecked();
     v8::Local<v8::String> EXPR=Nan::New<v8::String>("EXPR").ToLocalChecked();
     v8::Local<v8::String> EXPRValue=Nan::New(pRtnNetEventExpr->EXPR).ToLocalChecked();
     v8::Local<v8::String> BRIEF=Nan::New<v8::String>("BRIEF").ToLocalChecked();
     v8::Local<v8::String> BRIEFValue=Nan::New(pRtnNetEventExpr->BRIEF).ToLocalChecked();
     v8::Local<v8::String> DISCRIPTION=Nan::New<v8::String>("DISCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DISCRIPTIONValue=Nan::New(pRtnNetEventExpr->DISCRIPTION).ToLocalChecked();
     v8::Local<v8::String> MSGGROUP_ID=Nan::New<v8::String>("MSGGROUP_ID").ToLocalChecked();
     v8::Local<v8::Integer> MSGGROUP_IDValue=Nan::New<v8::Integer>(pRtnNetEventExpr->MSGGROUP_ID);
     v8::Local<v8::String> ADMINGROUP_ID=Nan::New<v8::String>("ADMINGROUP_ID").ToLocalChecked();
     v8::Local<v8::Integer> ADMINGROUP_IDValue=Nan::New<v8::Integer>(pRtnNetEventExpr->ADMINGROUP_ID);

     v8::Local<v8::Object> pRtnNetEventExprJS=Nan::New<v8::Object>();
     pRtnNetEventExprJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(CNAME),Local<v8::Value>(CNAMEValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(ENAME),Local<v8::Value>(ENAMEValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(WarningLEVEL),Local<v8::Value>(WarningLEVELValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(EventTypeID),Local<v8::Value>(EventTypeIDValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(SubEventTypeID),Local<v8::Value>(SubEventTypeIDValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(GIVEUPTIME),Local<v8::Value>(GIVEUPTIMEValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(CONTROL),Local<v8::Value>(CONTROLValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(EXPR),Local<v8::Value>(EXPRValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(BRIEF),Local<v8::Value>(BRIEFValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(DISCRIPTION),Local<v8::Value>(DISCRIPTIONValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(MSGGROUP_ID),Local<v8::Value>(MSGGROUP_IDValue));
     pRtnNetEventExprJS->Set(Local<v8::Value>(ADMINGROUP_ID),Local<v8::Value>(ADMINGROUP_IDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetEventExprJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetEventTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetEventTypeField *pRspQryNetEventType =(CShfeFtdcRspQryNetEventTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetEventType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetEventType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetEventType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetEventType->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetEventTypeJS=Nan::New<v8::Object>();
     pRspQryNetEventTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetEventTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetEventTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetEventTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetEventTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetEventTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetEventTypeField *pRtnNetEventType =(CShfeFtdcRtnNetEventTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetEventType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetEventType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetEventType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetEventType->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetEventTypeJS=Nan::New<v8::Object>();
     pRtnNetEventTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetEventTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetEventTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetEventTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetEventTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetSubEventTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetSubEventTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetSubEventTypeField *pRspQryNetSubEventType =(CShfeFtdcRspQryNetSubEventTypeField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetSubEventType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetSubEventType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetSubEventType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetSubEventType->EName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetSubEventTypeJS=Nan::New<v8::Object>();
     pRspQryNetSubEventTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetSubEventTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetSubEventTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetSubEventTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetSubEventTypeJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetSubEventTypeTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetSubEventTypeTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetSubEventTypeField *pRtnNetSubEventType =(CShfeFtdcRtnNetSubEventTypeField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetSubEventType->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetSubEventType->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetSubEventType->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetSubEventType->EName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetSubEventTypeJS=Nan::New<v8::Object>();
     pRtnNetSubEventTypeJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetSubEventTypeJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetSubEventTypeJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetSubEventTypeJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetSubEventTypeJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetEventLevelTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetEventLevelTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetEventLevelField *pRspQryNetEventLevel =(CShfeFtdcRspQryNetEventLevelField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetEventLevel->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetEventLevel->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRspQryNetEventLevel->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRspQryNetEventLevel->EName).ToLocalChecked();
     v8::Local<v8::String> DISCRIPTION=Nan::New<v8::String>("DISCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DISCRIPTIONValue=Nan::New(pRspQryNetEventLevel->DISCRIPTION).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetEventLevelJS=Nan::New<v8::Object>();
     pRspQryNetEventLevelJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetEventLevelJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetEventLevelJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRspQryNetEventLevelJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRspQryNetEventLevelJS->Set(Local<v8::Value>(DISCRIPTION),Local<v8::Value>(DISCRIPTIONValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetEventLevelJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetEventLevelTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetEventLevelTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetEventLevelField *pRtnNetEventLevel =(CShfeFtdcRtnNetEventLevelField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetEventLevel->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetEventLevel->ID);
     v8::Local<v8::String> CName=Nan::New<v8::String>("CName").ToLocalChecked();
     v8::Local<v8::String> CNameValue=Nan::New(pRtnNetEventLevel->CName).ToLocalChecked();
     v8::Local<v8::String> EName=Nan::New<v8::String>("EName").ToLocalChecked();
     v8::Local<v8::String> ENameValue=Nan::New(pRtnNetEventLevel->EName).ToLocalChecked();
     v8::Local<v8::String> DISCRIPTION=Nan::New<v8::String>("DISCRIPTION").ToLocalChecked();
     v8::Local<v8::String> DISCRIPTIONValue=Nan::New(pRtnNetEventLevel->DISCRIPTION).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetEventLevelJS=Nan::New<v8::Object>();
     pRtnNetEventLevelJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetEventLevelJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetEventLevelJS->Set(Local<v8::Value>(CName),Local<v8::Value>(CNameValue));
     pRtnNetEventLevelJS->Set(Local<v8::Value>(EName),Local<v8::Value>(ENameValue));
     pRtnNetEventLevelJS->Set(Local<v8::Value>(DISCRIPTION),Local<v8::Value>(DISCRIPTIONValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetEventLevelJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTaskStatusResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskStatusResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTaskStatusResultField *pRspQryNetMonitorTaskStatusResult =(CShfeFtdcRspQryNetMonitorTaskStatusResultField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskStatusResult->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetMonitorTaskStatusResult->ObjectID).ToLocalChecked();
     v8::Local<v8::String> Task_ID=Nan::New<v8::String>("Task_ID").ToLocalChecked();
     v8::Local<v8::Integer> Task_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskStatusResult->Task_ID);
     v8::Local<v8::String> OperateTime=Nan::New<v8::String>("OperateTime").ToLocalChecked();
     v8::Local<v8::Integer> OperateTimeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskStatusResult->OperateTime);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetMonitorTaskStatusResult->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetMonitorTaskStatusResult->MonTime).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskStatusResult->Flag);
     v8::Local<v8::Object> pRspQryNetMonitorTaskStatusResultJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(Task_ID),Local<v8::Value>(Task_IDValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(OperateTime),Local<v8::Value>(OperateTimeValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTaskStatusResultJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTaskStatusResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskStatusResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTaskStatusResultField *pRtnNetMonitorTaskStatusResult =(CShfeFtdcRtnNetMonitorTaskStatusResultField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskStatusResult->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetMonitorTaskStatusResult->ObjectID).ToLocalChecked();
     v8::Local<v8::String> Task_ID=Nan::New<v8::String>("Task_ID").ToLocalChecked();
     v8::Local<v8::Integer> Task_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskStatusResult->Task_ID);
     v8::Local<v8::String> OperateTime=Nan::New<v8::String>("OperateTime").ToLocalChecked();
     v8::Local<v8::Integer> OperateTimeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskStatusResult->OperateTime);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetMonitorTaskStatusResult->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetMonitorTaskStatusResult->MonTime).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskStatusResult->Flag);

     v8::Local<v8::Object> pRtnNetMonitorTaskStatusResultJS=Nan::New<v8::Object>();
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(Task_ID),Local<v8::Value>(Task_IDValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(OperateTime),Local<v8::Value>(OperateTimeValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnNetMonitorTaskStatusResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTaskStatusResultJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetCfgFileTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetCfgFileTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetCfgFileField *pRspQryNetCfgFile =(CShfeFtdcRspQryNetCfgFileField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetCfgFile->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetCfgFile->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetCfgFile->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetCfgFile->MonTime).ToLocalChecked();
     v8::Local<v8::String> CfgFileName=Nan::New<v8::String>("CfgFileName").ToLocalChecked();
     v8::Local<v8::String> CfgFileNameValue=Nan::New(pRspQryNetCfgFile->CfgFileName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetCfgFileJS=Nan::New<v8::Object>();
     pRspQryNetCfgFileJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetCfgFileJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetCfgFileJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetCfgFileJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryNetCfgFileJS->Set(Local<v8::Value>(CfgFileName),Local<v8::Value>(CfgFileNameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetCfgFileJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetCfgFileTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetCfgFileTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetCfgFileField *pRtnNetCfgFile =(CShfeFtdcRtnNetCfgFileField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetCfgFile->OperationType);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetCfgFile->ObjectID).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetCfgFile->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetCfgFile->MonTime).ToLocalChecked();
     v8::Local<v8::String> CfgFileName=Nan::New<v8::String>("CfgFileName").ToLocalChecked();
     v8::Local<v8::String> CfgFileNameValue=Nan::New(pRtnNetCfgFile->CfgFileName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetCfgFileJS=Nan::New<v8::Object>();
     pRtnNetCfgFileJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetCfgFileJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetCfgFileJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetCfgFileJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnNetCfgFileJS->Set(Local<v8::Value>(CfgFileName),Local<v8::Value>(CfgFileNameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetCfgFileJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorDeviceTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorDeviceTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorDeviceTaskField *pRspQryNetMonitorDeviceTask =(CShfeFtdcRspQryNetMonitorDeviceTaskField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceTask->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRspQryNetMonitorDeviceTask->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRspQryNetMonitorDeviceTask->IPAddress).ToLocalChecked();
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceTask->Manufactory_ID);
     v8::Local<v8::String> InstructChain=Nan::New<v8::String>("InstructChain").ToLocalChecked();
     v8::Local<v8::String> InstructChainValue=Nan::New(pRspQryNetMonitorDeviceTask->InstructChain).ToLocalChecked();
     v8::Local<v8::String> InstructAlias=Nan::New<v8::String>("InstructAlias").ToLocalChecked();
     v8::Local<v8::String> InstructAliasValue=Nan::New(pRspQryNetMonitorDeviceTask->InstructAlias).ToLocalChecked();
     v8::Local<v8::String> InstructArgs=Nan::New<v8::String>("InstructArgs").ToLocalChecked();
     v8::Local<v8::String> InstructArgsValue=Nan::New(pRspQryNetMonitorDeviceTask->InstructArgs).ToLocalChecked();
     v8::Local<v8::String> DefParamChain=Nan::New<v8::String>("DefParamChain").ToLocalChecked();
     v8::Local<v8::String> DefParamChainValue=Nan::New(pRspQryNetMonitorDeviceTask->DefParamChain).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRspQryNetMonitorDeviceTask->Flag);
     v8::Local<v8::Object> pRspQryNetMonitorDeviceTaskJS=Nan::New<v8::Object>();
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructChain),Local<v8::Value>(InstructChainValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructAlias),Local<v8::Value>(InstructAliasValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructArgs),Local<v8::Value>(InstructArgsValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(DefParamChain),Local<v8::Value>(DefParamChainValue));
     pRspQryNetMonitorDeviceTaskJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorDeviceTaskJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorDeviceTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorDeviceTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorDeviceTaskField *pRtnNetMonitorDeviceTask =(CShfeFtdcRtnNetMonitorDeviceTaskField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceTask->ID);
     v8::Local<v8::String> ObjectID=Nan::New<v8::String>("ObjectID").ToLocalChecked();
     v8::Local<v8::String> ObjectIDValue=Nan::New(pRtnNetMonitorDeviceTask->ObjectID).ToLocalChecked();
     v8::Local<v8::String> IPAddress=Nan::New<v8::String>("IPAddress").ToLocalChecked();
     v8::Local<v8::String> IPAddressValue=Nan::New(pRtnNetMonitorDeviceTask->IPAddress).ToLocalChecked();
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceTask->Manufactory_ID);
     v8::Local<v8::String> InstructChain=Nan::New<v8::String>("InstructChain").ToLocalChecked();
     v8::Local<v8::String> InstructChainValue=Nan::New(pRtnNetMonitorDeviceTask->InstructChain).ToLocalChecked();
     v8::Local<v8::String> InstructAlias=Nan::New<v8::String>("InstructAlias").ToLocalChecked();
     v8::Local<v8::String> InstructAliasValue=Nan::New(pRtnNetMonitorDeviceTask->InstructAlias).ToLocalChecked();
     v8::Local<v8::String> InstructArgs=Nan::New<v8::String>("InstructArgs").ToLocalChecked();
     v8::Local<v8::String> InstructArgsValue=Nan::New(pRtnNetMonitorDeviceTask->InstructArgs).ToLocalChecked();
     v8::Local<v8::String> DefParamChain=Nan::New<v8::String>("DefParamChain").ToLocalChecked();
     v8::Local<v8::String> DefParamChainValue=Nan::New(pRtnNetMonitorDeviceTask->DefParamChain).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRtnNetMonitorDeviceTask->Flag);

     v8::Local<v8::Object> pRtnNetMonitorDeviceTaskJS=Nan::New<v8::Object>();
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(ObjectID),Local<v8::Value>(ObjectIDValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(IPAddress),Local<v8::Value>(IPAddressValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructChain),Local<v8::Value>(InstructChainValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructAlias),Local<v8::Value>(InstructAliasValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(InstructArgs),Local<v8::Value>(InstructArgsValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(DefParamChain),Local<v8::Value>(DefParamChainValue));
     pRtnNetMonitorDeviceTaskJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorDeviceTaskJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetMonitorTaskInstAttrsTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMonitorTaskInstAttrsTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMonitorTaskInstAttrsField *pRspQryNetMonitorTaskInstAttrs =(CShfeFtdcRspQryNetMonitorTaskInstAttrsField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInstAttrs->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInstAttrs->ID);
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRspQryNetMonitorTaskInstAttrs->Manufactory_ID);
     v8::Local<v8::String> InstructAlias=Nan::New<v8::String>("InstructAlias").ToLocalChecked();
     v8::Local<v8::String> InstructAliasValue=Nan::New(pRspQryNetMonitorTaskInstAttrs->InstructAlias).ToLocalChecked();
     v8::Local<v8::String> DEVICETYPE=Nan::New<v8::String>("DEVICETYPE").ToLocalChecked();
     v8::Local<v8::String> DEVICETYPEValue=Nan::New(pRspQryNetMonitorTaskInstAttrs->DEVICETYPE).ToLocalChecked();
     v8::Local<v8::String> AttrsChain=Nan::New<v8::String>("AttrsChain").ToLocalChecked();
     v8::Local<v8::String> AttrsChainValue=Nan::New(pRspQryNetMonitorTaskInstAttrs->AttrsChain).ToLocalChecked();
     v8::Local<v8::String> DefRegularChain=Nan::New<v8::String>("DefRegularChain").ToLocalChecked();
     v8::Local<v8::String> DefRegularChainValue=Nan::New(pRspQryNetMonitorTaskInstAttrs->DefRegularChain).ToLocalChecked();
     v8::Local<v8::String> DefParamChain=Nan::New<v8::String>("DefParamChain").ToLocalChecked();
     v8::Local<v8::String> DefParamChainValue=Nan::New(pRspQryNetMonitorTaskInstAttrs->DefParamChain).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetMonitorTaskInstAttrsJS=Nan::New<v8::Object>();
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(InstructAlias),Local<v8::Value>(InstructAliasValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DEVICETYPE),Local<v8::Value>(DEVICETYPEValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(AttrsChain),Local<v8::Value>(AttrsChainValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DefRegularChain),Local<v8::Value>(DefRegularChainValue));
     pRspQryNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DefParamChain),Local<v8::Value>(DefParamChainValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMonitorTaskInstAttrsJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMonitorTaskInstAttrsTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMonitorTaskInstAttrsTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMonitorTaskInstAttrsField *pRtnNetMonitorTaskInstAttrs =(CShfeFtdcRtnNetMonitorTaskInstAttrsField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInstAttrs->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInstAttrs->ID);
     v8::Local<v8::String> Manufactory_ID=Nan::New<v8::String>("Manufactory_ID").ToLocalChecked();
     v8::Local<v8::Integer> Manufactory_IDValue=Nan::New<v8::Integer>(pRtnNetMonitorTaskInstAttrs->Manufactory_ID);
     v8::Local<v8::String> InstructAlias=Nan::New<v8::String>("InstructAlias").ToLocalChecked();
     v8::Local<v8::String> InstructAliasValue=Nan::New(pRtnNetMonitorTaskInstAttrs->InstructAlias).ToLocalChecked();
     v8::Local<v8::String> DEVICETYPE=Nan::New<v8::String>("DEVICETYPE").ToLocalChecked();
     v8::Local<v8::String> DEVICETYPEValue=Nan::New(pRtnNetMonitorTaskInstAttrs->DEVICETYPE).ToLocalChecked();
     v8::Local<v8::String> AttrsChain=Nan::New<v8::String>("AttrsChain").ToLocalChecked();
     v8::Local<v8::String> AttrsChainValue=Nan::New(pRtnNetMonitorTaskInstAttrs->AttrsChain).ToLocalChecked();
     v8::Local<v8::String> DefRegularChain=Nan::New<v8::String>("DefRegularChain").ToLocalChecked();
     v8::Local<v8::String> DefRegularChainValue=Nan::New(pRtnNetMonitorTaskInstAttrs->DefRegularChain).ToLocalChecked();
     v8::Local<v8::String> DefParamChain=Nan::New<v8::String>("DefParamChain").ToLocalChecked();
     v8::Local<v8::String> DefParamChainValue=Nan::New(pRtnNetMonitorTaskInstAttrs->DefParamChain).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetMonitorTaskInstAttrsJS=Nan::New<v8::Object>();
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(Manufactory_ID),Local<v8::Value>(Manufactory_IDValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(InstructAlias),Local<v8::Value>(InstructAliasValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DEVICETYPE),Local<v8::Value>(DEVICETYPEValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(AttrsChain),Local<v8::Value>(AttrsChainValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DefRegularChain),Local<v8::Value>(DefRegularChainValue));
     pRtnNetMonitorTaskInstAttrsJS->Set(Local<v8::Value>(DefParamChain),Local<v8::Value>(DefParamChainValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMonitorTaskInstAttrsJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryFileGeneralOperTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryFileGeneralOperTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryFileGeneralOperField *pRspQryFileGeneralOper =(CShfeFtdcRspQryFileGeneralOperField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->OperationType);
     v8::Local<v8::String> FileName=Nan::New<v8::String>("FileName").ToLocalChecked();
     v8::Local<v8::String> FileNameValue=Nan::New(pRspQryFileGeneralOper->FileName).ToLocalChecked();
     v8::Local<v8::String> Version=Nan::New<v8::String>("Version").ToLocalChecked();
     v8::Local<v8::String> VersionValue=Nan::New(pRspQryFileGeneralOper->Version).ToLocalChecked();
     v8::Local<v8::String> SubVersion=Nan::New<v8::String>("SubVersion").ToLocalChecked();
     v8::Local<v8::Integer> SubVersionValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->SubVersion);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryFileGeneralOper->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryFileGeneralOper->MonTime).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRspQryFileGeneralOper->UserName).ToLocalChecked();
     v8::Local<v8::String> OperType=Nan::New<v8::String>("OperType").ToLocalChecked();
     v8::Local<v8::Integer> OperTypeValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->OperType);
     v8::Local<v8::String> OperResult=Nan::New<v8::String>("OperResult").ToLocalChecked();
     v8::Local<v8::Integer> OperResultValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->OperResult);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRspQryFileGeneralOper->Comments).ToLocalChecked();
     v8::Local<v8::String> Offset=Nan::New<v8::String>("Offset").ToLocalChecked();
     v8::Local<v8::Integer> OffsetValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->Offset);
     v8::Local<v8::String> Length=Nan::New<v8::String>("Length").ToLocalChecked();
     v8::Local<v8::Integer> LengthValue=Nan::New<v8::Integer>(pRspQryFileGeneralOper->Length);
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRspQryFileGeneralOper->FileContent).ToLocalChecked();
     v8::Local<v8::Object> pRspQryFileGeneralOperJS=Nan::New<v8::Object>();
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(FileName),Local<v8::Value>(FileNameValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(Version),Local<v8::Value>(VersionValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(SubVersion),Local<v8::Value>(SubVersionValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(OperType),Local<v8::Value>(OperTypeValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(OperResult),Local<v8::Value>(OperResultValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(Offset),Local<v8::Value>(OffsetValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(Length),Local<v8::Value>(LengthValue));
     pRspQryFileGeneralOperJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryFileGeneralOperJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnFileGeneralOperTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnFileGeneralOperTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnFileGeneralOperField *pRtnFileGeneralOper =(CShfeFtdcRtnFileGeneralOperField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->OperationType);
     v8::Local<v8::String> FileName=Nan::New<v8::String>("FileName").ToLocalChecked();
     v8::Local<v8::String> FileNameValue=Nan::New(pRtnFileGeneralOper->FileName).ToLocalChecked();
     v8::Local<v8::String> Version=Nan::New<v8::String>("Version").ToLocalChecked();
     v8::Local<v8::String> VersionValue=Nan::New(pRtnFileGeneralOper->Version).ToLocalChecked();
     v8::Local<v8::String> SubVersion=Nan::New<v8::String>("SubVersion").ToLocalChecked();
     v8::Local<v8::Integer> SubVersionValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->SubVersion);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnFileGeneralOper->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnFileGeneralOper->MonTime).ToLocalChecked();
     v8::Local<v8::String> UserName=Nan::New<v8::String>("UserName").ToLocalChecked();
     v8::Local<v8::String> UserNameValue=Nan::New(pRtnFileGeneralOper->UserName).ToLocalChecked();
     v8::Local<v8::String> OperType=Nan::New<v8::String>("OperType").ToLocalChecked();
     v8::Local<v8::Integer> OperTypeValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->OperType);
     v8::Local<v8::String> OperResult=Nan::New<v8::String>("OperResult").ToLocalChecked();
     v8::Local<v8::Integer> OperResultValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->OperResult);
     v8::Local<v8::String> Comments=Nan::New<v8::String>("Comments").ToLocalChecked();
     v8::Local<v8::String> CommentsValue=Nan::New(pRtnFileGeneralOper->Comments).ToLocalChecked();
     v8::Local<v8::String> Offset=Nan::New<v8::String>("Offset").ToLocalChecked();
     v8::Local<v8::Integer> OffsetValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->Offset);
     v8::Local<v8::String> Length=Nan::New<v8::String>("Length").ToLocalChecked();
     v8::Local<v8::Integer> LengthValue=Nan::New<v8::Integer>(pRtnFileGeneralOper->Length);
     v8::Local<v8::String> FileContent=Nan::New<v8::String>("FileContent").ToLocalChecked();
     v8::Local<v8::String> FileContentValue=Nan::New(pRtnFileGeneralOper->FileContent).ToLocalChecked();

     v8::Local<v8::Object> pRtnFileGeneralOperJS=Nan::New<v8::Object>();
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(FileName),Local<v8::Value>(FileNameValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(Version),Local<v8::Value>(VersionValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(SubVersion),Local<v8::Value>(SubVersionValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(UserName),Local<v8::Value>(UserNameValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(OperType),Local<v8::Value>(OperTypeValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(OperResult),Local<v8::Value>(OperResultValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(Comments),Local<v8::Value>(CommentsValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(Offset),Local<v8::Value>(OffsetValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(Length),Local<v8::Value>(LengthValue));
     pRtnFileGeneralOperJS->Set(Local<v8::Value>(FileContent),Local<v8::Value>(FileContentValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnFileGeneralOperJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetBaseLineTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetBaseLineField *pRspQryNetBaseLine =(CShfeFtdcRspQryNetBaseLineField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetBaseLine->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetBaseLine->ID);
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRspQryNetBaseLine->MANUFACTORY_ID);
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryNetBaseLine->Name).ToLocalChecked();
     v8::Local<v8::String> SerialUsed=Nan::New<v8::String>("SerialUsed").ToLocalChecked();
     v8::Local<v8::String> SerialUsedValue=Nan::New(pRspQryNetBaseLine->SerialUsed).ToLocalChecked();
     v8::Local<v8::String> data=Nan::New<v8::String>("data").ToLocalChecked();
     v8::Local<v8::String> dataValue=Nan::New(pRspQryNetBaseLine->data).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRspQryNetBaseLine->memo).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRspQryNetBaseLine->Flag);
     v8::Local<v8::Object> pRspQryNetBaseLineJS=Nan::New<v8::Object>();
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(SerialUsed),Local<v8::Value>(SerialUsedValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(data),Local<v8::Value>(dataValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));
     pRspQryNetBaseLineJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetBaseLineJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetBaseLineTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetBaseLineField *pRtnNetBaseLine =(CShfeFtdcRtnNetBaseLineField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetBaseLine->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetBaseLine->ID);
     v8::Local<v8::String> MANUFACTORY_ID=Nan::New<v8::String>("MANUFACTORY_ID").ToLocalChecked();
     v8::Local<v8::Integer> MANUFACTORY_IDValue=Nan::New<v8::Integer>(pRtnNetBaseLine->MANUFACTORY_ID);
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnNetBaseLine->Name).ToLocalChecked();
     v8::Local<v8::String> SerialUsed=Nan::New<v8::String>("SerialUsed").ToLocalChecked();
     v8::Local<v8::String> SerialUsedValue=Nan::New(pRtnNetBaseLine->SerialUsed).ToLocalChecked();
     v8::Local<v8::String> data=Nan::New<v8::String>("data").ToLocalChecked();
     v8::Local<v8::String> dataValue=Nan::New(pRtnNetBaseLine->data).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRtnNetBaseLine->memo).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRtnNetBaseLine->Flag);

     v8::Local<v8::Object> pRtnNetBaseLineJS=Nan::New<v8::Object>();
     pRtnNetBaseLineJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(MANUFACTORY_ID),Local<v8::Value>(MANUFACTORY_IDValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(SerialUsed),Local<v8::Value>(SerialUsedValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(data),Local<v8::Value>(dataValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));
     pRtnNetBaseLineJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetBaseLineJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetBaseLineTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetBaseLineTaskField *pRspQryNetBaseLineTask =(CShfeFtdcRspQryNetBaseLineTaskField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetBaseLineTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetBaseLineTask->ID);
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRspQryNetBaseLineTask->Name).ToLocalChecked();
     v8::Local<v8::String> BaseLineIDList=Nan::New<v8::String>("BaseLineIDList").ToLocalChecked();
     v8::Local<v8::String> BaseLineIDListValue=Nan::New(pRspQryNetBaseLineTask->BaseLineIDList).ToLocalChecked();
     v8::Local<v8::String> DeviceIDList=Nan::New<v8::String>("DeviceIDList").ToLocalChecked();
     v8::Local<v8::String> DeviceIDListValue=Nan::New(pRspQryNetBaseLineTask->DeviceIDList).ToLocalChecked();
     v8::Local<v8::String> GenDate=Nan::New<v8::String>("GenDate").ToLocalChecked();
     v8::Local<v8::String> GenDateValue=Nan::New(pRspQryNetBaseLineTask->GenDate).ToLocalChecked();
     v8::Local<v8::String> GenTime=Nan::New<v8::String>("GenTime").ToLocalChecked();
     v8::Local<v8::String> GenTimeValue=Nan::New(pRspQryNetBaseLineTask->GenTime).ToLocalChecked();
     v8::Local<v8::String> GenUser=Nan::New<v8::String>("GenUser").ToLocalChecked();
     v8::Local<v8::String> GenUserValue=Nan::New(pRspQryNetBaseLineTask->GenUser).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRspQryNetBaseLineTask->memo).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetBaseLineTaskJS=Nan::New<v8::Object>();
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(BaseLineIDList),Local<v8::Value>(BaseLineIDListValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(DeviceIDList),Local<v8::Value>(DeviceIDListValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(GenDate),Local<v8::Value>(GenDateValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(GenTime),Local<v8::Value>(GenTimeValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(GenUser),Local<v8::Value>(GenUserValue));
     pRspQryNetBaseLineTaskJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetBaseLineTaskJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetBaseLineTaskTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineTaskTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetBaseLineTaskField *pRtnNetBaseLineTask =(CShfeFtdcRtnNetBaseLineTaskField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetBaseLineTask->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetBaseLineTask->ID);
     v8::Local<v8::String> Name=Nan::New<v8::String>("Name").ToLocalChecked();
     v8::Local<v8::String> NameValue=Nan::New(pRtnNetBaseLineTask->Name).ToLocalChecked();
     v8::Local<v8::String> BaseLineIDList=Nan::New<v8::String>("BaseLineIDList").ToLocalChecked();
     v8::Local<v8::String> BaseLineIDListValue=Nan::New(pRtnNetBaseLineTask->BaseLineIDList).ToLocalChecked();
     v8::Local<v8::String> DeviceIDList=Nan::New<v8::String>("DeviceIDList").ToLocalChecked();
     v8::Local<v8::String> DeviceIDListValue=Nan::New(pRtnNetBaseLineTask->DeviceIDList).ToLocalChecked();
     v8::Local<v8::String> GenDate=Nan::New<v8::String>("GenDate").ToLocalChecked();
     v8::Local<v8::String> GenDateValue=Nan::New(pRtnNetBaseLineTask->GenDate).ToLocalChecked();
     v8::Local<v8::String> GenTime=Nan::New<v8::String>("GenTime").ToLocalChecked();
     v8::Local<v8::String> GenTimeValue=Nan::New(pRtnNetBaseLineTask->GenTime).ToLocalChecked();
     v8::Local<v8::String> GenUser=Nan::New<v8::String>("GenUser").ToLocalChecked();
     v8::Local<v8::String> GenUserValue=Nan::New(pRtnNetBaseLineTask->GenUser).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRtnNetBaseLineTask->memo).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetBaseLineTaskJS=Nan::New<v8::Object>();
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(Name),Local<v8::Value>(NameValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(BaseLineIDList),Local<v8::Value>(BaseLineIDListValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(DeviceIDList),Local<v8::Value>(DeviceIDListValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(GenDate),Local<v8::Value>(GenDateValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(GenTime),Local<v8::Value>(GenTimeValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(GenUser),Local<v8::Value>(GenUserValue));
     pRtnNetBaseLineTaskJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetBaseLineTaskJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetBaseLineResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetBaseLineResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetBaseLineResultField *pRspQryNetBaseLineResult =(CShfeFtdcRspQryNetBaseLineResultField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetBaseLineResult->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetBaseLineResult->ID);
     v8::Local<v8::String> BaseLineName=Nan::New<v8::String>("BaseLineName").ToLocalChecked();
     v8::Local<v8::String> BaseLineNameValue=Nan::New(pRspQryNetBaseLineResult->BaseLineName).ToLocalChecked();
     v8::Local<v8::String> DeviceObjID=Nan::New<v8::String>("DeviceObjID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjIDValue=Nan::New(pRspQryNetBaseLineResult->DeviceObjID).ToLocalChecked();
     v8::Local<v8::String> DeviceIP=Nan::New<v8::String>("DeviceIP").ToLocalChecked();
     v8::Local<v8::String> DeviceIPValue=Nan::New(pRspQryNetBaseLineResult->DeviceIP).ToLocalChecked();
     v8::Local<v8::String> Result=Nan::New<v8::String>("Result").ToLocalChecked();
     v8::Local<v8::String> ResultValue=Nan::New(pRspQryNetBaseLineResult->Result).ToLocalChecked();
     v8::Local<v8::String> GenDate=Nan::New<v8::String>("GenDate").ToLocalChecked();
     v8::Local<v8::String> GenDateValue=Nan::New(pRspQryNetBaseLineResult->GenDate).ToLocalChecked();
     v8::Local<v8::String> GenTime=Nan::New<v8::String>("GenTime").ToLocalChecked();
     v8::Local<v8::String> GenTimeValue=Nan::New(pRspQryNetBaseLineResult->GenTime).ToLocalChecked();
     v8::Local<v8::String> GenUser=Nan::New<v8::String>("GenUser").ToLocalChecked();
     v8::Local<v8::String> GenUserValue=Nan::New(pRspQryNetBaseLineResult->GenUser).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRspQryNetBaseLineResult->Flag);
     v8::Local<v8::Object> pRspQryNetBaseLineResultJS=Nan::New<v8::Object>();
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(BaseLineName),Local<v8::Value>(BaseLineNameValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(DeviceObjID),Local<v8::Value>(DeviceObjIDValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(DeviceIP),Local<v8::Value>(DeviceIPValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(Result),Local<v8::Value>(ResultValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(GenDate),Local<v8::Value>(GenDateValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(GenTime),Local<v8::Value>(GenTimeValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(GenUser),Local<v8::Value>(GenUserValue));
     pRspQryNetBaseLineResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetBaseLineResultJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetBaseLineResultTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetBaseLineResultTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetBaseLineResultField *pRtnNetBaseLineResult =(CShfeFtdcRtnNetBaseLineResultField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetBaseLineResult->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetBaseLineResult->ID);
     v8::Local<v8::String> BaseLineName=Nan::New<v8::String>("BaseLineName").ToLocalChecked();
     v8::Local<v8::String> BaseLineNameValue=Nan::New(pRtnNetBaseLineResult->BaseLineName).ToLocalChecked();
     v8::Local<v8::String> DeviceObjID=Nan::New<v8::String>("DeviceObjID").ToLocalChecked();
     v8::Local<v8::String> DeviceObjIDValue=Nan::New(pRtnNetBaseLineResult->DeviceObjID).ToLocalChecked();
     v8::Local<v8::String> DeviceIP=Nan::New<v8::String>("DeviceIP").ToLocalChecked();
     v8::Local<v8::String> DeviceIPValue=Nan::New(pRtnNetBaseLineResult->DeviceIP).ToLocalChecked();
     v8::Local<v8::String> Result=Nan::New<v8::String>("Result").ToLocalChecked();
     v8::Local<v8::String> ResultValue=Nan::New(pRtnNetBaseLineResult->Result).ToLocalChecked();
     v8::Local<v8::String> GenDate=Nan::New<v8::String>("GenDate").ToLocalChecked();
     v8::Local<v8::String> GenDateValue=Nan::New(pRtnNetBaseLineResult->GenDate).ToLocalChecked();
     v8::Local<v8::String> GenTime=Nan::New<v8::String>("GenTime").ToLocalChecked();
     v8::Local<v8::String> GenTimeValue=Nan::New(pRtnNetBaseLineResult->GenTime).ToLocalChecked();
     v8::Local<v8::String> GenUser=Nan::New<v8::String>("GenUser").ToLocalChecked();
     v8::Local<v8::String> GenUserValue=Nan::New(pRtnNetBaseLineResult->GenUser).ToLocalChecked();
     v8::Local<v8::String> Flag=Nan::New<v8::String>("Flag").ToLocalChecked();
     v8::Local<v8::Integer> FlagValue=Nan::New<v8::Integer>(pRtnNetBaseLineResult->Flag);

     v8::Local<v8::Object> pRtnNetBaseLineResultJS=Nan::New<v8::Object>();
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(BaseLineName),Local<v8::Value>(BaseLineNameValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(DeviceObjID),Local<v8::Value>(DeviceObjIDValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(DeviceIP),Local<v8::Value>(DeviceIPValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(Result),Local<v8::Value>(ResultValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(GenDate),Local<v8::Value>(GenDateValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(GenTime),Local<v8::Value>(GenTimeValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(GenUser),Local<v8::Value>(GenUserValue));
     pRtnNetBaseLineResultJS->Set(Local<v8::Value>(Flag),Local<v8::Value>(FlagValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetBaseLineResultJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPartyLinkStatusInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartyLinkStatusInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPartyLinkStatusInfoField *pRspQryNetPartyLinkStatusInfo =(CShfeFtdcRspQryNetPartyLinkStatusInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPartyLinkStatusInfo->OperationType);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRspQryNetPartyLinkStatusInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRspQryNetPartyLinkStatusInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRspQryNetPartyLinkStatusInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetPartyLinkStatusInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRspQryNetPartyLinkStatusInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> status=Nan::New<v8::String>("status").ToLocalChecked();
     v8::Local<v8::String> statusValue=Nan::New(pRspQryNetPartyLinkStatusInfo->status).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPartyLinkStatusInfoJS=Nan::New<v8::Object>();
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRspQryNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(status),Local<v8::Value>(statusValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPartyLinkStatusInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPartyLinkStatusInfoTopic(uv_async_t *handle)
{
    std::cout<<"\n********** CFunc::OnRtnNetPartyLinkStatusInfoTopic: START ********"<<std::endl;
    std::cout << "**** g_RtnNetPartyLinkStatusInfoTopic_Fun_index: " 
              << g_RtnNetPartyLinkStatusInfoTopic_Fun_index++ << endl;
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartyLinkStatusInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPartyLinkStatusInfoField *pRtnNetPartyLinkStatusInfo =(CShfeFtdcRtnNetPartyLinkStatusInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPartyLinkStatusInfo->OperationType);
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnNetPartyLinkStatusInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnNetPartyLinkStatusInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRtnNetPartyLinkStatusInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetPartyLinkStatusInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRtnNetPartyLinkStatusInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> status=Nan::New<v8::String>("status").ToLocalChecked();
     v8::Local<v8::String> statusValue=Nan::New(pRtnNetPartyLinkStatusInfo->status).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPartyLinkStatusInfoJS=Nan::New<v8::Object>();
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRtnNetPartyLinkStatusInfoJS->Set(Local<v8::Value>(status),Local<v8::Value>(statusValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPartyLinkStatusInfoJS);

     callback.Call(1, param);
     }
      
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
     std::cout<<"********** CFunc::OnRtnNetPartyLinkStatusInfoTopic: END ********\n"<<std::endl;
     
     uv_sem_post(&g_RtnNetPartyLinkStatusInfoTopic_sem);         
}
void OnRspQryNetMemberSDHLineInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetMemberSDHLineInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetMemberSDHLineInfoField *pRspQryNetMemberSDHLineInfo =(CShfeFtdcRspQryNetMemberSDHLineInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetMemberSDHLineInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetMemberSDHLineInfo->ID);
     v8::Local<v8::String> SeqNo=Nan::New<v8::String>("SeqNo").ToLocalChecked();
     v8::Local<v8::Integer> SeqNoValue=Nan::New<v8::Integer>(pRspQryNetMemberSDHLineInfo->SeqNo);
     v8::Local<v8::String> MemContractNo=Nan::New<v8::String>("MemContractNo").ToLocalChecked();
     v8::Local<v8::String> MemContractNoValue=Nan::New(pRspQryNetMemberSDHLineInfo->MemContractNo).ToLocalChecked();
     v8::Local<v8::String> ApplyPerson=Nan::New<v8::String>("ApplyPerson").ToLocalChecked();
     v8::Local<v8::String> ApplyPersonValue=Nan::New(pRspQryNetMemberSDHLineInfo->ApplyPerson).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRspQryNetMemberSDHLineInfo->MonthlyRental);
     v8::Local<v8::String> MemberNo=Nan::New<v8::String>("MemberNo").ToLocalChecked();
     v8::Local<v8::String> MemberNoValue=Nan::New(pRspQryNetMemberSDHLineInfo->MemberNo).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRspQryNetMemberSDHLineInfo->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ClientManager=Nan::New<v8::String>("ClientManager").ToLocalChecked();
     v8::Local<v8::String> ClientManagerValue=Nan::New(pRspQryNetMemberSDHLineInfo->ClientManager).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRspQryNetMemberSDHLineInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> InterfaceType=Nan::New<v8::String>("InterfaceType").ToLocalChecked();
     v8::Local<v8::String> InterfaceTypeValue=Nan::New(pRspQryNetMemberSDHLineInfo->InterfaceType).ToLocalChecked();
     v8::Local<v8::String> RemoteCircuit=Nan::New<v8::String>("RemoteCircuit").ToLocalChecked();
     v8::Local<v8::String> RemoteCircuitValue=Nan::New(pRspQryNetMemberSDHLineInfo->RemoteCircuit).ToLocalChecked();
     v8::Local<v8::String> LocalCircuit=Nan::New<v8::String>("LocalCircuit").ToLocalChecked();
     v8::Local<v8::String> LocalCircuitValue=Nan::New(pRspQryNetMemberSDHLineInfo->LocalCircuit).ToLocalChecked();
     v8::Local<v8::String> Remark=Nan::New<v8::String>("Remark").ToLocalChecked();
     v8::Local<v8::String> RemarkValue=Nan::New(pRspQryNetMemberSDHLineInfo->Remark).ToLocalChecked();
     v8::Local<v8::String> EndALineAddress=Nan::New<v8::String>("EndALineAddress").ToLocalChecked();
     v8::Local<v8::String> EndALineAddressValue=Nan::New(pRspQryNetMemberSDHLineInfo->EndALineAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContact=Nan::New<v8::String>("EndAContact").ToLocalChecked();
     v8::Local<v8::String> EndAContactValue=Nan::New(pRspQryNetMemberSDHLineInfo->EndAContact).ToLocalChecked();
     v8::Local<v8::String> EndZLineAddress=Nan::New<v8::String>("EndZLineAddress").ToLocalChecked();
     v8::Local<v8::String> EndZLineAddressValue=Nan::New(pRspQryNetMemberSDHLineInfo->EndZLineAddress).ToLocalChecked();
     v8::Local<v8::String> ContactName=Nan::New<v8::String>("ContactName").ToLocalChecked();
     v8::Local<v8::String> ContactNameValue=Nan::New(pRspQryNetMemberSDHLineInfo->ContactName).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRspQryNetMemberSDHLineInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRspQryNetMemberSDHLineInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetMemberSDHLineInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRspQryNetMemberSDHLineInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRspQryNetMemberSDHLineInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> StartPortID=Nan::New<v8::String>("StartPortID").ToLocalChecked();
     v8::Local<v8::String> StartPortIDValue=Nan::New(pRspQryNetMemberSDHLineInfo->StartPortID).ToLocalChecked();
     v8::Local<v8::String> StartJump=Nan::New<v8::String>("StartJump").ToLocalChecked();
     v8::Local<v8::String> StartJumpValue=Nan::New(pRspQryNetMemberSDHLineInfo->StartJump).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRspQryNetMemberSDHLineInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> DataCenterID=Nan::New<v8::String>("DataCenterID").ToLocalChecked();
     v8::Local<v8::Integer> DataCenterIDValue=Nan::New<v8::Integer>(pRspQryNetMemberSDHLineInfo->DataCenterID);
     v8::Local<v8::Object> pRspQryNetMemberSDHLineInfoJS=Nan::New<v8::Object>();
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(SeqNo),Local<v8::Value>(SeqNoValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MemContractNo),Local<v8::Value>(MemContractNoValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ApplyPerson),Local<v8::Value>(ApplyPersonValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MemberNo),Local<v8::Value>(MemberNoValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ClientManager),Local<v8::Value>(ClientManagerValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(InterfaceType),Local<v8::Value>(InterfaceTypeValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(RemoteCircuit),Local<v8::Value>(RemoteCircuitValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(LocalCircuit),Local<v8::Value>(LocalCircuitValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Remark),Local<v8::Value>(RemarkValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndALineAddress),Local<v8::Value>(EndALineAddressValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndAContact),Local<v8::Value>(EndAContactValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndZLineAddress),Local<v8::Value>(EndZLineAddressValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ContactName),Local<v8::Value>(ContactNameValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(StartPortID),Local<v8::Value>(StartPortIDValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(StartJump),Local<v8::Value>(StartJumpValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRspQryNetMemberSDHLineInfoJS->Set(Local<v8::Value>(DataCenterID),Local<v8::Value>(DataCenterIDValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetMemberSDHLineInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetMemberSDHLineInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetMemberSDHLineInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetMemberSDHLineInfoField *pRtnNetMemberSDHLineInfo =(CShfeFtdcRtnNetMemberSDHLineInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetMemberSDHLineInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetMemberSDHLineInfo->ID);
     v8::Local<v8::String> SeqNo=Nan::New<v8::String>("SeqNo").ToLocalChecked();
     v8::Local<v8::Integer> SeqNoValue=Nan::New<v8::Integer>(pRtnNetMemberSDHLineInfo->SeqNo);
     v8::Local<v8::String> MemContractNo=Nan::New<v8::String>("MemContractNo").ToLocalChecked();
     v8::Local<v8::String> MemContractNoValue=Nan::New(pRtnNetMemberSDHLineInfo->MemContractNo).ToLocalChecked();
     v8::Local<v8::String> ApplyPerson=Nan::New<v8::String>("ApplyPerson").ToLocalChecked();
     v8::Local<v8::String> ApplyPersonValue=Nan::New(pRtnNetMemberSDHLineInfo->ApplyPerson).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRtnNetMemberSDHLineInfo->MonthlyRental);
     v8::Local<v8::String> MemberNo=Nan::New<v8::String>("MemberNo").ToLocalChecked();
     v8::Local<v8::String> MemberNoValue=Nan::New(pRtnNetMemberSDHLineInfo->MemberNo).ToLocalChecked();
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRtnNetMemberSDHLineInfo->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> ClientManager=Nan::New<v8::String>("ClientManager").ToLocalChecked();
     v8::Local<v8::String> ClientManagerValue=Nan::New(pRtnNetMemberSDHLineInfo->ClientManager).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRtnNetMemberSDHLineInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> InterfaceType=Nan::New<v8::String>("InterfaceType").ToLocalChecked();
     v8::Local<v8::String> InterfaceTypeValue=Nan::New(pRtnNetMemberSDHLineInfo->InterfaceType).ToLocalChecked();
     v8::Local<v8::String> RemoteCircuit=Nan::New<v8::String>("RemoteCircuit").ToLocalChecked();
     v8::Local<v8::String> RemoteCircuitValue=Nan::New(pRtnNetMemberSDHLineInfo->RemoteCircuit).ToLocalChecked();
     v8::Local<v8::String> LocalCircuit=Nan::New<v8::String>("LocalCircuit").ToLocalChecked();
     v8::Local<v8::String> LocalCircuitValue=Nan::New(pRtnNetMemberSDHLineInfo->LocalCircuit).ToLocalChecked();
     v8::Local<v8::String> Remark=Nan::New<v8::String>("Remark").ToLocalChecked();
     v8::Local<v8::String> RemarkValue=Nan::New(pRtnNetMemberSDHLineInfo->Remark).ToLocalChecked();
     v8::Local<v8::String> EndALineAddress=Nan::New<v8::String>("EndALineAddress").ToLocalChecked();
     v8::Local<v8::String> EndALineAddressValue=Nan::New(pRtnNetMemberSDHLineInfo->EndALineAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContact=Nan::New<v8::String>("EndAContact").ToLocalChecked();
     v8::Local<v8::String> EndAContactValue=Nan::New(pRtnNetMemberSDHLineInfo->EndAContact).ToLocalChecked();
     v8::Local<v8::String> EndZLineAddress=Nan::New<v8::String>("EndZLineAddress").ToLocalChecked();
     v8::Local<v8::String> EndZLineAddressValue=Nan::New(pRtnNetMemberSDHLineInfo->EndZLineAddress).ToLocalChecked();
     v8::Local<v8::String> ContactName=Nan::New<v8::String>("ContactName").ToLocalChecked();
     v8::Local<v8::String> ContactNameValue=Nan::New(pRtnNetMemberSDHLineInfo->ContactName).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRtnNetMemberSDHLineInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRtnNetMemberSDHLineInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetMemberSDHLineInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRtnNetMemberSDHLineInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRtnNetMemberSDHLineInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> StartPortID=Nan::New<v8::String>("StartPortID").ToLocalChecked();
     v8::Local<v8::String> StartPortIDValue=Nan::New(pRtnNetMemberSDHLineInfo->StartPortID).ToLocalChecked();
     v8::Local<v8::String> StartJump=Nan::New<v8::String>("StartJump").ToLocalChecked();
     v8::Local<v8::String> StartJumpValue=Nan::New(pRtnNetMemberSDHLineInfo->StartJump).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRtnNetMemberSDHLineInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> DataCenterID=Nan::New<v8::String>("DataCenterID").ToLocalChecked();
     v8::Local<v8::Integer> DataCenterIDValue=Nan::New<v8::Integer>(pRtnNetMemberSDHLineInfo->DataCenterID);

     v8::Local<v8::Object> pRtnNetMemberSDHLineInfoJS=Nan::New<v8::Object>();
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(SeqNo),Local<v8::Value>(SeqNoValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MemContractNo),Local<v8::Value>(MemContractNoValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ApplyPerson),Local<v8::Value>(ApplyPersonValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MemberNo),Local<v8::Value>(MemberNoValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ClientManager),Local<v8::Value>(ClientManagerValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(InterfaceType),Local<v8::Value>(InterfaceTypeValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(RemoteCircuit),Local<v8::Value>(RemoteCircuitValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(LocalCircuit),Local<v8::Value>(LocalCircuitValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Remark),Local<v8::Value>(RemarkValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndALineAddress),Local<v8::Value>(EndALineAddressValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndAContact),Local<v8::Value>(EndAContactValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(EndZLineAddress),Local<v8::Value>(EndZLineAddressValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(ContactName),Local<v8::Value>(ContactNameValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(StartPortID),Local<v8::Value>(StartPortIDValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(StartJump),Local<v8::Value>(StartJumpValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRtnNetMemberSDHLineInfoJS->Set(Local<v8::Value>(DataCenterID),Local<v8::Value>(DataCenterIDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetMemberSDHLineInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetDDNLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetDDNLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetDDNLinkInfoField *pRspQryNetDDNLinkInfo =(CShfeFtdcRspQryNetDDNLinkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetDDNLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetDDNLinkInfo->ID);
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRspQryNetDDNLinkInfo->ClientName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryNetDDNLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> BusinessUnit=Nan::New<v8::String>("BusinessUnit").ToLocalChecked();
     v8::Local<v8::String> BusinessUnitValue=Nan::New(pRspQryNetDDNLinkInfo->BusinessUnit).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRspQryNetDDNLinkInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> EndAAddress=Nan::New<v8::String>("EndAAddress").ToLocalChecked();
     v8::Local<v8::String> EndAAddressValue=Nan::New(pRspQryNetDDNLinkInfo->EndAAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContactName=Nan::New<v8::String>("EndAContactName").ToLocalChecked();
     v8::Local<v8::String> EndAContactNameValue=Nan::New(pRspQryNetDDNLinkInfo->EndAContactName).ToLocalChecked();
     v8::Local<v8::String> EndZAddress=Nan::New<v8::String>("EndZAddress").ToLocalChecked();
     v8::Local<v8::String> EndZAddressValue=Nan::New(pRspQryNetDDNLinkInfo->EndZAddress).ToLocalChecked();
     v8::Local<v8::String> EndZContactName=Nan::New<v8::String>("EndZContactName").ToLocalChecked();
     v8::Local<v8::String> EndZContactNameValue=Nan::New(pRspQryNetDDNLinkInfo->EndZContactName).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetDDNLinkInfoJS=Nan::New<v8::Object>();
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(BusinessUnit),Local<v8::Value>(BusinessUnitValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(EndAAddress),Local<v8::Value>(EndAAddressValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(EndAContactName),Local<v8::Value>(EndAContactNameValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(EndZAddress),Local<v8::Value>(EndZAddressValue));
     pRspQryNetDDNLinkInfoJS->Set(Local<v8::Value>(EndZContactName),Local<v8::Value>(EndZContactNameValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetDDNLinkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetDDNLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetDDNLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetDDNLinkInfoField *pRtnNetDDNLinkInfo =(CShfeFtdcRtnNetDDNLinkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetDDNLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetDDNLinkInfo->ID);
     v8::Local<v8::String> ClientName=Nan::New<v8::String>("ClientName").ToLocalChecked();
     v8::Local<v8::String> ClientNameValue=Nan::New(pRtnNetDDNLinkInfo->ClientName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnNetDDNLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> BusinessUnit=Nan::New<v8::String>("BusinessUnit").ToLocalChecked();
     v8::Local<v8::String> BusinessUnitValue=Nan::New(pRtnNetDDNLinkInfo->BusinessUnit).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRtnNetDDNLinkInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> EndAAddress=Nan::New<v8::String>("EndAAddress").ToLocalChecked();
     v8::Local<v8::String> EndAAddressValue=Nan::New(pRtnNetDDNLinkInfo->EndAAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContactName=Nan::New<v8::String>("EndAContactName").ToLocalChecked();
     v8::Local<v8::String> EndAContactNameValue=Nan::New(pRtnNetDDNLinkInfo->EndAContactName).ToLocalChecked();
     v8::Local<v8::String> EndZAddress=Nan::New<v8::String>("EndZAddress").ToLocalChecked();
     v8::Local<v8::String> EndZAddressValue=Nan::New(pRtnNetDDNLinkInfo->EndZAddress).ToLocalChecked();
     v8::Local<v8::String> EndZContactName=Nan::New<v8::String>("EndZContactName").ToLocalChecked();
     v8::Local<v8::String> EndZContactNameValue=Nan::New(pRtnNetDDNLinkInfo->EndZContactName).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetDDNLinkInfoJS=Nan::New<v8::Object>();
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(ClientName),Local<v8::Value>(ClientNameValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(BusinessUnit),Local<v8::Value>(BusinessUnitValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(EndAAddress),Local<v8::Value>(EndAAddressValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(EndAContactName),Local<v8::Value>(EndAContactNameValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(EndZAddress),Local<v8::Value>(EndZAddressValue));
     pRtnNetDDNLinkInfoJS->Set(Local<v8::Value>(EndZContactName),Local<v8::Value>(EndZContactNameValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetDDNLinkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPseudMemberLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPseudMemberLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPseudMemberLinkInfoField *pRspQryNetPseudMemberLinkInfo =(CShfeFtdcRspQryNetPseudMemberLinkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPseudMemberLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPseudMemberLinkInfo->ID);
     v8::Local<v8::String> SeqNo=Nan::New<v8::String>("SeqNo").ToLocalChecked();
     v8::Local<v8::Integer> SeqNoValue=Nan::New<v8::Integer>(pRspQryNetPseudMemberLinkInfo->SeqNo);
     v8::Local<v8::String> MemContractNo=Nan::New<v8::String>("MemContractNo").ToLocalChecked();
     v8::Local<v8::String> MemContractNoValue=Nan::New(pRspQryNetPseudMemberLinkInfo->MemContractNo).ToLocalChecked();
     v8::Local<v8::String> LineUsage=Nan::New<v8::String>("LineUsage").ToLocalChecked();
     v8::Local<v8::String> LineUsageValue=Nan::New(pRspQryNetPseudMemberLinkInfo->LineUsage).ToLocalChecked();
     v8::Local<v8::String> LocalCircuit=Nan::New<v8::String>("LocalCircuit").ToLocalChecked();
     v8::Local<v8::String> LocalCircuitValue=Nan::New(pRspQryNetPseudMemberLinkInfo->LocalCircuit).ToLocalChecked();
     v8::Local<v8::String> RemoteCircuit=Nan::New<v8::String>("RemoteCircuit").ToLocalChecked();
     v8::Local<v8::String> RemoteCircuitValue=Nan::New(pRspQryNetPseudMemberLinkInfo->RemoteCircuit).ToLocalChecked();
     v8::Local<v8::String> BusinessUnit=Nan::New<v8::String>("BusinessUnit").ToLocalChecked();
     v8::Local<v8::String> BusinessUnitValue=Nan::New(pRspQryNetPseudMemberLinkInfo->BusinessUnit).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRspQryNetPseudMemberLinkInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> ApplyPerson=Nan::New<v8::String>("ApplyPerson").ToLocalChecked();
     v8::Local<v8::String> ApplyPersonValue=Nan::New(pRspQryNetPseudMemberLinkInfo->ApplyPerson).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRspQryNetPseudMemberLinkInfo->MonthlyRental);
     v8::Local<v8::String> EndAAddress=Nan::New<v8::String>("EndAAddress").ToLocalChecked();
     v8::Local<v8::String> EndAAddressValue=Nan::New(pRspQryNetPseudMemberLinkInfo->EndAAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContactName=Nan::New<v8::String>("EndAContactName").ToLocalChecked();
     v8::Local<v8::String> EndAContactNameValue=Nan::New(pRspQryNetPseudMemberLinkInfo->EndAContactName).ToLocalChecked();
     v8::Local<v8::String> EndZAddress=Nan::New<v8::String>("EndZAddress").ToLocalChecked();
     v8::Local<v8::String> EndZAddressValue=Nan::New(pRspQryNetPseudMemberLinkInfo->EndZAddress).ToLocalChecked();
     v8::Local<v8::String> EndZContactName=Nan::New<v8::String>("EndZContactName").ToLocalChecked();
     v8::Local<v8::String> EndZContactNameValue=Nan::New(pRspQryNetPseudMemberLinkInfo->EndZContactName).ToLocalChecked();
     v8::Local<v8::String> Telephone=Nan::New<v8::String>("Telephone").ToLocalChecked();
     v8::Local<v8::String> TelephoneValue=Nan::New(pRspQryNetPseudMemberLinkInfo->Telephone).ToLocalChecked();
     v8::Local<v8::String> LineInfo=Nan::New<v8::String>("LineInfo").ToLocalChecked();
     v8::Local<v8::String> LineInfoValue=Nan::New(pRspQryNetPseudMemberLinkInfo->LineInfo).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetPseudMemberLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPseudMemberLinkInfoJS=Nan::New<v8::Object>();
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(SeqNo),Local<v8::Value>(SeqNoValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(MemContractNo),Local<v8::Value>(MemContractNoValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LineUsage),Local<v8::Value>(LineUsageValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LocalCircuit),Local<v8::Value>(LocalCircuitValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(RemoteCircuit),Local<v8::Value>(RemoteCircuitValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(BusinessUnit),Local<v8::Value>(BusinessUnitValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(ApplyPerson),Local<v8::Value>(ApplyPersonValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndAAddress),Local<v8::Value>(EndAAddressValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndAContactName),Local<v8::Value>(EndAContactNameValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndZAddress),Local<v8::Value>(EndZAddressValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndZContactName),Local<v8::Value>(EndZContactNameValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(Telephone),Local<v8::Value>(TelephoneValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LineInfo),Local<v8::Value>(LineInfoValue));
     pRspQryNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPseudMemberLinkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPseudMemberLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPseudMemberLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPseudMemberLinkInfoField *pRtnNetPseudMemberLinkInfo =(CShfeFtdcRtnNetPseudMemberLinkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPseudMemberLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPseudMemberLinkInfo->ID);
     v8::Local<v8::String> SeqNo=Nan::New<v8::String>("SeqNo").ToLocalChecked();
     v8::Local<v8::Integer> SeqNoValue=Nan::New<v8::Integer>(pRtnNetPseudMemberLinkInfo->SeqNo);
     v8::Local<v8::String> MemContractNo=Nan::New<v8::String>("MemContractNo").ToLocalChecked();
     v8::Local<v8::String> MemContractNoValue=Nan::New(pRtnNetPseudMemberLinkInfo->MemContractNo).ToLocalChecked();
     v8::Local<v8::String> LineUsage=Nan::New<v8::String>("LineUsage").ToLocalChecked();
     v8::Local<v8::String> LineUsageValue=Nan::New(pRtnNetPseudMemberLinkInfo->LineUsage).ToLocalChecked();
     v8::Local<v8::String> LocalCircuit=Nan::New<v8::String>("LocalCircuit").ToLocalChecked();
     v8::Local<v8::String> LocalCircuitValue=Nan::New(pRtnNetPseudMemberLinkInfo->LocalCircuit).ToLocalChecked();
     v8::Local<v8::String> RemoteCircuit=Nan::New<v8::String>("RemoteCircuit").ToLocalChecked();
     v8::Local<v8::String> RemoteCircuitValue=Nan::New(pRtnNetPseudMemberLinkInfo->RemoteCircuit).ToLocalChecked();
     v8::Local<v8::String> BusinessUnit=Nan::New<v8::String>("BusinessUnit").ToLocalChecked();
     v8::Local<v8::String> BusinessUnitValue=Nan::New(pRtnNetPseudMemberLinkInfo->BusinessUnit).ToLocalChecked();
     v8::Local<v8::String> Bandwidth=Nan::New<v8::String>("Bandwidth").ToLocalChecked();
     v8::Local<v8::String> BandwidthValue=Nan::New(pRtnNetPseudMemberLinkInfo->Bandwidth).ToLocalChecked();
     v8::Local<v8::String> ApplyPerson=Nan::New<v8::String>("ApplyPerson").ToLocalChecked();
     v8::Local<v8::String> ApplyPersonValue=Nan::New(pRtnNetPseudMemberLinkInfo->ApplyPerson).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRtnNetPseudMemberLinkInfo->MonthlyRental);
     v8::Local<v8::String> EndAAddress=Nan::New<v8::String>("EndAAddress").ToLocalChecked();
     v8::Local<v8::String> EndAAddressValue=Nan::New(pRtnNetPseudMemberLinkInfo->EndAAddress).ToLocalChecked();
     v8::Local<v8::String> EndAContactName=Nan::New<v8::String>("EndAContactName").ToLocalChecked();
     v8::Local<v8::String> EndAContactNameValue=Nan::New(pRtnNetPseudMemberLinkInfo->EndAContactName).ToLocalChecked();
     v8::Local<v8::String> EndZAddress=Nan::New<v8::String>("EndZAddress").ToLocalChecked();
     v8::Local<v8::String> EndZAddressValue=Nan::New(pRtnNetPseudMemberLinkInfo->EndZAddress).ToLocalChecked();
     v8::Local<v8::String> EndZContactName=Nan::New<v8::String>("EndZContactName").ToLocalChecked();
     v8::Local<v8::String> EndZContactNameValue=Nan::New(pRtnNetPseudMemberLinkInfo->EndZContactName).ToLocalChecked();
     v8::Local<v8::String> Telephone=Nan::New<v8::String>("Telephone").ToLocalChecked();
     v8::Local<v8::String> TelephoneValue=Nan::New(pRtnNetPseudMemberLinkInfo->Telephone).ToLocalChecked();
     v8::Local<v8::String> LineInfo=Nan::New<v8::String>("LineInfo").ToLocalChecked();
     v8::Local<v8::String> LineInfoValue=Nan::New(pRtnNetPseudMemberLinkInfo->LineInfo).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetPseudMemberLinkInfo->IPADDR).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPseudMemberLinkInfoJS=Nan::New<v8::Object>();
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(SeqNo),Local<v8::Value>(SeqNoValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(MemContractNo),Local<v8::Value>(MemContractNoValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LineUsage),Local<v8::Value>(LineUsageValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LocalCircuit),Local<v8::Value>(LocalCircuitValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(RemoteCircuit),Local<v8::Value>(RemoteCircuitValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(BusinessUnit),Local<v8::Value>(BusinessUnitValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(Bandwidth),Local<v8::Value>(BandwidthValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(ApplyPerson),Local<v8::Value>(ApplyPersonValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndAAddress),Local<v8::Value>(EndAAddressValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndAContactName),Local<v8::Value>(EndAContactNameValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndZAddress),Local<v8::Value>(EndZAddressValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(EndZContactName),Local<v8::Value>(EndZContactNameValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(Telephone),Local<v8::Value>(TelephoneValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(LineInfo),Local<v8::Value>(LineInfoValue));
     pRtnNetPseudMemberLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPseudMemberLinkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryOuterDeviceInfTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryOuterDeviceInfTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryOuterDeviceInfField *pRspQryOuterDeviceInf =(CShfeFtdcRspQryOuterDeviceInfField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryOuterDeviceInf->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryOuterDeviceInf->ID);
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryOuterDeviceInf->IPADDR).ToLocalChecked();
     v8::Local<v8::String> NAME=Nan::New<v8::String>("NAME").ToLocalChecked();
     v8::Local<v8::String> NAMEValue=Nan::New(pRspQryOuterDeviceInf->NAME).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRspQryOuterDeviceInf->memo).ToLocalChecked();
     v8::Local<v8::Object> pRspQryOuterDeviceInfJS=Nan::New<v8::Object>();
     pRspQryOuterDeviceInfJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryOuterDeviceInfJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryOuterDeviceInfJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryOuterDeviceInfJS->Set(Local<v8::Value>(NAME),Local<v8::Value>(NAMEValue));
     pRspQryOuterDeviceInfJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryOuterDeviceInfJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetOuterDeviceInfTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetOuterDeviceInfTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetOuterDeviceInfField *pRtnNetOuterDeviceInf =(CShfeFtdcRtnNetOuterDeviceInfField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetOuterDeviceInf->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetOuterDeviceInf->ID);
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetOuterDeviceInf->IPADDR).ToLocalChecked();
     v8::Local<v8::String> NAME=Nan::New<v8::String>("NAME").ToLocalChecked();
     v8::Local<v8::String> NAMEValue=Nan::New(pRtnNetOuterDeviceInf->NAME).ToLocalChecked();
     v8::Local<v8::String> memo=Nan::New<v8::String>("memo").ToLocalChecked();
     v8::Local<v8::String> memoValue=Nan::New(pRtnNetOuterDeviceInf->memo).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetOuterDeviceInfJS=Nan::New<v8::Object>();
     pRtnNetOuterDeviceInfJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetOuterDeviceInfJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetOuterDeviceInfJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetOuterDeviceInfJS->Set(Local<v8::Value>(NAME),Local<v8::Value>(NAMEValue));
     pRtnNetOuterDeviceInfJS->Set(Local<v8::Value>(memo),Local<v8::Value>(memoValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetOuterDeviceInfJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetLocalPingResultInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetLocalPingResultInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetLocalPingResultInfoField *pRspQryNetLocalPingResultInfo =(CShfeFtdcRspQryNetLocalPingResultInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetLocalPingResultInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetLocalPingResultInfo->ID);
     v8::Local<v8::String> SouIPADDR=Nan::New<v8::String>("SouIPADDR").ToLocalChecked();
     v8::Local<v8::String> SouIPADDRValue=Nan::New(pRspQryNetLocalPingResultInfo->SouIPADDR).ToLocalChecked();
     v8::Local<v8::String> SouNAME=Nan::New<v8::String>("SouNAME").ToLocalChecked();
     v8::Local<v8::String> SouNAMEValue=Nan::New(pRspQryNetLocalPingResultInfo->SouNAME).ToLocalChecked();
     v8::Local<v8::String> TarIPADDR=Nan::New<v8::String>("TarIPADDR").ToLocalChecked();
     v8::Local<v8::String> TarIPADDRValue=Nan::New(pRspQryNetLocalPingResultInfo->TarIPADDR).ToLocalChecked();
     v8::Local<v8::String> TarNAME=Nan::New<v8::String>("TarNAME").ToLocalChecked();
     v8::Local<v8::String> TarNAMEValue=Nan::New(pRspQryNetLocalPingResultInfo->TarNAME).ToLocalChecked();
     v8::Local<v8::String> PDateSta=Nan::New<v8::String>("PDateSta").ToLocalChecked();
     v8::Local<v8::String> PDateStaValue=Nan::New(pRspQryNetLocalPingResultInfo->PDateSta).ToLocalChecked();
     v8::Local<v8::String> PTimeSta=Nan::New<v8::String>("PTimeSta").ToLocalChecked();
     v8::Local<v8::String> PTimeStaValue=Nan::New(pRspQryNetLocalPingResultInfo->PTimeSta).ToLocalChecked();
     v8::Local<v8::String> ConnRate=Nan::New<v8::String>("ConnRate").ToLocalChecked();
     v8::Local<v8::Integer> ConnRateValue=Nan::New<v8::Integer>(pRspQryNetLocalPingResultInfo->ConnRate);
     v8::Local<v8::Object> pRspQryNetLocalPingResultInfoJS=Nan::New<v8::Object>();
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(SouIPADDR),Local<v8::Value>(SouIPADDRValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(SouNAME),Local<v8::Value>(SouNAMEValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(TarIPADDR),Local<v8::Value>(TarIPADDRValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(TarNAME),Local<v8::Value>(TarNAMEValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(PDateSta),Local<v8::Value>(PDateStaValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(PTimeSta),Local<v8::Value>(PTimeStaValue));
     pRspQryNetLocalPingResultInfoJS->Set(Local<v8::Value>(ConnRate),Local<v8::Value>(ConnRateValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetLocalPingResultInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetLocalPingResultInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetLocalPingResultInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetLocalPingResultInfoField *pRtnNetLocalPingResultInfo =(CShfeFtdcRtnNetLocalPingResultInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetLocalPingResultInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetLocalPingResultInfo->ID);
     v8::Local<v8::String> SouIPADDR=Nan::New<v8::String>("SouIPADDR").ToLocalChecked();
     v8::Local<v8::String> SouIPADDRValue=Nan::New(pRtnNetLocalPingResultInfo->SouIPADDR).ToLocalChecked();
     v8::Local<v8::String> SouNAME=Nan::New<v8::String>("SouNAME").ToLocalChecked();
     v8::Local<v8::String> SouNAMEValue=Nan::New(pRtnNetLocalPingResultInfo->SouNAME).ToLocalChecked();
     v8::Local<v8::String> TarIPADDR=Nan::New<v8::String>("TarIPADDR").ToLocalChecked();
     v8::Local<v8::String> TarIPADDRValue=Nan::New(pRtnNetLocalPingResultInfo->TarIPADDR).ToLocalChecked();
     v8::Local<v8::String> TarNAME=Nan::New<v8::String>("TarNAME").ToLocalChecked();
     v8::Local<v8::String> TarNAMEValue=Nan::New(pRtnNetLocalPingResultInfo->TarNAME).ToLocalChecked();
     v8::Local<v8::String> PDateSta=Nan::New<v8::String>("PDateSta").ToLocalChecked();
     v8::Local<v8::String> PDateStaValue=Nan::New(pRtnNetLocalPingResultInfo->PDateSta).ToLocalChecked();
     v8::Local<v8::String> PTimeSta=Nan::New<v8::String>("PTimeSta").ToLocalChecked();
     v8::Local<v8::String> PTimeStaValue=Nan::New(pRtnNetLocalPingResultInfo->PTimeSta).ToLocalChecked();
     v8::Local<v8::String> ConnRate=Nan::New<v8::String>("ConnRate").ToLocalChecked();
     v8::Local<v8::Integer> ConnRateValue=Nan::New<v8::Integer>(pRtnNetLocalPingResultInfo->ConnRate);

     v8::Local<v8::Object> pRtnNetLocalPingResultInfoJS=Nan::New<v8::Object>();
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(SouIPADDR),Local<v8::Value>(SouIPADDRValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(SouNAME),Local<v8::Value>(SouNAMEValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(TarIPADDR),Local<v8::Value>(TarIPADDRValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(TarNAME),Local<v8::Value>(TarNAMEValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(PDateSta),Local<v8::Value>(PDateStaValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(PTimeSta),Local<v8::Value>(PTimeStaValue));
     pRtnNetLocalPingResultInfoJS->Set(Local<v8::Value>(ConnRate),Local<v8::Value>(ConnRateValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetLocalPingResultInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetRomotePingResultInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetRomotePingResultInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetRomotePingResultInfoField *pRspQryNetRomotePingResultInfo =(CShfeFtdcRspQryNetRomotePingResultInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetRomotePingResultInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetRomotePingResultInfo->ID);
     v8::Local<v8::String> SouIPADDR=Nan::New<v8::String>("SouIPADDR").ToLocalChecked();
     v8::Local<v8::String> SouIPADDRValue=Nan::New(pRspQryNetRomotePingResultInfo->SouIPADDR).ToLocalChecked();
     v8::Local<v8::String> SouNAME=Nan::New<v8::String>("SouNAME").ToLocalChecked();
     v8::Local<v8::String> SouNAMEValue=Nan::New(pRspQryNetRomotePingResultInfo->SouNAME).ToLocalChecked();
     v8::Local<v8::String> TarIPADDR=Nan::New<v8::String>("TarIPADDR").ToLocalChecked();
     v8::Local<v8::String> TarIPADDRValue=Nan::New(pRspQryNetRomotePingResultInfo->TarIPADDR).ToLocalChecked();
     v8::Local<v8::String> TarNAME=Nan::New<v8::String>("TarNAME").ToLocalChecked();
     v8::Local<v8::String> TarNAMEValue=Nan::New(pRspQryNetRomotePingResultInfo->TarNAME).ToLocalChecked();
     v8::Local<v8::String> PDateSta=Nan::New<v8::String>("PDateSta").ToLocalChecked();
     v8::Local<v8::String> PDateStaValue=Nan::New(pRspQryNetRomotePingResultInfo->PDateSta).ToLocalChecked();
     v8::Local<v8::String> PTimeSta=Nan::New<v8::String>("PTimeSta").ToLocalChecked();
     v8::Local<v8::String> PTimeStaValue=Nan::New(pRspQryNetRomotePingResultInfo->PTimeSta).ToLocalChecked();
     v8::Local<v8::String> ConnRate=Nan::New<v8::String>("ConnRate").ToLocalChecked();
     v8::Local<v8::Integer> ConnRateValue=Nan::New<v8::Integer>(pRspQryNetRomotePingResultInfo->ConnRate);
     v8::Local<v8::String> TimeDlyMin=Nan::New<v8::String>("TimeDlyMin").ToLocalChecked();
     v8::Local<v8::String> TimeDlyMinValue=Nan::New(pRspQryNetRomotePingResultInfo->TimeDlyMin).ToLocalChecked();
     v8::Local<v8::String> TimeDlyMax=Nan::New<v8::String>("TimeDlyMax").ToLocalChecked();
     v8::Local<v8::String> TimeDlyMaxValue=Nan::New(pRspQryNetRomotePingResultInfo->TimeDlyMax).ToLocalChecked();
     v8::Local<v8::String> TimeDlyAvg=Nan::New<v8::String>("TimeDlyAvg").ToLocalChecked();
     v8::Local<v8::String> TimeDlyAvgValue=Nan::New(pRspQryNetRomotePingResultInfo->TimeDlyAvg).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetRomotePingResultInfoJS=Nan::New<v8::Object>();
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(SouIPADDR),Local<v8::Value>(SouIPADDRValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(SouNAME),Local<v8::Value>(SouNAMEValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(TarIPADDR),Local<v8::Value>(TarIPADDRValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(TarNAME),Local<v8::Value>(TarNAMEValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(PDateSta),Local<v8::Value>(PDateStaValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(PTimeSta),Local<v8::Value>(PTimeStaValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(ConnRate),Local<v8::Value>(ConnRateValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyMin),Local<v8::Value>(TimeDlyMinValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyMax),Local<v8::Value>(TimeDlyMaxValue));
     pRspQryNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyAvg),Local<v8::Value>(TimeDlyAvgValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetRomotePingResultInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetRomotePingResultInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetRomotePingResultInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetRomotePingResultInfoField *pRtnNetRomotePingResultInfo =(CShfeFtdcRtnNetRomotePingResultInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetRomotePingResultInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetRomotePingResultInfo->ID);
     v8::Local<v8::String> SouIPADDR=Nan::New<v8::String>("SouIPADDR").ToLocalChecked();
     v8::Local<v8::String> SouIPADDRValue=Nan::New(pRtnNetRomotePingResultInfo->SouIPADDR).ToLocalChecked();
     v8::Local<v8::String> SouNAME=Nan::New<v8::String>("SouNAME").ToLocalChecked();
     v8::Local<v8::String> SouNAMEValue=Nan::New(pRtnNetRomotePingResultInfo->SouNAME).ToLocalChecked();
     v8::Local<v8::String> TarIPADDR=Nan::New<v8::String>("TarIPADDR").ToLocalChecked();
     v8::Local<v8::String> TarIPADDRValue=Nan::New(pRtnNetRomotePingResultInfo->TarIPADDR).ToLocalChecked();
     v8::Local<v8::String> TarNAME=Nan::New<v8::String>("TarNAME").ToLocalChecked();
     v8::Local<v8::String> TarNAMEValue=Nan::New(pRtnNetRomotePingResultInfo->TarNAME).ToLocalChecked();
     v8::Local<v8::String> PDateSta=Nan::New<v8::String>("PDateSta").ToLocalChecked();
     v8::Local<v8::String> PDateStaValue=Nan::New(pRtnNetRomotePingResultInfo->PDateSta).ToLocalChecked();
     v8::Local<v8::String> PTimeSta=Nan::New<v8::String>("PTimeSta").ToLocalChecked();
     v8::Local<v8::String> PTimeStaValue=Nan::New(pRtnNetRomotePingResultInfo->PTimeSta).ToLocalChecked();
     v8::Local<v8::String> ConnRate=Nan::New<v8::String>("ConnRate").ToLocalChecked();
     v8::Local<v8::Integer> ConnRateValue=Nan::New<v8::Integer>(pRtnNetRomotePingResultInfo->ConnRate);
     v8::Local<v8::String> TimeDlyMin=Nan::New<v8::String>("TimeDlyMin").ToLocalChecked();
     v8::Local<v8::String> TimeDlyMinValue=Nan::New(pRtnNetRomotePingResultInfo->TimeDlyMin).ToLocalChecked();
     v8::Local<v8::String> TimeDlyMax=Nan::New<v8::String>("TimeDlyMax").ToLocalChecked();
     v8::Local<v8::String> TimeDlyMaxValue=Nan::New(pRtnNetRomotePingResultInfo->TimeDlyMax).ToLocalChecked();
     v8::Local<v8::String> TimeDlyAvg=Nan::New<v8::String>("TimeDlyAvg").ToLocalChecked();
     v8::Local<v8::String> TimeDlyAvgValue=Nan::New(pRtnNetRomotePingResultInfo->TimeDlyAvg).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetRomotePingResultInfoJS=Nan::New<v8::Object>();
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(SouIPADDR),Local<v8::Value>(SouIPADDRValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(SouNAME),Local<v8::Value>(SouNAMEValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(TarIPADDR),Local<v8::Value>(TarIPADDRValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(TarNAME),Local<v8::Value>(TarNAMEValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(PDateSta),Local<v8::Value>(PDateStaValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(PTimeSta),Local<v8::Value>(PTimeStaValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(ConnRate),Local<v8::Value>(ConnRateValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyMin),Local<v8::Value>(TimeDlyMinValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyMax),Local<v8::Value>(TimeDlyMaxValue));
     pRtnNetRomotePingResultInfoJS->Set(Local<v8::Value>(TimeDlyAvg),Local<v8::Value>(TimeDlyAvgValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetRomotePingResultInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRtnMonitorTopProcessInfo(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMonitorTopProcessInfo").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMonitorTopProcessInfoField *pRtnMonitorTopProcessInfo =(CShfeFtdcRtnMonitorTopProcessInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> HostName=Nan::New<v8::String>("HostName").ToLocalChecked();
     v8::Local<v8::String> HostNameValue=Nan::New(pRtnMonitorTopProcessInfo->HostName).ToLocalChecked();
     v8::Local<v8::String> MonDate=Nan::New<v8::String>("MonDate").ToLocalChecked();
     v8::Local<v8::String> MonDateValue=Nan::New(pRtnMonitorTopProcessInfo->MonDate).ToLocalChecked();
     v8::Local<v8::String> MonTime=Nan::New<v8::String>("MonTime").ToLocalChecked();
     v8::Local<v8::String> MonTimeValue=Nan::New(pRtnMonitorTopProcessInfo->MonTime).ToLocalChecked();
     v8::Local<v8::String> CPU=Nan::New<v8::String>("CPU").ToLocalChecked();
     v8::Local<v8::String> CPUValue=Nan::New(pRtnMonitorTopProcessInfo->CPU).ToLocalChecked();
     v8::Local<v8::String> TTY=Nan::New<v8::String>("TTY").ToLocalChecked();
     v8::Local<v8::String> TTYValue=Nan::New(pRtnMonitorTopProcessInfo->TTY).ToLocalChecked();
     v8::Local<v8::String> PID=Nan::New<v8::String>("PID").ToLocalChecked();
     v8::Local<v8::Integer> PIDValue=Nan::New<v8::Integer>(pRtnMonitorTopProcessInfo->PID);
     v8::Local<v8::String> USERNAME=Nan::New<v8::String>("USERNAME").ToLocalChecked();
     v8::Local<v8::String> USERNAMEValue=Nan::New(pRtnMonitorTopProcessInfo->USERNAME).ToLocalChecked();
     v8::Local<v8::String> PRI=Nan::New<v8::String>("PRI").ToLocalChecked();
     v8::Local<v8::Integer> PRIValue=Nan::New<v8::Integer>(pRtnMonitorTopProcessInfo->PRI);
     v8::Local<v8::String> NI=Nan::New<v8::String>("NI").ToLocalChecked();
     v8::Local<v8::Integer> NIValue=Nan::New<v8::Integer>(pRtnMonitorTopProcessInfo->NI);
     v8::Local<v8::String> SSIZE=Nan::New<v8::String>("SSIZE").ToLocalChecked();
     v8::Local<v8::Integer> SSIZEValue=Nan::New<v8::Integer>(pRtnMonitorTopProcessInfo->SSIZE);
     v8::Local<v8::String> RES=Nan::New<v8::String>("RES").ToLocalChecked();
     v8::Local<v8::Integer> RESValue=Nan::New<v8::Integer>(pRtnMonitorTopProcessInfo->RES);
     v8::Local<v8::String> STATE=Nan::New<v8::String>("STATE").ToLocalChecked();
     v8::Local<v8::String> STATEValue=Nan::New(pRtnMonitorTopProcessInfo->STATE).ToLocalChecked();
     v8::Local<v8::String> STIME=Nan::New<v8::String>("STIME").ToLocalChecked();
     v8::Local<v8::String> STIMEValue=Nan::New(pRtnMonitorTopProcessInfo->STIME).ToLocalChecked();
     v8::Local<v8::String> pWCPU=Nan::New<v8::String>("pWCPU").ToLocalChecked();
     v8::Local<v8::Number> pWCPUValue=Nan::New<v8::Number>(pRtnMonitorTopProcessInfo->pWCPU);
     v8::Local<v8::String> pCPU=Nan::New<v8::String>("pCPU").ToLocalChecked();
     v8::Local<v8::Number> pCPUValue=Nan::New<v8::Number>(pRtnMonitorTopProcessInfo->pCPU);
     v8::Local<v8::String> COMMAND=Nan::New<v8::String>("COMMAND").ToLocalChecked();
     v8::Local<v8::String> COMMANDValue=Nan::New(pRtnMonitorTopProcessInfo->COMMAND).ToLocalChecked();

     v8::Local<v8::Object> pRtnMonitorTopProcessInfoJS=Nan::New<v8::Object>();
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(HostName),Local<v8::Value>(HostNameValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(MonDate),Local<v8::Value>(MonDateValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(MonTime),Local<v8::Value>(MonTimeValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(CPU),Local<v8::Value>(CPUValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(TTY),Local<v8::Value>(TTYValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(PID),Local<v8::Value>(PIDValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(USERNAME),Local<v8::Value>(USERNAMEValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(PRI),Local<v8::Value>(PRIValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(NI),Local<v8::Value>(NIValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(SSIZE),Local<v8::Value>(SSIZEValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(RES),Local<v8::Value>(RESValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(STATE),Local<v8::Value>(STATEValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(STIME),Local<v8::Value>(STIMEValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(pWCPU),Local<v8::Value>(pWCPUValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(pCPU),Local<v8::Value>(pCPUValue));
     pRtnMonitorTopProcessInfoJS->Set(Local<v8::Value>(COMMAND),Local<v8::Value>(COMMANDValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMonitorTopProcessInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQrySysInternalTopologyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQrySysInternalTopologyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQrySysInternalTopologyField *pRspQrySysInternalTopology =(CShfeFtdcRspQrySysInternalTopologyField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> InfoType=Nan::New<v8::String>("InfoType").ToLocalChecked();
     v8::Local<v8::String> InfoTypeValue=Nan::New(pRspQrySysInternalTopology->InfoType).ToLocalChecked();
     v8::Local<v8::String> Node1_ID=Nan::New<v8::String>("Node1_ID").ToLocalChecked();
     v8::Local<v8::String> Node1_IDValue=Nan::New(pRspQrySysInternalTopology->Node1_ID).ToLocalChecked();
     v8::Local<v8::String> Node1_Info=Nan::New<v8::String>("Node1_Info").ToLocalChecked();
     v8::Local<v8::String> Node1_InfoValue=Nan::New(pRspQrySysInternalTopology->Node1_Info).ToLocalChecked();
     v8::Local<v8::String> LinkInfo=Nan::New<v8::String>("LinkInfo").ToLocalChecked();
     v8::Local<v8::String> LinkInfoValue=Nan::New(pRspQrySysInternalTopology->LinkInfo).ToLocalChecked();
     v8::Local<v8::String> LinkState=Nan::New<v8::String>("LinkState").ToLocalChecked();
     v8::Local<v8::String> LinkStateValue=Nan::New(pRspQrySysInternalTopology->LinkState).ToLocalChecked();
     v8::Local<v8::String> Node2_ID=Nan::New<v8::String>("Node2_ID").ToLocalChecked();
     v8::Local<v8::String> Node2_IDValue=Nan::New(pRspQrySysInternalTopology->Node2_ID).ToLocalChecked();
     v8::Local<v8::String> Node2_Info=Nan::New<v8::String>("Node2_Info").ToLocalChecked();
     v8::Local<v8::String> Node2_InfoValue=Nan::New(pRspQrySysInternalTopology->Node2_Info).ToLocalChecked();
     v8::Local<v8::Object> pRspQrySysInternalTopologyJS=Nan::New<v8::Object>();
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(InfoType),Local<v8::Value>(InfoTypeValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(Node1_ID),Local<v8::Value>(Node1_IDValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(Node1_Info),Local<v8::Value>(Node1_InfoValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(LinkInfo),Local<v8::Value>(LinkInfoValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(LinkState),Local<v8::Value>(LinkStateValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(Node2_ID),Local<v8::Value>(Node2_IDValue));
     pRspQrySysInternalTopologyJS->Set(Local<v8::Value>(Node2_Info),Local<v8::Value>(Node2_InfoValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQrySysInternalTopologyJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnSysInternalTopologyTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnSysInternalTopologyTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnSysInternalTopologyField *pRtnSysInternalTopology =(CShfeFtdcRtnSysInternalTopologyField *)(paramArrayNew[0]);

     v8::Local<v8::String> InfoType=Nan::New<v8::String>("InfoType").ToLocalChecked();
     v8::Local<v8::String> InfoTypeValue=Nan::New(pRtnSysInternalTopology->InfoType).ToLocalChecked();
     v8::Local<v8::String> Node1_ID=Nan::New<v8::String>("Node1_ID").ToLocalChecked();
     v8::Local<v8::String> Node1_IDValue=Nan::New(pRtnSysInternalTopology->Node1_ID).ToLocalChecked();
     v8::Local<v8::String> Node1_Info=Nan::New<v8::String>("Node1_Info").ToLocalChecked();
     v8::Local<v8::String> Node1_InfoValue=Nan::New(pRtnSysInternalTopology->Node1_Info).ToLocalChecked();
     v8::Local<v8::String> LinkInfo=Nan::New<v8::String>("LinkInfo").ToLocalChecked();
     v8::Local<v8::String> LinkInfoValue=Nan::New(pRtnSysInternalTopology->LinkInfo).ToLocalChecked();
     v8::Local<v8::String> LinkState=Nan::New<v8::String>("LinkState").ToLocalChecked();
     v8::Local<v8::String> LinkStateValue=Nan::New(pRtnSysInternalTopology->LinkState).ToLocalChecked();
     v8::Local<v8::String> Node2_ID=Nan::New<v8::String>("Node2_ID").ToLocalChecked();
     v8::Local<v8::String> Node2_IDValue=Nan::New(pRtnSysInternalTopology->Node2_ID).ToLocalChecked();
     v8::Local<v8::String> Node2_Info=Nan::New<v8::String>("Node2_Info").ToLocalChecked();
     v8::Local<v8::String> Node2_InfoValue=Nan::New(pRtnSysInternalTopology->Node2_Info).ToLocalChecked();

     v8::Local<v8::Object> pRtnSysInternalTopologyJS=Nan::New<v8::Object>();
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(InfoType),Local<v8::Value>(InfoTypeValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(Node1_ID),Local<v8::Value>(Node1_IDValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(Node1_Info),Local<v8::Value>(Node1_InfoValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(LinkInfo),Local<v8::Value>(LinkInfoValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(LinkState),Local<v8::Value>(LinkStateValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(Node2_ID),Local<v8::Value>(Node2_IDValue));
     pRtnSysInternalTopologyJS->Set(Local<v8::Value>(Node2_Info),Local<v8::Value>(Node2_InfoValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnSysInternalTopologyJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryMemberLinkCostTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryMemberLinkCostTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryMemberLinkCostField *pRspQryMemberLinkCost =(CShfeFtdcRspQryMemberLinkCostField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryMemberLinkCost->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryMemberLinkCost->ID);
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRspQryMemberLinkCost->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryMemberLinkCost->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> ServiceProvider=Nan::New<v8::String>("ServiceProvider").ToLocalChecked();
     v8::Local<v8::String> ServiceProviderValue=Nan::New(pRspQryMemberLinkCost->ServiceProvider).ToLocalChecked();
     v8::Local<v8::String> Pay_Date=Nan::New<v8::String>("Pay_Date").ToLocalChecked();
     v8::Local<v8::String> Pay_DateValue=Nan::New(pRspQryMemberLinkCost->Pay_Date).ToLocalChecked();
     v8::Local<v8::String> B_Pay_Date=Nan::New<v8::String>("B_Pay_Date").ToLocalChecked();
     v8::Local<v8::String> B_Pay_DateValue=Nan::New(pRspQryMemberLinkCost->B_Pay_Date).ToLocalChecked();
     v8::Local<v8::String> D_Pay_Date=Nan::New<v8::String>("D_Pay_Date").ToLocalChecked();
     v8::Local<v8::String> D_Pay_DateValue=Nan::New(pRspQryMemberLinkCost->D_Pay_Date).ToLocalChecked();
     v8::Local<v8::String> Charge=Nan::New<v8::String>("Charge").ToLocalChecked();
     v8::Local<v8::Integer> ChargeValue=Nan::New<v8::Integer>(pRspQryMemberLinkCost->Charge);
     v8::Local<v8::String> Fee_Type=Nan::New<v8::String>("Fee_Type").ToLocalChecked();
     v8::Local<v8::String> Fee_TypeValue=Nan::New(pRspQryMemberLinkCost->Fee_Type).ToLocalChecked();
     v8::Local<v8::String> Pro=Nan::New<v8::String>("Pro").ToLocalChecked();
     v8::Local<v8::String> ProValue=Nan::New(pRspQryMemberLinkCost->Pro).ToLocalChecked();
     v8::Local<v8::Object> pRspQryMemberLinkCostJS=Nan::New<v8::Object>();
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(ServiceProvider),Local<v8::Value>(ServiceProviderValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(Pay_Date),Local<v8::Value>(Pay_DateValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(B_Pay_Date),Local<v8::Value>(B_Pay_DateValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(D_Pay_Date),Local<v8::Value>(D_Pay_DateValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(Charge),Local<v8::Value>(ChargeValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(Fee_Type),Local<v8::Value>(Fee_TypeValue));
     pRspQryMemberLinkCostJS->Set(Local<v8::Value>(Pro),Local<v8::Value>(ProValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryMemberLinkCostJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnMemberLinkCostTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnMemberLinkCostTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnMemberLinkCostField *pRtnMemberLinkCost =(CShfeFtdcRtnMemberLinkCostField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnMemberLinkCost->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnMemberLinkCost->ID);
     v8::Local<v8::String> ParticipantName=Nan::New<v8::String>("ParticipantName").ToLocalChecked();
     v8::Local<v8::String> ParticipantNameValue=Nan::New(pRtnMemberLinkCost->ParticipantName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnMemberLinkCost->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> ServiceProvider=Nan::New<v8::String>("ServiceProvider").ToLocalChecked();
     v8::Local<v8::String> ServiceProviderValue=Nan::New(pRtnMemberLinkCost->ServiceProvider).ToLocalChecked();
     v8::Local<v8::String> Pay_Date=Nan::New<v8::String>("Pay_Date").ToLocalChecked();
     v8::Local<v8::String> Pay_DateValue=Nan::New(pRtnMemberLinkCost->Pay_Date).ToLocalChecked();
     v8::Local<v8::String> B_Pay_Date=Nan::New<v8::String>("B_Pay_Date").ToLocalChecked();
     v8::Local<v8::String> B_Pay_DateValue=Nan::New(pRtnMemberLinkCost->B_Pay_Date).ToLocalChecked();
     v8::Local<v8::String> D_Pay_Date=Nan::New<v8::String>("D_Pay_Date").ToLocalChecked();
     v8::Local<v8::String> D_Pay_DateValue=Nan::New(pRtnMemberLinkCost->D_Pay_Date).ToLocalChecked();
     v8::Local<v8::String> Charge=Nan::New<v8::String>("Charge").ToLocalChecked();
     v8::Local<v8::Integer> ChargeValue=Nan::New<v8::Integer>(pRtnMemberLinkCost->Charge);
     v8::Local<v8::String> Fee_Type=Nan::New<v8::String>("Fee_Type").ToLocalChecked();
     v8::Local<v8::String> Fee_TypeValue=Nan::New(pRtnMemberLinkCost->Fee_Type).ToLocalChecked();
     v8::Local<v8::String> Pro=Nan::New<v8::String>("Pro").ToLocalChecked();
     v8::Local<v8::String> ProValue=Nan::New(pRtnMemberLinkCost->Pro).ToLocalChecked();

     v8::Local<v8::Object> pRtnMemberLinkCostJS=Nan::New<v8::Object>();
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(ParticipantName),Local<v8::Value>(ParticipantNameValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(ServiceProvider),Local<v8::Value>(ServiceProviderValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(Pay_Date),Local<v8::Value>(Pay_DateValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(B_Pay_Date),Local<v8::Value>(B_Pay_DateValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(D_Pay_Date),Local<v8::Value>(D_Pay_DateValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(Charge),Local<v8::Value>(ChargeValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(Fee_Type),Local<v8::Value>(Fee_TypeValue));
     pRtnMemberLinkCostJS->Set(Local<v8::Value>(Pro),Local<v8::Value>(ProValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnMemberLinkCostJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetPartylinkMonthlyRentTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetPartylinkMonthlyRentTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetPartylinkMonthlyRentField *pRspQryNetPartylinkMonthlyRent =(CShfeFtdcRspQryNetPartylinkMonthlyRentField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetPartylinkMonthlyRent->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetPartylinkMonthlyRent->ID);
     v8::Local<v8::String> LineName=Nan::New<v8::String>("LineName").ToLocalChecked();
     v8::Local<v8::String> LineNameValue=Nan::New(pRspQryNetPartylinkMonthlyRent->LineName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryNetPartylinkMonthlyRent->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> ServiceProvider=Nan::New<v8::String>("ServiceProvider").ToLocalChecked();
     v8::Local<v8::String> ServiceProviderValue=Nan::New(pRspQryNetPartylinkMonthlyRent->ServiceProvider).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRspQryNetPartylinkMonthlyRent->MonthlyRental);
     v8::Local<v8::String> Remark=Nan::New<v8::String>("Remark").ToLocalChecked();
     v8::Local<v8::String> RemarkValue=Nan::New(pRspQryNetPartylinkMonthlyRent->Remark).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetPartylinkMonthlyRentJS=Nan::New<v8::Object>();
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(LineName),Local<v8::Value>(LineNameValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(ServiceProvider),Local<v8::Value>(ServiceProviderValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRspQryNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(Remark),Local<v8::Value>(RemarkValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetPartylinkMonthlyRentJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetPartylinkMonthlyRentTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetPartylinkMonthlyRentTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetPartylinkMonthlyRentField *pRtnNetPartylinkMonthlyRent =(CShfeFtdcRtnNetPartylinkMonthlyRentField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetPartylinkMonthlyRent->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetPartylinkMonthlyRent->ID);
     v8::Local<v8::String> LineName=Nan::New<v8::String>("LineName").ToLocalChecked();
     v8::Local<v8::String> LineNameValue=Nan::New(pRtnNetPartylinkMonthlyRent->LineName).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnNetPartylinkMonthlyRent->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> ServiceProvider=Nan::New<v8::String>("ServiceProvider").ToLocalChecked();
     v8::Local<v8::String> ServiceProviderValue=Nan::New(pRtnNetPartylinkMonthlyRent->ServiceProvider).ToLocalChecked();
     v8::Local<v8::String> MonthlyRental=Nan::New<v8::String>("MonthlyRental").ToLocalChecked();
     v8::Local<v8::Integer> MonthlyRentalValue=Nan::New<v8::Integer>(pRtnNetPartylinkMonthlyRent->MonthlyRental);
     v8::Local<v8::String> Remark=Nan::New<v8::String>("Remark").ToLocalChecked();
     v8::Local<v8::String> RemarkValue=Nan::New(pRtnNetPartylinkMonthlyRent->Remark).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetPartylinkMonthlyRentJS=Nan::New<v8::Object>();
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(LineName),Local<v8::Value>(LineNameValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(ServiceProvider),Local<v8::Value>(ServiceProviderValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(MonthlyRental),Local<v8::Value>(MonthlyRentalValue));
     pRtnNetPartylinkMonthlyRentJS->Set(Local<v8::Value>(Remark),Local<v8::Value>(RemarkValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetPartylinkMonthlyRentJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
void OnRspQryNetNonPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRspQryNetNonPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRspQryNetNonPartyLinkInfoField *pRspQryNetNonPartyLinkInfo =(CShfeFtdcRspQryNetNonPartyLinkInfoField *)(paramArrayNew[0]);
      CShfeFtdcRspInfoField *pRspInfo =(CShfeFtdcRspInfoField *)(paramArrayNew[1]);
      int nRequestID =*(int*)paramArrayNew[2];
      bool nIsLastNew=*(bool*)paramArrayNew[3];
      ///////////////////////////////////output message///////////////////////// 
      if(pRspInfo!=NULL){
        std::cout<<"ErrorMsg:"<<pRspInfo->ErrorMsg<<std::endl; 
      }
      else if(pRspInfo==NULL){
      std::cout<<"pRspInfo: "<<"NULL"<<std::endl;
      }
      std::cout<<"nRequestID: "<<nRequestID<<std::endl;
      std::cout<<"nIsLastNew: "<<nIsLastNew<<std::endl;
     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRspQryNetNonPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRspQryNetNonPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRspQryNetNonPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRspQryNetNonPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRspQryNetNonPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRspQryNetNonPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRspQryNetNonPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRspQryNetNonPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRspQryNetNonPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRspQryNetNonPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRspQryNetNonPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRspQryNetNonPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRspQryNetNonPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRspQryNetNonPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRspQryNetNonPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRspQryNetNonPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRspQryNetNonPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRspQryNetNonPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRspQryNetNonPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRspQryNetNonPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRspQryNetNonPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRspQryNetNonPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRspQryNetNonPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRspQryNetNonPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRspQryNetNonPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRspQryNetNonPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRspQryNetNonPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRspQryNetNonPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRspQryNetNonPartyLinkInfo->PRO).ToLocalChecked();
     v8::Local<v8::Object> pRspQryNetNonPartyLinkInfoJS=Nan::New<v8::Object>();
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRspQryNetNonPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

      v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
      if(pRspInfo!=NULL){
          v8::Local<v8::String> ErrorID=Nan::New<v8::String>("ErrorID").ToLocalChecked();
          v8::Local<v8::Integer> ErrorIDValue=Nan::New<v8::Integer>(pRspInfo->ErrorID);
          v8::Local<v8::String> ErrorMsg=Nan::New<v8::String>("ErrorMsg").ToLocalChecked();
          v8::Local<v8::String> ErrorMsggValue=Nan::New(pRspInfo->ErrorMsg).ToLocalChecked();

           v8::Local<v8::Object> pRspInfoJS=Nan::New<v8::Object>();
          pRspInfoJS->Set(Local<v8::Value>(ErrorID),Local<v8::Value>(ErrorIDValue));
          pRspInfoJS->Set(Local<v8::Value>(ErrorMsg),Local<v8::Value>(ErrorMsggValue));
      }
      std::cout<<"pRspInfo==NULL"<<std::endl;
      // v8::Local<v8::String> pRspInfoJSS=Nan::New<v8::String>("test").ToLocalChecked();
      v8::Local<v8::Integer> nRequestIDJS=Nan::New<v8::Integer>(nRequestID);
      v8::Local<v8::Boolean> nIsLastNewJS=Nan::New<v8::Boolean>(nIsLastNew);

      v8::Local<v8::Value> params[4];
         params[0]=Local<v8::Value>(pRspQryNetNonPartyLinkInfoJS);

        if(pRspInfo!=NULL)
            params[1]=Local<v8::Value>(pRspInfoJS);
        else
            params[1]=Local<v8::Value>( Nan::Undefined());
        params[2]=Local<v8::Value>(nRequestIDJS);
        params[3]=Local<v8::Value>(nIsLastNewJS);
        callback.Call(4, params);
    }
    std::cout<<"end1"<<std::endl;
    for(int i=0;i<4;i++){
        delete []paramArrayNew[i];
    }
    delete []paramArrayNew;
        
}
void OnRtnNetNonPartyLinkInfoTopic(uv_async_t *handle)
{
    void**paramArrayNew=new void*[4];
    paramArrayNew = (void**)handle->data;
    Nan::HandleScope scope;
    if(SpiObj.IsEmpty())
    {
      std::cout<<" IsEmpty()"<<std::endl;
      return;
    }
    v8::Local<v8::Object> localSpiObj=Nan::New<v8::Object>(SpiObj);
    v8::Local<v8::Value> OnFrontConnected=localSpiObj->Get(Nan::New<v8::String>("OnRtnNetNonPartyLinkInfoTopic").ToLocalChecked());
    if(OnFrontConnected->IsFunction())
    {
      v8::Local<v8::Function> function=v8::Local<v8::Function>::Cast(OnFrontConnected);
      Nan::Callback callback(function); 
      CShfeFtdcRtnNetNonPartyLinkInfoField *pRtnNetNonPartyLinkInfo =(CShfeFtdcRtnNetNonPartyLinkInfoField *)(paramArrayNew[0]);

     v8::Local<v8::String> OperationType=Nan::New<v8::String>("OperationType").ToLocalChecked();
     v8::Local<v8::Integer> OperationTypeValue=Nan::New<v8::Integer>(pRtnNetNonPartyLinkInfo->OperationType);
     v8::Local<v8::String> ID=Nan::New<v8::String>("ID").ToLocalChecked();
     v8::Local<v8::Integer> IDValue=Nan::New<v8::Integer>(pRtnNetNonPartyLinkInfo->ID);
     v8::Local<v8::String> MEMBER_NO=Nan::New<v8::String>("MEMBER_NO").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NOValue=Nan::New(pRtnNetNonPartyLinkInfo->MEMBER_NO).ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAME=Nan::New<v8::String>("MEMBER_NAME").ToLocalChecked();
     v8::Local<v8::String> MEMBER_NAMEValue=Nan::New(pRtnNetNonPartyLinkInfo->MEMBER_NAME).ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDR=Nan::New<v8::String>("REMOTE_ADDR").ToLocalChecked();
     v8::Local<v8::String> REMOTE_ADDRValue=Nan::New(pRtnNetNonPartyLinkInfo->REMOTE_ADDR).ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDR=Nan::New<v8::String>("LOCAL_ADDR").ToLocalChecked();
     v8::Local<v8::String> LOCAL_ADDRValue=Nan::New(pRtnNetNonPartyLinkInfo->LOCAL_ADDR).ToLocalChecked();
     v8::Local<v8::String> ADDRESS=Nan::New<v8::String>("ADDRESS").ToLocalChecked();
     v8::Local<v8::String> ADDRESSValue=Nan::New(pRtnNetNonPartyLinkInfo->ADDRESS).ToLocalChecked();
     v8::Local<v8::String> LINE_STATUS=Nan::New<v8::String>("LINE_STATUS").ToLocalChecked();
     v8::Local<v8::String> LINE_STATUSValue=Nan::New(pRtnNetNonPartyLinkInfo->LINE_STATUS).ToLocalChecked();
     v8::Local<v8::String> CONTACT=Nan::New<v8::String>("CONTACT").ToLocalChecked();
     v8::Local<v8::String> CONTACTValue=Nan::New(pRtnNetNonPartyLinkInfo->CONTACT).ToLocalChecked();
     v8::Local<v8::String> TELEPHONE=Nan::New<v8::String>("TELEPHONE").ToLocalChecked();
     v8::Local<v8::String> TELEPHONEValue=Nan::New(pRtnNetNonPartyLinkInfo->TELEPHONE).ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONE=Nan::New<v8::String>("MOBILEPHONE").ToLocalChecked();
     v8::Local<v8::String> MOBILEPHONEValue=Nan::New(pRtnNetNonPartyLinkInfo->MOBILEPHONE).ToLocalChecked();
     v8::Local<v8::String> EMAIL=Nan::New<v8::String>("EMAIL").ToLocalChecked();
     v8::Local<v8::String> EMAILValue=Nan::New(pRtnNetNonPartyLinkInfo->EMAIL).ToLocalChecked();
     v8::Local<v8::String> FAX=Nan::New<v8::String>("FAX").ToLocalChecked();
     v8::Local<v8::String> FAXValue=Nan::New(pRtnNetNonPartyLinkInfo->FAX).ToLocalChecked();
     v8::Local<v8::String> PROVINCE=Nan::New<v8::String>("PROVINCE").ToLocalChecked();
     v8::Local<v8::String> PROVINCEValue=Nan::New(pRtnNetNonPartyLinkInfo->PROVINCE).ToLocalChecked();
     v8::Local<v8::String> DDN_NO=Nan::New<v8::String>("DDN_NO").ToLocalChecked();
     v8::Local<v8::String> DDN_NOValue=Nan::New(pRtnNetNonPartyLinkInfo->DDN_NO).ToLocalChecked();
     v8::Local<v8::String> IN_MODE=Nan::New<v8::String>("IN_MODE").ToLocalChecked();
     v8::Local<v8::String> IN_MODEValue=Nan::New(pRtnNetNonPartyLinkInfo->IN_MODE).ToLocalChecked();
     v8::Local<v8::String> IP_WAN=Nan::New<v8::String>("IP_WAN").ToLocalChecked();
     v8::Local<v8::String> IP_WANValue=Nan::New(pRtnNetNonPartyLinkInfo->IP_WAN).ToLocalChecked();
     v8::Local<v8::String> IP_LAN=Nan::New<v8::String>("IP_LAN").ToLocalChecked();
     v8::Local<v8::String> IP_LANValue=Nan::New(pRtnNetNonPartyLinkInfo->IP_LAN).ToLocalChecked();
     v8::Local<v8::String> IPADDR=Nan::New<v8::String>("IPADDR").ToLocalChecked();
     v8::Local<v8::String> IPADDRValue=Nan::New(pRtnNetNonPartyLinkInfo->IPADDR).ToLocalChecked();
     v8::Local<v8::String> Interface=Nan::New<v8::String>("Interface").ToLocalChecked();
     v8::Local<v8::String> InterfaceValue=Nan::New(pRtnNetNonPartyLinkInfo->Interface).ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATE=Nan::New<v8::String>("INTERFACE_DATE").ToLocalChecked();
     v8::Local<v8::String> INTERFACE_DATEValue=Nan::New(pRtnNetNonPartyLinkInfo->INTERFACE_DATE).ToLocalChecked();
     v8::Local<v8::String> SOFTWARE=Nan::New<v8::String>("SOFTWARE").ToLocalChecked();
     v8::Local<v8::String> SOFTWAREValue=Nan::New(pRtnNetNonPartyLinkInfo->SOFTWARE).ToLocalChecked();
     v8::Local<v8::String> FEE_TYPE=Nan::New<v8::String>("FEE_TYPE").ToLocalChecked();
     v8::Local<v8::String> FEE_TYPEValue=Nan::New(pRtnNetNonPartyLinkInfo->FEE_TYPE).ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDER=Nan::New<v8::String>("SERVICEPROVIDER").ToLocalChecked();
     v8::Local<v8::String> SERVICEPROVIDERValue=Nan::New(pRtnNetNonPartyLinkInfo->SERVICEPROVIDER).ToLocalChecked();
     v8::Local<v8::String> IF_ZIYING=Nan::New<v8::String>("IF_ZIYING").ToLocalChecked();
     v8::Local<v8::String> IF_ZIYINGValue=Nan::New(pRtnNetNonPartyLinkInfo->IF_ZIYING).ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUAN=Nan::New<v8::String>("IF_TUOGUAN").ToLocalChecked();
     v8::Local<v8::String> IF_TUOGUANValue=Nan::New(pRtnNetNonPartyLinkInfo->IF_TUOGUAN).ToLocalChecked();
     v8::Local<v8::String> HASOTHER=Nan::New<v8::String>("HASOTHER").ToLocalChecked();
     v8::Local<v8::String> HASOTHERValue=Nan::New(pRtnNetNonPartyLinkInfo->HASOTHER).ToLocalChecked();
     v8::Local<v8::String> SEAT_NO=Nan::New<v8::String>("SEAT_NO").ToLocalChecked();
     v8::Local<v8::String> SEAT_NOValue=Nan::New(pRtnNetNonPartyLinkInfo->SEAT_NO).ToLocalChecked();
     v8::Local<v8::String> PRO=Nan::New<v8::String>("PRO").ToLocalChecked();
     v8::Local<v8::String> PROValue=Nan::New(pRtnNetNonPartyLinkInfo->PRO).ToLocalChecked();

     v8::Local<v8::Object> pRtnNetNonPartyLinkInfoJS=Nan::New<v8::Object>();
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(OperationType),Local<v8::Value>(OperationTypeValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(ID),Local<v8::Value>(IDValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NO),Local<v8::Value>(MEMBER_NOValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MEMBER_NAME),Local<v8::Value>(MEMBER_NAMEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(REMOTE_ADDR),Local<v8::Value>(REMOTE_ADDRValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(LOCAL_ADDR),Local<v8::Value>(LOCAL_ADDRValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(ADDRESS),Local<v8::Value>(ADDRESSValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(LINE_STATUS),Local<v8::Value>(LINE_STATUSValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(CONTACT),Local<v8::Value>(CONTACTValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(TELEPHONE),Local<v8::Value>(TELEPHONEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(MOBILEPHONE),Local<v8::Value>(MOBILEPHONEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(EMAIL),Local<v8::Value>(EMAILValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(FAX),Local<v8::Value>(FAXValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(PROVINCE),Local<v8::Value>(PROVINCEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(DDN_NO),Local<v8::Value>(DDN_NOValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IN_MODE),Local<v8::Value>(IN_MODEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IP_WAN),Local<v8::Value>(IP_WANValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IP_LAN),Local<v8::Value>(IP_LANValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IPADDR),Local<v8::Value>(IPADDRValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(Interface),Local<v8::Value>(InterfaceValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(INTERFACE_DATE),Local<v8::Value>(INTERFACE_DATEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SOFTWARE),Local<v8::Value>(SOFTWAREValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(FEE_TYPE),Local<v8::Value>(FEE_TYPEValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SERVICEPROVIDER),Local<v8::Value>(SERVICEPROVIDERValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IF_ZIYING),Local<v8::Value>(IF_ZIYINGValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(IF_TUOGUAN),Local<v8::Value>(IF_TUOGUANValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(HASOTHER),Local<v8::Value>(HASOTHERValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(SEAT_NO),Local<v8::Value>(SEAT_NOValue));
     pRtnNetNonPartyLinkInfoJS->Set(Local<v8::Value>(PRO),Local<v8::Value>(PROValue));

     v8::Local<v8::Value> param[1];
     param[0]=Local<v8::Value>(pRtnNetNonPartyLinkInfoJS);

     callback.Call(1, param);
     }
     std::cout<<"end1"<<std::endl;
     for(int i=0;i<4;i++){
     delete []paramArrayNew[i];
     }
     delete []paramArrayNew;
     
}
